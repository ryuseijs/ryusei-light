{"version":3,"file":"ryuseilight.min.js","sources":["../../src/js/constants/categories.ts","../../src/js/utils/type/type.ts","../../src/js/utils/array/toArray/toArray.ts","../../src/js/utils/dom/addClass/addClass.ts","../../src/js/utils/object/forOwn/forOwn.ts","../../src/js/utils/object/assign/assign.ts","../../src/js/utils/dom/attr/attr.ts","../../src/js/utils/dom/tag/tag.ts","../../src/js/utils/dom/text/text.ts","../../src/js/utils/error/assert/assert.ts","../../src/js/utils/string/startsWith/startsWith.ts","../../src/js/core/Lexer/Lexer.ts","../../src/js/constants/characters.ts","../../src/js/constants/classes.ts","../../src/js/constants/project.ts","../../src/js/event/EventBus.ts","../../src/js/core/Renderer/Renderer.ts","../../src/js/utils/string/escapeHtml/escapeHtml.ts","../../src/js/constants/regexp.ts","../../src/js/languages/css/css.ts","../../src/js/languages/javascript/javascript.ts","../../src/js/languages/html/html.ts","../../src/js/languages/xml/xml.ts","../../src/js/core/RyuseiLight/RyuseiLight.ts","../../src/js/languages/none/none.ts","../../src/js/build/default.ts"],"sourcesContent":["export const CATEGORY_KEYWORD    = 'keyword';\nexport const CATEGORY_CONSTANT   = 'constant';\nexport const CATEGORY_COMMENT    = 'comment';\nexport const CATEGORY_TAG        = 'tag';\nexport const CATEGORY_TAG_CLOSE  = 'tag.close';\nexport const CATEGORY_SELECTOR   = 'selector';\nexport const CATEGORY_ATRULE     = 'atrule';\nexport const CATEGORY_ATTRIBUTE  = 'attr';\nexport const CATEGORY_PROPERTY   = 'prop';\nexport const CATEGORY_VALUE      = 'value';\nexport const CATEGORY_VARIABLE   = 'variable';\nexport const CATEGORY_ENTITY     = 'entity';\nexport const CATEGORY_CDATA      = 'cdata';\nexport const CATEGORY_PROLOG     = 'prolog';\nexport const CATEGORY_IDENTIFIER = 'identifier';\nexport const CATEGORY_STRING     = 'string';\nexport const CATEGORY_NUMBER     = 'number';\nexport const CATEGORY_BOOLEAN    = 'boolean';\nexport const CATEGORY_FUNCTION   = 'function';\nexport const CATEGORY_CLASS      = 'class';\nexport const CATEGORY_DECORATOR  = 'decorator';\nexport const CATEGORY_REGEXP     = 'regexp';\nexport const CATEGORY_OPERATOR   = 'operator';\nexport const CATEGORY_BRACKET    = 'bracket';\nexport const CATEGORY_DELIMITER  = 'delimiter';\nexport const CATEGORY_SYMBOL     = 'symbol';\nexport const CATEGORY_SPACE      = 'space';\nexport const CATEGORY_TEXT       = 'text';\n\n// Internal use only\nexport const CATEGORY_LINEBREAK  = 'lb';\n","/**\n * Checks if the given subject is an object or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an object, or otherwise `false`.\n */\nexport function isObject<T extends object>( subject: any ): subject is T {\n  return subject !== null && typeof subject === 'object';\n}\n\n/**\n * Checks if the given subject is an array or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an array, or otherwise `false`.\n */\nexport function isArray<T>( subject: any ): subject is T[] {\n  return Array.isArray( subject );\n}\n\n/**\n * Checks if the given subject is a function or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is a function, or otherwise `false`.\n */\nexport function isFunction( subject: any ): subject is ( ...args: any[] ) => any {\n  return typeof subject === 'function';\n}\n\n/**\n * Checks if the given subject is a string or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is a string, or otherwise `false`.\n */\nexport function isString( subject: any ): subject is string {\n  return typeof subject === 'string';\n}\n\n/**\n * Checks if the given subject is `undefined` or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is `undefined`, or otherwise `false`.\n */\nexport function isUndefined( subject: any ): subject is undefined {\n  return typeof subject === 'undefined';\n}\n\n/**\n * Checks if the given subject is an HTMLElement instance or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an HTMLElement instance, or otherwise `false`.\n */\nexport function isHTMLElement( subject: any ): subject is HTMLElement {\n  return subject instanceof HTMLElement;\n}\n","import { isArray } from '../../type/type';\n\n\n/**\n * Push the provided value to an array only if the value is not an array.\n *\n * @param value - A value to push.\n *\n * @return An array containing the value, or the value itself if it is already an array.\n */\nexport function toArray<T>( value: T | T[] ): T[] {\n  return isArray<T>( value ) ? value : [ value ];\n}\n","import { toArray } from '../../array';\n\n\n/**\n * Adds classes to the element.\n *\n * @param elm     - An element to add classes to.\n * @param classes - Classes to add.\n */\nexport function addClass( elm: HTMLElement, classes: string | string[] ): void {\n  toArray( classes ).forEach( name => {\n    if ( name ) {\n      elm.classList.add( name );\n    }\n  } );\n}\n","/**\n * Iterates over the provided object by own enumerable keys with calling the iteratee function.\n *\n * @param object   - An object to iterate over.\n * @param iteratee - An iteratee function that takes the value and key as arguments.\n *\n * @return A provided object itself.\n */\nexport function forOwn<T extends object>( object: T, iteratee: ( value: T[ keyof T ], key: string ) => void ) {\n  if ( object ) {\n    const keys = Object.keys( object );\n\n    for ( let i = 0; i < keys.length; i++ ) {\n      iteratee( object[ keys[ i ] ], keys[ i ] );\n    }\n  }\n}\n","import { isObject, isUndefined } from '../../type/type';\nimport { forOwn } from '../forOwn/forOwn';\n\n\n/**\n * Assign U to T.\n *\n * @typeParam T - An object to assign to.\n * @typeParam U - An object to assign.\n *\n * @return An assigned object type.\n */\nexport type Assign<T, U> = Omit<T, keyof U> & U;\n\nexport function assign<T extends object>( object: T ): T;\n\n// There is a way to type arguments recursively, but these fixed definitions are enough for this project.\nexport function assign<T extends object, U extends object>( object: T, source: U ): Assign<T, U>;\n\nexport function assign<T extends object, U1 extends object, U2 extends object>(\n  object: T, source1: U1, source2: U2\n): Assign<Assign<T, U1>, U2>;\n\nexport function assign<T extends object, U1 extends object, U2 extends object, U3 extends object>(\n  object: T, source1: U1, source2: U2, source3: U3\n): Assign<Assign<Assign<T, U1>, U2>, U3>;\n\n/**\n * Assigns all own enumerable properties of all source objects to the provided object.\n * `undefined` in source objects will be skipped.\n *\n * @param object  - An object to assign properties to.\n * @param sources - Objects to assign properties from.\n *\n * @return An object assigned properties of the sources to.\n */\nexport function assign<T extends object, U extends object>( object: T, ...sources: U[] ): any {\n  sources.forEach( source => {\n    if ( isObject( source ) ) {\n      forOwn( source, ( value, key ) => {\n        if ( ! isUndefined( source[ key ] ) ) {\n          object[ key ] = source[ key ];\n        }\n      } );\n    }\n  } );\n\n  return object;\n}\n","import { forOwn } from '../../object';\nimport { isObject, isString } from '../../type/type';\n\n\nexport function attr( elm: Element, attrs: string ): string;\nexport function attr( elm: Element, attrs: Record<string, string | number | boolean> ): void;\n\n/**\n * Sets new attributes to the passed element if the `attrs` is an object literal,\n * or gets an attribute value from it if the `attrs` is a string.\n *\n * @param elm   - An element to set or get an attribute.\n * @param attrs - An attribute name as a string or new attributes as an object literal.\n */\nexport function attr( elm: Element, attrs: string | Record<string, string | number | boolean> ): string | void {\n  if ( isString( attrs ) ) {\n    return elm.getAttribute( attrs ) || '';\n  }\n\n  if ( isObject( attrs ) ) {\n    forOwn( attrs, ( value, key ) => {\n      elm.setAttribute( key, String( value ) );\n    } );\n  }\n}\n","/**\n * Returns an open tag with provided classes.\n *\n * @param classes - Classes.\n * @param tag     - Optional. A tag name.\n */\nexport function tag( classes: string[], tag?: string ): string {\n  return `<${ tag || 'div' } class=\"${ classes.join( ' ' ) }\">`;\n}\n","import { isUndefined } from '../../type/type';\n\n\nexport function text( node: Node ): string;\nexport function text( node: Node, text: string ): void;\n\n/**\n * Sets or gets a text content of the provided node.\n *\n * @param node - A node to get or set a text.\n * @param text - Optional. A text to set.\n */\nexport function text( node: Node, text?: string ): string | void {\n  if ( isUndefined( text ) ) {\n    return node.textContent;\n  }\n\n  node.textContent = text;\n}\n","/**\n * Throws an error if the provided condition is falsy.\n *\n * @param condition - If falsy, an error is thrown.\n * @param message   - Optional. A message for the error.\n */\nexport function assert( condition: any, message = '' ): void {\n  if ( ! condition ) {\n    throw new Error( message );\n  }\n}\n","/**\n * Checks if the string starts with the `char` or not.\n *\n * @param string - A string to check.\n * @param char   - A character.\n *\n * @return `true` if the string starts with the `char`, or otherwise `false`.\n */\nexport function startsWith( string: string, char: string ): boolean {\n  return string.charAt( 0 ) === char;\n}\n","import { Language, Token, Tokenizer } from '../../types';\nimport { LINE_BREAK } from '../../constants/characters';\nimport { CATEGORY_LINEBREAK, CATEGORY_TEXT } from '../../constants/categories';\nimport { assert, forOwn, isUndefined, startsWith } from '../../utils';\n\n\n/**\n * Checks if the RegExp supports the sticky flag or not.\n */\nconst isStickySupported = ! isUndefined( /x/.sticky );\n\n/**\n * The class for creating a simple lexer by a Language object.\n *\n * @since 0.0.1\n */\nexport class Lexer {\n  /**\n   * Holds the Language object.\n   */\n  readonly language: Language;\n\n  /**\n   * Stores lines.\n   */\n  protected lines: Token[][];\n\n  /**\n   * Indicates the current line index.\n   */\n  protected index: number;\n\n  /**\n   * The depth of the state.\n   */\n  protected depth;\n\n  /**\n   * Limits the (ideal) number of lines.\n   */\n  protected limit;\n\n  /**\n   * Turned to be `true` if the tokenization is manually aborted.\n   */\n  protected aborted;\n\n  /**\n   * The Lexer constructor.\n   *\n   * @param language - A Language object.\n   */\n  constructor( language: Language ) {\n    this.language = language;\n    this.init( language );\n  }\n\n  /**\n   * Initializes the language object.\n   *\n   * @param language - A Language object to initialize.\n   */\n  protected init( language: Language ): void {\n    forOwn( language.grammar, ( tokenizers, key ) => {\n      language.grammar[ key ] = this.merge( language, tokenizers );\n    } );\n\n    forOwn( language.use, this.init.bind( this ) );\n  }\n\n  /**\n   * Includes tokenizers required by `#` annotation and flatten them.\n   *\n   * @param language   - A language object.\n   * @param tokenizers - Tokenizers.\n   *\n   * @return Merged tokenizers.\n   */\n  protected merge( language: Language, tokenizers: Tokenizer[] ): Tokenizer[] {\n    const merged = [];\n\n    for ( let i = 0; i < tokenizers.length; i++ ) {\n      const tokenizer = tokenizers[ i ];\n      const [ category, regexp ] = tokenizers[ i ];\n\n      if ( startsWith( category, '#' ) && ! regexp ) {\n        merged.push( ...this.merge( language, language.grammar[ category.slice( 1 ) ] ) );\n      } else {\n        const flags = regexp.toString().match( /[gimsy]*$/ )[ 0 ].replace( /[gy]/g, '' );\n        let source = regexp.source + ( isStickySupported ? '' : '|()' );\n\n        forOwn( language.source, ( replacement, key ) => {\n          source = source.replace( new RegExp( `%${ key }`, 'g' ), replacement.source );\n        } );\n\n        tokenizer[ 1 ] = new RegExp( source, ( isStickySupported ? 'y' : 'g' ) + flags );\n        merged.push( tokenizer );\n      }\n    }\n\n    return merged;\n  }\n\n  /**\n   * Parses the text by the provided language and tokenizers.\n   *\n   * @param text       - A text to tokenize.\n   * @param language   - A Grammar object.\n   * @param tokenizers - An array with tokenizers.\n   *\n   * @return An index of the text where the handling ends.\n   */\n  protected parse( text: string, language: Language, tokenizers: Tokenizer[] ): number {\n    let index    = 0;\n    let position = 0;\n\n    this.depth++;\n\n    main:\n    while ( index < text.length && ! this.aborted ) {\n      for ( let i = 0; i < tokenizers.length; i++ ) {\n        const tokenizer = tokenizers[ i ];\n        const [ , regexp, action ] = tokenizer;\n\n        regexp.lastIndex = index;\n\n        const match = regexp.exec( text );\n\n        if ( ! match || ! match[ 0 ] ) {\n          continue;\n        }\n\n        if ( position < index ) {\n          this.push( [ CATEGORY_TEXT, text.slice( position, index ) ] );\n        }\n\n        if ( action === '@back' ) {\n          position = index;\n          break main;\n        }\n\n        const offset = this.handle( match, language, tokenizer );\n        index += offset || 1;\n        position = index;\n\n        if ( action === '@break' ) {\n          break main;\n        }\n\n        continue main;\n      }\n\n      index++;\n    }\n\n    if ( position < index ) {\n      this.push( [ CATEGORY_TEXT, text.slice( position ) ] );\n    }\n\n    this.depth--;\n\n    return index;\n  }\n\n  /**\n   * Pushes the provided token to the lines array.\n   *\n   * @param token - A token to push.\n   */\n  protected push( token: Token ): void {\n    const { depth } = this;\n    const [ category, text ] = token;\n\n    let index = 0;\n    let from  = 0;\n\n    while ( index > -1 && ! this.aborted ) {\n      index = text.indexOf( LINE_BREAK, from );\n\n      const line   = this.lines[ this.index ];\n      const sliced = text.slice( from, index < 0 ? undefined : index );\n\n      if ( sliced ) {\n        line.push( [ category, sliced, depth ] );\n      }\n\n      if ( index > -1 ) {\n        if ( ! line.length ) {\n          line.push( [ CATEGORY_LINEBREAK, LINE_BREAK, depth ] );\n        }\n\n        this.index++;\n        this.aborted = this.limit && ! depth && this.index >= this.limit;\n\n        if ( ! this.aborted ) {\n          from = index + 1;\n          this.lines[ this.index ] = [];\n        }\n      }\n    }\n  }\n\n  /**\n   * Handles the matched text.\n   *\n   * @param match     - A matched result.\n   * @param language  - A Language object.\n   * @param tokenizer - A tokenizer that has been matched with the text.\n   *\n   * @return An index of the text where the handling ends.\n   */\n  protected handle( match: RegExpExecArray, language: Language, tokenizer: Tokenizer ): number {\n    const [ category ] = tokenizer;\n\n    if ( ! category ) {\n      return 0;\n    }\n\n    let [ text ] = match;\n\n    if ( tokenizer[ 3 ] === '@debug' ) {\n      // eslint-disable-next-line\n      console.log( text, tokenizer );\n    }\n\n    if ( startsWith( category, '@' ) ) {\n      assert( language.use );\n\n      const lang = language.use[ category.slice( 1 ) ];\n      assert( lang );\n\n      return this.parse( text, lang, lang.grammar.main );\n    }\n\n    if ( startsWith( category, '#' ) ) {\n      const tokenizers = language.grammar[ category.slice( 1 ) ];\n      assert( tokenizers );\n\n      if ( tokenizer[ 2 ] === '@rest' ) {\n        text = match.input.slice( match.index );\n      }\n\n      return this.parse( text, language, tokenizers );\n    }\n\n    this.push( [ category, text ] );\n    return text.length;\n  }\n\n  /**\n   * Tokenizes the text by the current language.\n   *\n   * @param text  - A text to tokenize.\n   * @param limit - Optional. Limits the ideal number of lines.\n   *\n   * @return An array with tokens.\n   */\n  tokenize( text: string, limit?: number ): Token[][] {\n    this.lines   = [ [] ];\n    this.index   = 0;\n    this.depth   = -1;\n    this.limit   = limit || 0;\n    this.aborted = false;\n\n    this.parse( text, this.language, this.language.grammar.main );\n\n    return this.lines;\n  }\n}\n","/**\n * The line break character.\n *\n * @private\n * @since 0.0.1\n */\nexport const LINE_BREAK = '\\n';\n","import { PROJECT_CODE, PROJECT_CODE_SHORT } from './project';\n\n\nexport const ROOT      = PROJECT_CODE;\nexport const CONTAINER = `${ PROJECT_CODE_SHORT }__container`;\nexport const BODY      = `${ PROJECT_CODE_SHORT }__body`;\nexport const CODE      = `${ PROJECT_CODE_SHORT }__code`;\nexport const LINE      = `${ PROJECT_CODE_SHORT }__line`;\nexport const TOKEN     = `${ PROJECT_CODE_SHORT }__token`;\nexport const ACTIVE    = 'is-active';\n","/**\n * The project code name.\n *\n * @since 0.0.1\n */\nexport const PROJECT_CODE = 'ryuseilight';\n\n/**\n * The abbreviated project code.\n *\n * @since 0.0.1\n */\nexport const PROJECT_CODE_SHORT = 'rl';\n","import { AnyFunction } from '../types';\n\n\n/**\n * The class for providing the very simple event bus.\n *\n * @private\n * @since 0.0.1\n */\nexport class EventBus {\n  /**\n   * Holds handlers.\n   */\n  protected handlers = {};\n\n  /**\n   * Attaches a handler.\n   *\n   * @param event    - An event name.\n   * @param callback - A callback function to register.\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\n   */\n  on( event: string, callback: AnyFunction, priority = 10 ): void {\n    const handlers = ( this.handlers[ event ] = this.handlers[ event ] || [] );\n    handlers.push( { callback, priority } );\n    handlers.sort( ( handler1, handler2 ) => handler1.priority - handler2.priority );\n  }\n\n  /**\n   * Emits an event.\n   *\n   * @param event - An event name.\n   * @param args  - Optional. Any number of arguments to pass to callbacks.\n   */\n  emit( event, ...args ): void {\n    ( this.handlers[ event ] || [] ).forEach( handler => {\n      handler.callback( ...args );\n    } );\n  }\n\n  /**\n   * Destroys the event bus.\n   */\n  destroy(): void {\n    this.handlers = {};\n  }\n}\n","import { BODY, CODE, CONTAINER, LINE, ROOT, TOKEN } from '../../constants/classes';\nimport { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { EventBus } from '../../event/EventBus';\nimport { Component, LanguageInfo, Options, Token } from '../../types';\nimport { escapeHtml, forOwn, tag } from '../../utils';\n\n\n/**\n * Stores all Component functions.\n */\nconst Components: Record<string, Component> = {};\n\n/**\n * The class for highlighting code via provided tokens.\n *\n * @since 0.0.1\n */\nexport class Renderer {\n  /**\n   * Adds components.\n   *\n   * @param components - An object literal with Component functions.\n   */\n  static compose( components: Record<string, Component> ): void {\n    forOwn( components, ( Component, name ) => {\n      Components[ name ] = Component;\n    } );\n  }\n\n  /**\n   * Holds lines with tokens.\n   */\n  readonly lines = [];\n\n  /**\n   * Holds the language info.\n   */\n  readonly info: LanguageInfo;\n\n  /**\n   * Holds the root element if provided.\n   */\n  readonly root: HTMLElement | undefined;\n\n  /**\n   * Holds options.\n   */\n  readonly options: Options;\n\n  /**\n   * Holds the EventBus instance.\n   */\n  readonly event: EventBus = new EventBus();\n\n  /**\n   * The Renderer constructor.\n   *\n   * @param lines   - Lines with tokens to render.\n   * @param info    - The language info object.\n   * @param root    - Optional. A root element to highlight.\n   * @param options - Options.\n   */\n  constructor( lines: Token[][], info: LanguageInfo, root?: HTMLElement, options: Options = {} ) {\n    this.lines   = lines;\n    this.info    = info;\n    this.root    = root;\n    this.options = options;\n\n    this.init();\n  }\n\n  /**\n   * Initializes the instance.\n   */\n  protected init(): void {\n    const { lines } = this;\n\n    if ( lines.length ) {\n      const tokens = lines[ lines.length - 1 ];\n\n      if ( ! tokens.length || ( tokens.length === 1 && ! tokens[ 0 ][ 1 ].trim() ) ) {\n        // Removes the last empty line.\n        lines.pop();\n      }\n    }\n\n    forOwn( Components, Component => {\n      Component( this );\n    } );\n\n    this.event.emit( 'mounted' );\n  }\n\n  /**\n   * Renders lines as HTML.\n   *\n   * @param append - A function to add fragments to the HTML string.\n   *\n   * @return A rendered HTML string.\n   */\n  protected renderLines( append: ( fragment: string ) => void ): void {\n    const event   = this.event;\n    const tagName = this.options.span ? 'span' : 'code';\n\n    for ( let i = 0; i < this.lines.length; i++ ) {\n      const tokens  = this.lines[ i ];\n      const classes = [ LINE ];\n\n      event.emit( 'line:open', append, classes, i );\n      append( tag( classes ) );\n\n      for ( let j = 0; j < tokens.length; j++ ) {\n        const token      = tokens[ j ];\n        const categories = token[ 0 ].split( '.' );\n        const className  = `${ PROJECT_CODE_SHORT }__${ categories[ 0 ] }`;\n        const modifiers  = categories.slice( 1 ).map( sub => `${ className }--${ sub }` );\n        const classes    = [ TOKEN, className ].concat( modifiers );\n\n        event.emit( 'token', token, classes );\n        append( `${ tag( classes, tagName ) }${ escapeHtml( token[ 1 ] ) }</${ tagName }>` );\n      }\n\n      append( '</div>' );\n      event.emit( 'line:closed', append, i );\n    }\n  }\n\n  /**\n   * Returns all lines and wrapper elements.\n   *\n   * @param pre - Whether to wrap elements by `pre` or not.\n   *\n   * @return An HTML string.\n   */\n  html( pre: boolean ): string {\n    const { event } = this;\n    const closeTag  = '</div>';\n    let html  = '';\n\n    const append = ( fragment: string ) => { html += fragment };\n\n    if ( pre ) {\n      html += tag( [ `${ ROOT } ${ ROOT }--${ this.info.id }` ], 'pre' );\n    }\n\n    const containerClasses = [ CONTAINER ];\n    event.emit( 'open', append, containerClasses );\n    html += tag( containerClasses );\n\n    const bodyClasses = [ `${ BODY }${ this.options.wrap ? ` ${ BODY }--wrap` : '' }` ];\n    event.emit( 'body:open', append, bodyClasses );\n    html += tag( bodyClasses );\n\n    event.emit( 'code:open', append );\n    html += tag( [ CODE ] );\n    this.renderLines( append );\n    html += closeTag; // code\n\n    event.emit( 'body:close', append );\n    html += closeTag; // body\n\n    event.emit( 'close', append );\n    html += closeTag; // container\n\n    event.emit( 'closed', append );\n\n    if ( pre ) {\n      html += `</pre>`;\n    }\n\n    return html;\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy(): void {\n    this.event.emit( 'destroy' );\n    this.event.destroy();\n  }\n}\n","/**\n * Converts essential HTML special characters to HTML entities.\n *\n * @param string - A string to escape.\n *\n * @return An escaped string.\n */\nexport function escapeHtml( string: string ): string {\n  return string.replace( /&/g, '&amp;' ).replace( /</g, '&lt;' );\n}\n","export const REGEXP_FLOAT = /\\d+\\.?\\d*|\\d*\\.?\\d+/;\n\nexport const REGEXP_NUMBER = /[+-]?(\\d+\\.?\\d*|\\d*\\.?\\d+)([eE][+-]?\\d+)?/;\n\nexport const REGEXP_BOOLEAN = /\\b(?:true|false)\\b/;\n\nexport const REGEXP_BRACKET = /[[\\]{}()]/;\n\nexport const REGEXP_SPACE = /[ \\t]+/;\n\nexport const REGEXP_QUOTE = /'(?:\\\\'|.)*?'/;\n\nexport const REGEXP_DOUBLE_QUOTE = /\"(?:\\\\\"|.)*?\"/;\n\nexport const REGEXP_MULTILINE_COMMENT = /\\/\\*[\\s\\S]*?(\\*\\/|$)/;\n\nexport const REGEXP_SLASH_COMMENT = /\\/\\/.*/;\n\nexport const REGEXP_GENERAL_KEYWORDS = /\\b(?:break|catch|class|continue|do|else|extends|finally|for|function|if|implements|in|instanceof|interface|new|null|return|throw|try|while)\\b/;\n","import { Language } from '../../types';\nimport {\n  CATEGORY_BRACKET,\n  CATEGORY_COMMENT,\n  CATEGORY_FUNCTION,\n  CATEGORY_KEYWORD,\n  CATEGORY_NUMBER,\n  CATEGORY_OPERATOR,\n  CATEGORY_PROPERTY,\n  CATEGORY_SELECTOR,\n  CATEGORY_SPACE,\n  CATEGORY_STRING,\n  CATEGORY_DELIMITER,\n  CATEGORY_TAG,\n  CATEGORY_ATRULE,\n} from '../../constants/categories';\nimport { REGEXP_MULTILINE_COMMENT, REGEXP_SPACE } from '../../constants/regexp';\n\n\n/**\n * Returns the CSS language definition.\n *\n * @return A Language object.\n */\nexport function css(): Language {\n  return {\n    id  : 'css',\n    name: 'CSS',\n\n    grammar: {\n      main: [\n        [ '#common' ],\n\n        // An atrule without a block\n        [ '#findSingleAtrule' ],\n\n        // Blocks including atrules\n        [ '#findBlock' ],\n      ],\n\n      findBlock: [\n        [ '#block', /[^ \\t\\r\\n;{}][^;{}]*{.*?}/s, '@rest' ],\n      ],\n\n      findSingleAtrule: [\n        [ '#atrule', /@[^{;]+?;/s ],\n      ],\n\n      // Finds atrules before { and ;\n      findAtrule: [\n        [ '#atrule', /@[^{;]*?(?=[{;])/s ],\n      ],\n\n      // May not start with digits\n      findSelector: [\n        [ '#selector', /[^ \\t\\r\\n{};].*?(?={)/s ],\n      ],\n\n      common: [\n        [ CATEGORY_STRING, /(['\"]).*?[^\\\\]\\1/s ],\n        [ CATEGORY_COMMENT, REGEXP_MULTILINE_COMMENT ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n      ],\n\n      block: [\n        [ '#inner', /{/, '@rest' ],\n        [ CATEGORY_BRACKET, /}/, '@break' ],\n        [ '#findAtrule' ],\n        [ '#findSelector' ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n      ],\n\n      inner: [\n        [ CATEGORY_BRACKET, /{/ ],\n        [ '#common' ],\n        [ '#findBlock' ],\n        [ '#props' ],\n        [ '#findAtrule' ],\n        [ '', /}/, '@back' ],\n      ],\n\n      atrule: [\n        [ '#common' ],\n        [ '#url', /\\burl\\(/, '@rest' ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n        [ CATEGORY_ATRULE, /[^\\s();]+/ ],\n        [ CATEGORY_DELIMITER, /[:;,]/ ],\n        [ '#paren', /\\(/, '@rest' ],\n      ],\n\n      paren: [\n        [ CATEGORY_BRACKET, /^\\(/ ],\n        [ '#common' ],\n        [ '#paren', /\\(/, '@rest' ],\n        [ CATEGORY_BRACKET, /\\)/, '@break' ],\n        [ '#props' ],\n      ],\n\n      selector: [\n        [ '#common' ],\n        [ CATEGORY_OPERATOR, /[>+~]/ ],\n        [ CATEGORY_BRACKET, /[[\\]()]/ ],\n        [ CATEGORY_DELIMITER, /=/ ],\n        [ CATEGORY_SELECTOR, /::?\\S+/ ],\n        [ CATEGORY_SELECTOR, /[\\W\\d]\\S+/ ],\n        [ CATEGORY_TAG, /\\b[a-z]+|\\*/i ],\n        [ CATEGORY_SELECTOR, /\\S+/ ],\n      ],\n\n      url: [\n        [ '#common' ],\n        [ CATEGORY_FUNCTION, /^url/ ],\n        [ CATEGORY_BRACKET, /\\(/ ],\n        [ CATEGORY_STRING, /[^)]+/ ],\n        [ CATEGORY_BRACKET, /\\)/, '@break' ],\n      ],\n\n      props: [\n        [ CATEGORY_PROPERTY, /[a-z0-9-_\\xA0-\\uFFFF]+(?=:)/i ],\n        [ '#url', /\\burl\\(/, '@rest' ],\n        [ CATEGORY_FUNCTION, /\\b[\\w-]+(?=\\()\\b/ ],\n        [ CATEGORY_KEYWORD, /!important|\\b(?:initial|inherit|unset)/ ],\n        [ CATEGORY_PROPERTY, /[a-z0-9-]+(?=:)/ ],\n        [ CATEGORY_NUMBER, /#([0-9a-f]{6}|[0-9a-f]{3})/i ],\n        [ CATEGORY_NUMBER, /\\bU\\+[0-9a-f?-]+/i ],\n        [ CATEGORY_NUMBER, /[+-]?(\\d+\\.?\\d*|\\d*\\.?\\d+)/ ],\n        [ CATEGORY_DELIMITER, /[:;,]/ ],\n        [ '#paren', /\\(/, '@rest' ],\n        [ CATEGORY_BRACKET, /[[\\])]/ ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n      ],\n    },\n  };\n}\n","import {\n  REGEXP_BOOLEAN, REGEXP_BRACKET, REGEXP_DOUBLE_QUOTE, REGEXP_GENERAL_KEYWORDS, REGEXP_MULTILINE_COMMENT,\n  REGEXP_NUMBER, REGEXP_QUOTE, REGEXP_SLASH_COMMENT, REGEXP_SPACE,\n} from '../../constants/regexp';\nimport { Language } from '../../types';\nimport {\n  CATEGORY_DELIMITER, CATEGORY_DECORATOR, CATEGORY_KEYWORD, CATEGORY_REGEXP, CATEGORY_STRING,\n  CATEGORY_OPERATOR, CATEGORY_COMMENT, CATEGORY_CLASS, CATEGORY_FUNCTION, CATEGORY_BOOLEAN,\n  CATEGORY_IDENTIFIER, CATEGORY_NUMBER, CATEGORY_BRACKET, CATEGORY_SPACE,\n} from '../../constants/categories';\n\n\n/**\n * Returns the JavaScript language definition.\n *\n * @return A Language object.\n */\nexport function javascript(): Language {\n  return {\n    id   : 'javascript',\n    name : 'JavaScript',\n    alias: [ 'js' ],\n\n    source: {\n      func: /[_$a-z\\xA0-\\uFFFF][_$a-z0-9\\xA0-\\uFFFF]*/,\n    },\n\n    grammar: {\n      main: [\n        [ CATEGORY_STRING, REGEXP_QUOTE ],\n        [ CATEGORY_STRING, REGEXP_DOUBLE_QUOTE ],\n        [ '#backtick', /`/, '@rest' ],\n        [ CATEGORY_COMMENT, REGEXP_MULTILINE_COMMENT ],\n        [ CATEGORY_COMMENT, REGEXP_SLASH_COMMENT ],\n        [ CATEGORY_REGEXP, /\\/(\\[.*[^\\\\]?]|\\\\\\/|.)+?\\/[gimsuy]*/ ],\n        [ CATEGORY_KEYWORD, REGEXP_GENERAL_KEYWORDS ],\n        [ CATEGORY_KEYWORD, /\\b(?:as|async|await|case|catch|const|debugger|default|delete|enum|export|from|import|let|package|private|protected|public|super|switch|static|this|typeof|undefined|var|void|with|yield)\\b/ ],\n        [ CATEGORY_KEYWORD, /\\b((get|set)(?=\\s+%func))/i ],\n        [ CATEGORY_CLASS, /\\b[A-Z][\\w$]*\\b/ ],\n        [ CATEGORY_FUNCTION, /%func(?=\\s*\\()/i ],\n        [ CATEGORY_BOOLEAN, REGEXP_BOOLEAN ],\n        [ CATEGORY_DECORATOR, /@[^\\s(@]+/ ],\n        [ CATEGORY_IDENTIFIER, /\\b[a-z_$][\\w$]*\\b/ ],\n        [ CATEGORY_NUMBER, REGEXP_NUMBER ],\n        [ CATEGORY_OPERATOR, /=>/ ],\n        [ CATEGORY_OPERATOR, /\\+[+=]?|-[-=]?|\\*\\*?=?|[/%^]=?|&&?=?|\\|\\|?=?|\\?\\??=?|<<?=?|>>>=?|>>?=?|[!=]=?=?|[~:^]/ ],\n        [ CATEGORY_BRACKET, REGEXP_BRACKET ],\n        [ CATEGORY_DELIMITER, /[;.,]+/ ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n      ],\n\n      backtick: [\n        [ CATEGORY_STRING, /^`/ ],\n        [ CATEGORY_STRING, /(\\$[^{]|\\\\[$`]|[^`$])+/ ],\n        [ '#expression', /\\${/, '@rest' ],\n        [ CATEGORY_STRING, /`/, '@break' ],\n      ],\n\n      expression: [\n        [ CATEGORY_DELIMITER, /^\\${/ ],\n        [ CATEGORY_DELIMITER, /}/, '@break' ],\n        [ '#main' ],\n      ],\n    },\n  };\n}\n","import {\n  CATEGORY_ATTRIBUTE,\n  CATEGORY_BRACKET,\n  CATEGORY_CDATA,\n  CATEGORY_COMMENT,\n  CATEGORY_DELIMITER,\n  CATEGORY_ENTITY,\n  CATEGORY_PROLOG,\n  CATEGORY_SPACE,\n  CATEGORY_TAG,\n  CATEGORY_TAG_CLOSE,\n  CATEGORY_VALUE,\n} from '../../constants/categories';\nimport { REGEXP_SPACE } from '../../constants/regexp';\nimport { Language, Tokenizer } from '../../types';\nimport { css } from '../css/css';\nimport { javascript } from '../javascript/javascript';\n\n\n/**\n * The HTML language options.\n *\n * @since 0.0.12\n */\nexport interface HtmlOptions {\n  /**\n   * The language for tokenizing script blocks.\n   */\n  script?: () => Language;\n\n  /**\n   * The language for tokenizing style blocks.\n   */\n  style?: () => Language;\n}\n\n/**\n * Returns the HTML language definition.\n *\n * @param options - Optional. Options.\n *\n * @return A Language object.\n */\nexport function html( options: HtmlOptions = {} ): Language {\n  const script = ( options.script || javascript )();\n  const style  = ( options.style || css )();\n  const cdata  = [ CATEGORY_CDATA, /<!\\[CDATA\\[.*]]>/is ] as Tokenizer;\n\n  // Embedded scripts or styles may contain CDATA sections.\n  script.grammar.main.unshift( cdata );\n  style.grammar.main.unshift( cdata );\n\n  return {\n    id   : 'html',\n    alias: [ 'markup' ],\n    name : 'HTML',\n    use  : { script, style },\n\n    grammar: {\n      main: [\n        [ CATEGORY_COMMENT, /<!--.*?-->/s ],\n        [ CATEGORY_PROLOG, /<!DOCTYPE.*?>/is ],\n        cdata,\n        [ '#script', /<script.*?>.*?<\\/script>/s ],\n        [ '#style', /<style.*?>.*?<\\/style>/s ],\n        [ '#tag', /<.*?>/s ],\n        [ CATEGORY_ENTITY, /&[\\da-z]+;|&#\\d+;/i ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n      ],\n\n      script: [\n        [ '#tag', /^<script.*?>/s ],\n        cdata,\n        [ '@script', /.+(?=<\\/script>)/s ],\n        [ '#tag', /<\\/script>/ ],\n      ],\n\n      style: [\n        [ '#tag', /^<style.*?>/s ],\n        [ '@style', /.+(?=<\\/style>)/s ],\n        [ '#tag', /<\\/style>/ ],\n      ],\n\n      tag: [\n        [ '#closeTag', /<\\/.+>/ ],\n        [ '#tagContent' ],\n      ],\n\n      closeTag: [\n        [ CATEGORY_TAG_CLOSE, /[^\\s/<>\"'=]+/ ],\n        [ '#tagContent' ],\n      ],\n\n      tagContent: [\n        [ '#attr', /[ \\t\\r\\n]+.+(?=[ \\t\\r\\n/>])/s ],\n        [ CATEGORY_TAG, /[^\\s/<>\"'=]+/ ],\n        [ CATEGORY_BRACKET, /[<>]/ ],\n        [ CATEGORY_DELIMITER, /[/]/ ],\n      ],\n\n      attr: [\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n        [ CATEGORY_VALUE, /(['\"])(\\\\\\1|.)*?\\1/ ],\n        [ CATEGORY_DELIMITER, /[/=]/ ],\n        [ CATEGORY_ATTRIBUTE, /[^\\s/>\"'=]+/ ],\n      ],\n    },\n  };\n}\n","import { Language } from '../../types';\nimport { CATEGORY_PROLOG } from '../../constants/categories';\nimport { assign } from '../../utils';\nimport { html } from '../html/html';\n\n\n/**\n * Returns the XML language definition.\n *\n * @return A Language object.\n */\nexport function xml(): Language {\n  const language = assign( html(), {\n    id   : 'xml',\n    name : 'XML',\n    alias: [],\n  } );\n\n  language.grammar.main.unshift( [ CATEGORY_PROLOG, /<\\?.*?\\?>/s ] );\n\n  return language;\n}\n","import { Language, Options, Token } from '../../types';\nimport { Lexer } from '../Lexer/Lexer';\nimport { Renderer } from '../Renderer/Renderer';\nimport { ROOT } from '../../constants/classes';\nimport { ATTRIBUTE_LANGUAGE } from '../../constants/attributes';\nimport { attr, isHTMLElement, text, assert, isString, assign, addClass, toArray } from '../../utils';\nimport { none } from '../../languages';\n\n\n/**\n * Stores all Lexer instances.\n */\nconst lexers: Record<string, Lexer> = {};\n\n/**\n * The class that tokenizes code for syntax highlighting.\n *\n * @since 0.0.1\n */\nexport class RyuseiLight {\n  /**\n   * Registers languages.\n   *\n   * @param languages - A Language object or objects.\n   */\n  static register( languages: Language | Language[] ): void {\n    toArray( languages ).forEach( language => {\n      const { id } = language;\n\n      if ( id && ! lexers[ id ] ) {\n        ( language.alias || [] ).concat( id ).forEach( id => {\n          lexers[ id ] = new Lexer( language );\n        } );\n      }\n    } );\n  }\n\n  /**\n   * Adds components.\n   *\n   * @param components - An object literal with Component functions.\n   */\n  static compose = Renderer.compose;\n\n  /**\n   * Tokenizes the provided string.\n   *\n   * @param code     - A string to tokenize.\n   * @param language - A language ID.\n   * @param limit    - Optional. Limits the (ideal) number of lines.\n   *\n   * @return An array of arrays with tokens as [ string, string ].\n   */\n  static tokenize( code: string, language: string, limit?: number ): Token[][] {\n    return RyuseiLight.getLexer( language ).tokenize( code, limit );\n  }\n\n  /**\n   * Checks if the given language has been already registered or not.\n   *\n   * @param language - A language to check.\n   */\n  static has( language: string ): boolean {\n    return !! lexers[ language ];\n  }\n\n  /**\n   * Returns a registered Lexer instance.\n   * If it's not found, the `none` lexer will be returned.\n   *\n   * @param language - A language name.\n   */\n  protected static getLexer( language: string ) {\n    if ( ! lexers.none ) {\n      RyuseiLight.register( none() );\n    }\n\n    return lexers[ language ] || lexers.none;\n  }\n\n  /**\n   * Holds all renderers.\n   */\n  protected readonly renderers: Renderer[] = [];\n\n  /**\n   * Holds options.\n   */\n  protected readonly options: Options;\n\n  /**\n   * The RyuseiLight constructor.\n   *\n   * @param options  - Optional. Options.\n   */\n  constructor( options?: Options ) {\n    this.options = assign( {}, options );\n  }\n\n  /**\n   * Returns a new Renderer instance.\n   *\n   * @param code    - A code to highlight.\n   * @param elm     - Optional. An element to highlight.\n   * @param options - Optional. Options.\n   */\n  protected getRenderer( code: string, elm?: HTMLElement, options?: Options ) {\n    options = assign( {}, this.options, options );\n\n    const language     = options.language;\n    const { name, id } = RyuseiLight.getLexer( language ).language;\n    return new Renderer( RyuseiLight.tokenize( code, language ), { name, id }, elm, options );\n  }\n\n  /**\n   * Applies the highlighter to elements that matches the selector or the provided element.\n   *\n   * @param target  - A selector or an element.\n   * @param options - Optional. Options.\n   */\n  apply( target: string | Element, options?: Options ): void {\n    const elms = isString( target ) ? document.querySelectorAll( target ) : [ target ];\n\n    for ( let i = 0; i < elms.length; i++ ) {\n      const elm = elms[ i ];\n\n      if ( isHTMLElement( elm ) ) {\n        const elmOptions = assign( {}, options, { language: attr( elm, ATTRIBUTE_LANGUAGE ) || undefined } );\n        const renderer   = this.getRenderer( text( elm ), elm, elmOptions );\n        const isPre      = elm instanceof HTMLPreElement;\n\n        if ( isPre ) {\n          addClass( elm, [ ROOT, `${ ROOT }--${ renderer.info.id }` ] );\n        }\n\n        elm.innerHTML = renderer.html( ! isPre );\n\n        renderer.event.emit( 'applied', elm );\n        this.renderers.push( renderer );\n      }\n    }\n  }\n\n  /**\n   * Returns highlighted HTML by tokenizing the provided code.\n   *\n   * @param code    - Code to highlight.\n   * @param options - Optional. Options.\n   *\n   * @return Highlighted HTML string.\n   */\n  html( code: string, options?: Options ): string {\n    assert( isString( code ), 'Invalid code.' );\n    return this.getRenderer( code, null, options ).html( true );\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy(): void {\n    this.renderers.forEach( renderer => {\n      renderer.destroy();\n    } );\n  }\n}\n","import { Language } from '../../types';\n\n\n/**\n * Returns the None language definition.\n *\n * @return A Language object.\n */\nexport function none(): Language {\n  return {\n    id     : 'none',\n    name   : '',\n    grammar: { main: [] },\n  };\n}\n","import { RyuseiLight } from '../core/RyuseiLight/RyuseiLight';\nimport { none, css, javascript, html, xml } from '../languages';\n\nRyuseiLight.register( [ none(), javascript(), html(), css(), xml() ] );\n\nexport { RyuseiLight as default } from '../core/RyuseiLight/RyuseiLight';\n"],"names":["CATEGORY_KEYWORD","CATEGORY_COMMENT","CATEGORY_SELECTOR","CATEGORY_PROPERTY","CATEGORY_PROLOG","CATEGORY_STRING","CATEGORY_NUMBER","CATEGORY_FUNCTION","CATEGORY_OPERATOR","CATEGORY_BRACKET","CATEGORY_DELIMITER","CATEGORY_SPACE","CATEGORY_TEXT","isObject","subject","isString","isUndefined","toArray","value","Array","isArray","addClass","elm","classes","forEach","name","classList","add","forOwn","object","iteratee","keys","Object","i","length","assign","sources","source","key","attr","attrs","getAttribute","setAttribute","String","tag","join","text","node","textContent","assert","condition","message","Error","startsWith","string","char","charAt","isStickySupported","sticky","Lexer","language","init","grammar","tokenizers","_this","merge","use","this","bind","merged","tokenizer","category","regexp","push","slice","flags","toString","match","replace","replacement","RegExp","parse","index","position","depth","main","aborted","action","lastIndex","exec","handle","token","from","indexOf","line","lines","sliced","undefined","limit","console","log","lang","input","tokenize","ROOT","BODY","PROJECT_CODE_SHORT","TOKEN","EventBus","on","event","callback","priority","handlers","sort","handler1","handler2","emit","args","handler","destroy","Components","Renderer","info","root","options","compose","components","Component","tokens","trim","pop","_this2","renderLines","append","tagName","span","j","categories","split","className","modifiers","map","sub","concat","html","pre","closeTag","fragment","id","containerClasses","bodyClasses","wrap","REGEXP_NUMBER","REGEXP_BOOLEAN","REGEXP_BRACKET","REGEXP_SPACE","REGEXP_QUOTE","REGEXP_DOUBLE_QUOTE","REGEXP_MULTILINE_COMMENT","REGEXP_SLASH_COMMENT","REGEXP_GENERAL_KEYWORDS","css","findBlock","findSingleAtrule","findAtrule","findSelector","common","block","inner","atrule","paren","selector","url","props","javascript","alias","func","backtick","expression","script","style","cdata","unshift","tagContent","lexers","RyuseiLight","register","languages","code","getLexer","has","none","getRenderer","apply","target","elms","document","querySelectorAll","HTMLElement","elmOptions","renderer","isPre","HTMLPreElement","innerHTML","renderers"],"mappings":"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"}