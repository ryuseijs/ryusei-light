{"version":3,"file":"ryuseilight.min.js","sources":["../../src/js/constants/categories.ts","../../src/js/utils/type/type.ts","../../src/js/utils/array/toArray/toArray.ts","../../src/js/utils/dom/addClass/addClass.ts","../../src/js/utils/object/forOwn/forOwn.ts","../../src/js/utils/object/assign/assign.ts","../../src/js/utils/dom/attr/attr.ts","../../src/js/utils/dom/text/text.ts","../../src/js/utils/error/assert/assert.ts","../../src/js/utils/string/startsWith/startsWith.ts","../../src/js/core/Lexer/Lexer.ts","../../src/js/constants/characters.ts","../../src/js/event/EventBus.ts","../../src/js/constants/classes.ts","../../src/js/constants/project.ts","../../src/js/core/Renderer/Renderer.ts","../../src/js/utils/string/escapeHtml/escapeHtml.ts","../../src/js/constants/regexp.ts","../../src/js/languages/css/css.ts","../../src/js/languages/javascript/javascript.ts","../../src/js/languages/html/html.ts","../../src/js/languages/xml/xml.ts","../../src/js/core/RyuseiLight/RyuseiLight.ts","../../src/js/languages/none/none.ts","../../src/js/build/default.ts"],"sourcesContent":["export const CATEGORY_KEYWORD    = 'keyword';\nexport const CATEGORY_CONSTANT   = 'constant';\nexport const CATEGORY_COMMENT    = 'comment';\nexport const CATEGORY_TAG        = 'tag';\nexport const CATEGORY_SELECTOR   = 'selector';\nexport const CATEGORY_ATRULE     = 'atrule';\nexport const CATEGORY_ATTRIBUTE  = 'attr';\nexport const CATEGORY_PROPERTY   = 'prop';\nexport const CATEGORY_VALUE      = 'value';\nexport const CATEGORY_VARIABLE   = 'variable';\nexport const CATEGORY_ENTITY     = 'entity';\nexport const CATEGORY_CDATA      = 'cdata';\nexport const CATEGORY_PROLOG     = 'prolog';\nexport const CATEGORY_IDENTIFIER = 'identifier';\nexport const CATEGORY_STRING     = 'string';\nexport const CATEGORY_NUMBER     = 'number';\nexport const CATEGORY_BOOLEAN    = 'boolean';\nexport const CATEGORY_FUNCTION   = 'function';\nexport const CATEGORY_CLASS      = 'class';\nexport const CATEGORY_DECORATOR  = 'decorator';\nexport const CATEGORY_REGEXP     = 'regexp';\nexport const CATEGORY_OPERATOR   = 'operator';\nexport const CATEGORY_BRACKET    = 'bracket';\nexport const CATEGORY_DELIMITER  = 'delimiter';\nexport const CATEGORY_SYMBOL     = 'symbol';\nexport const CATEGORY_SPACE      = 'space';\nexport const CATEGORY_TEXT       = 'text';\n","/**\n * Checks if the given subject is an object or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an object, or otherwise `false`.\n */\nexport function isObject<T extends object>( subject: any ): subject is T {\n  return subject !== null && typeof subject === 'object';\n}\n\n/**\n * Checks if the given subject is an array or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an array, or otherwise `false`.\n */\nexport function isArray<T>( subject: any ): subject is T[] {\n  return Array.isArray( subject );\n}\n\n/**\n * Checks if the given subject is a function or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is a function, or otherwise `false`.\n */\nexport function isFunction( subject: any ): subject is ( ...args: any[] ) => any {\n  return typeof subject === 'function';\n}\n\n/**\n * Checks if the given subject is a string or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is a string, or otherwise `false`.\n */\nexport function isString( subject: any ): subject is string {\n  return typeof subject === 'string';\n}\n\n/**\n * Checks if the given subject is `undefined` or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is `undefined`, or otherwise `false`.\n */\nexport function isUndefined( subject: any ): subject is undefined {\n  return typeof subject === 'undefined';\n}\n\n/**\n * Checks if the given subject is an HTMLElement instance or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an HTMLElement instance, or otherwise `false`.\n */\nexport function isHTMLElement( subject: any ): subject is HTMLElement {\n  return subject instanceof HTMLElement;\n}\n","import { isArray } from '../../type/type';\n\n\n/**\n * Push the provided value to an array only if the value is not an array.\n *\n * @param value - A value to push.\n *\n * @return An array containing the value, or the value itself if it is already an array.\n */\nexport function toArray<T>( value: T | T[] ): T[] {\n  return isArray<T>( value ) ? value : [ value ];\n}\n","import { toArray } from '../../array';\n\n\n/**\n * Adds classes to the element.\n *\n * @param elm     - An element to add classes to.\n * @param classes - Classes to add.\n */\nexport function addClass( elm: HTMLElement, classes: string | string[] ): void {\n  toArray( classes ).forEach( name => {\n    if ( name ) {\n      elm.classList.add( name );\n    }\n  } );\n}\n","/**\n * Iterates over the provided object by own enumerable keys with calling the iteratee function.\n *\n * @param object   - An object to iterate over.\n * @param iteratee - An iteratee function that takes the value and key as arguments.\n *\n * @return A provided object itself.\n */\nexport function forOwn<T extends object>( object: T, iteratee: ( value: T[ keyof T ], key: string ) => void ) {\n  if ( object ) {\n    const keys = Object.keys( object );\n\n    for ( let i = 0; i < keys.length; i++ ) {\n      iteratee( object[ keys[ i ] ], keys[ i ] );\n    }\n  }\n}\n","import { isObject, isUndefined } from '../../type/type';\nimport { forOwn } from '../forOwn/forOwn';\n\n\n/**\n * Assign U to T.\n *\n * @typeParam T - An object to assign to.\n * @typeParam U - An object to assign.\n *\n * @return An assigned object type.\n */\nexport type Assign<T, U> = Omit<T, keyof U> & U;\n\nexport function assign<T extends object>( object: T ): T;\n\n// There is a way to type arguments recursively, but these fixed definitions are enough for this project.\nexport function assign<T extends object, U extends object>( object: T, source: U ): Assign<T, U>;\n\nexport function assign<T extends object, U1 extends object, U2 extends object>(\n  object: T, source1: U1, source2: U2\n): Assign<Assign<T, U1>, U2>;\n\nexport function assign<T extends object, U1 extends object, U2 extends object, U3 extends object>(\n  object: T, source1: U1, source2: U2, source3: U3\n): Assign<Assign<Assign<T, U1>, U2>, U3>;\n\n/**\n * Assigns all own enumerable properties of all source objects to the provided object.\n * `undefined` in source objects will be skipped.\n *\n * @param object  - An object to assign properties to.\n * @param sources - Objects to assign properties from.\n *\n * @return An object assigned properties of the sources to.\n */\nexport function assign<T extends object, U extends object>( object: T, ...sources: U[] ): any {\n  sources.forEach( source => {\n    if ( isObject( source ) ) {\n      forOwn( source, ( value, key ) => {\n        if ( ! isUndefined( source[ key ] ) ) {\n          object[ key ] = source[ key ];\n        }\n      } );\n    }\n  } );\n\n  return object;\n}\n","import { forOwn } from '../../object';\nimport { isObject, isString } from '../../type/type';\n\n\nexport function attr( elm: Element, attrs: string ): string;\nexport function attr( elm: Element, attrs: Record<string, string | number | boolean> ): void;\n\n/**\n * Sets new attributes to the passed element if the `attrs` is an object literal,\n * or gets an attribute value from it if the `attrs` is a string.\n *\n * @param elm   - An element to set or get an attribute.\n * @param attrs - An attribute name as a string or new attributes as an object literal.\n */\nexport function attr( elm: Element, attrs: string | Record<string, string | number | boolean> ): string | void {\n  if ( isString( attrs ) ) {\n    return elm.getAttribute( attrs ) || '';\n  }\n\n  if ( isObject( attrs ) ) {\n    forOwn( attrs, ( value, key ) => {\n      elm.setAttribute( key, String( value ) );\n    } );\n  }\n}\n","import { isUndefined } from '../../type/type';\n\n\nexport function text( node: Node ): string;\nexport function text( node: Node, text: string ): void;\n\n/**\n * Sets or gets a text content of the provided node.\n *\n * @param node - A node to get or set a text.\n * @param text - Optional. A text to set.\n */\nexport function text( node: Node, text?: string ): string | void {\n  if ( isUndefined( text ) ) {\n    return node.textContent;\n  }\n\n  node.textContent = text;\n}\n","/**\n * Throws an error if the provided condition is falsy.\n *\n * @param condition - If falsy, an error is thrown.\n * @param message   - Optional. A message for the error.\n */\nexport function assert( condition: any, message = '' ): void {\n  if ( ! condition ) {\n    throw new Error( message );\n  }\n}\n","/**\n * Checks if the string starts with the `char` or not.\n *\n * @param string - A string to check.\n * @param char   - A character.\n *\n * @return `true` if the string starts with the `char`, or otherwise `false`.\n */\nexport function startsWith( string: string, char: string ): boolean {\n  return string.charAt( 0 ) === char;\n}\n","import { Language, Token, Tokenizer } from '../../types';\nimport { LINE_BREAK } from '../../constants/characters';\nimport { CATEGORY_TEXT } from '../../constants/categories';\nimport { assert, forOwn, isUndefined, startsWith } from '../../utils';\n\n\n/**\n * Checks if the RegExp supports the sticky flag or not.\n */\nconst isStickySupported = ! isUndefined( /x/.sticky );\n\n/**\n * The class for creating a simple lexer by a Language object.\n *\n * @since 0.0.1\n */\nexport class Lexer {\n  /**\n   * Holds the Language object.\n   */\n  readonly language: Language;\n\n  /**\n   * Stores lines.\n   */\n  protected lines: Token[][];\n\n  /**\n   * Indicates the current line index.\n   */\n  protected index: number;\n\n  /**\n   * The Lexer constructor.\n   *\n   * @param language - A Language object.\n   */\n  constructor( language: Language ) {\n    this.language = language;\n    this.init( language );\n  }\n\n  /**\n   * Initializes the language object.\n   *\n   * @param language - A Language object to initialize.\n   */\n  protected init( language: Language ): void {\n    forOwn( language.grammar, ( tokenizers, key ) => {\n      language.grammar[ key ] = this.merge( language, tokenizers );\n    } );\n\n    forOwn( language.use, this.init.bind( this ) );\n  }\n\n  /**\n   * Includes tokenizers required by `#` annotation and flatten them.\n   *\n   * @param language   - A language object.\n   * @param tokenizers - Tokenizers.\n   *\n   * @return Merged tokenizers.\n   */\n  protected merge( language: Language, tokenizers: Tokenizer[] ): Tokenizer[] {\n    return tokenizers.reduce( ( merged, tokenizer ) => {\n      const [ category, regexp ] = tokenizer;\n\n      if ( startsWith( category, '#' ) && ! regexp ) {\n        const include = language.grammar[ category.slice( 1 ) ];\n        assert( include );\n        merged.push( ...this.merge( language, include ) );\n      } else {\n        const flags = regexp.toString().match( /[gimsy]*$/ )[ 0 ].replace( /[gy]/g, '' );\n        let source = regexp.source + ( isStickySupported ? '' : '|()' );\n\n        forOwn( language.source, ( replacement, key ) => {\n          source = source.replace( new RegExp( `%${ key }`, 'g' ), replacement.source );\n        } );\n\n        tokenizer[ 1 ] = new RegExp( source, ( isStickySupported ? 'y' : 'g' ) + flags );\n        merged.push( tokenizer );\n      }\n\n      return merged;\n    }, [] );\n  }\n\n  /**\n   * Tokenizes the text by the provided language and tokenizers.\n   *\n   * @param text       - A text to tokenize.\n   * @param language   - A Grammar object.\n   * @param tokenizers - An array with tokenizers.\n   *\n   * @return An index of the text where the handling ends.\n   */\n  protected tokenizeBy( text: string, language: Language, tokenizers: Tokenizer[] ): number {\n    let index    = 0;\n    let position = 0;\n\n    main:\n    while ( index < text.length ) {\n      for ( let i = 0; i < tokenizers.length; i++ ) {\n        const tokenizer = tokenizers[ i ];\n        const regexp    = tokenizer[ 1 ];\n        const command   = tokenizer[ 2 ];\n\n        regexp.lastIndex = index;\n\n        const match = regexp.exec( text );\n\n        if ( ! match || ! match[ 0 ] ) {\n          continue;\n        }\n\n        if ( position < index ) {\n          this.push( [ CATEGORY_TEXT, text.slice( position, index ) ] );\n        }\n\n        if ( command === '@back' ) {\n          position = index;\n          break main;\n        }\n\n        const offset = this.handle( match, language, tokenizers[ i ] );\n\n        index += offset || 1;\n        position = index;\n\n        if ( command === '@break' ) {\n          break main;\n        }\n\n        continue main;\n      }\n\n      index++;\n    }\n\n    if ( position < index ) {\n      this.push( [ CATEGORY_TEXT, text.slice( position ) ] );\n    }\n\n    return index;\n  }\n\n  /**\n   * Pushes the provided token to the lines array.\n   *\n   * @param token - A token to push.\n   */\n  protected push( token: Token ): void {\n    const [ category ] = token;\n\n    let index;\n    let from = 0;\n    let text = token[ 1 ];\n\n    while ( ( index = text.indexOf( LINE_BREAK, from ) ) > -1 ) {\n      if ( from < index ) {\n        this.lines[ this.index ].push( [ category, text.slice( from, index ) ] );\n      }\n\n      from = index + 1;\n      this.lines[ ++this.index ] = [];\n    }\n\n    text = text.slice( from );\n\n    if ( text ) {\n      this.lines[ this.index ].push( [ category, text ] );\n    }\n  }\n\n  /**\n   * Handles the matched text.\n   *\n   * @param match     - A matched result.\n   * @param language  - A Language object.\n   * @param tokenizer - A tokenizer that has been matched with the text.\n   *\n   * @return An index of the text where the handling ends.\n   */\n  protected handle( match: RegExpExecArray, language: Language, tokenizer: Tokenizer ): number {\n    const [ category ] = tokenizer;\n    let offset = 0;\n\n    if ( category ) {\n      const [ text ] = match;\n\n      if ( tokenizer[ 3 ] === '@debug' ) {\n        // eslint-disable-next-line\n        console.log( text, tokenizer );\n      }\n\n      if ( startsWith( category, '@' ) ) {\n        assert( language.use );\n\n        const lang = language.use[ category.slice( 1 ) ];\n        assert( lang );\n\n        return this.tokenizeBy( text, lang, lang.grammar.main );\n      }\n\n      if ( startsWith( category, '#' ) ) {\n        const tokenizers = language.grammar[ category.slice( 1 ) ];\n        assert( tokenizers );\n\n        const value = tokenizer[ 2 ] === '@rest' ? match.input.slice( match.index ) : text;\n        return this.tokenizeBy( value, language, tokenizers );\n      }\n\n      offset = text.length;\n      this.push( [ category, text ] );\n    }\n\n    return offset;\n  }\n\n  /**\n   * Tokenizes the text by the current language.\n   *\n   * @param text  - A text to tokenize.\n   *\n   * @return An array with tokens.\n   */\n  tokenize( text: string ): Token[][] {\n    this.lines = [ [] ];\n    this.index = 0;\n\n    this.tokenizeBy( text, this.language, this.language.grammar.main );\n\n    return this.lines;\n  }\n}\n","/**\n * The line break character.\n *\n * @private\n * @since 0.0.1\n */\nexport const LINE_BREAK = '\\n';\n","import { AnyFunction } from '../types';\n\n\n/**\n * The class for providing the very simple event bus.\n *\n * @private\n * @since 0.0.1\n */\nexport class EventBus {\n  /**\n   * Holds handlers.\n   */\n  protected handlers = {};\n\n  /**\n   * Attaches a handler.\n   *\n   * @param event    - An event name.\n   * @param callback - A callback function to register.\n   */\n  on( event: string, callback: AnyFunction ): void {\n    const handlers = ( this.handlers[ event ] = this.handlers[ event ] || [] );\n    handlers.push( { callback } );\n  }\n\n  /**\n   * Emits an event.\n   *\n   * @param event - An event name.\n   * @param args  - Optional. Any number of arguments to pass to callbacks.\n   */\n  emit( event, ...args ): void {\n    ( this.handlers[ event ] || [] ).forEach( handler => {\n      handler.callback( ...args );\n    } );\n  }\n\n  /**\n   * Destroys the event bus.\n   */\n  destroy(): void {\n    this.handlers = {};\n  }\n}\n","import { PROJECT_CODE, PROJECT_CODE_SHORT } from './project';\n\n\n/**\n * The collection of class names.\n *\n * @since 0.0.1\n */\nexport const CLASSES = {\n  root     : PROJECT_CODE,\n  container: `${ PROJECT_CODE_SHORT }__container`,\n  body     : `${ PROJECT_CODE_SHORT }__body`,\n  code     : `${ PROJECT_CODE_SHORT }__code`,\n  line     : `${ PROJECT_CODE_SHORT }__line`,\n  token    : `${ PROJECT_CODE_SHORT }__token`,\n  active   : 'is-active',\n};\n","/**\n * The project code name.\n *\n * @since 0.0.1\n */\nexport const PROJECT_CODE = 'ryuseilight';\n\n/**\n * The abbreviated project code.\n *\n * @since 0.0.1\n */\nexport const PROJECT_CODE_SHORT = 'rl';\n","import { LINE_BREAK } from '../../constants/characters';\nimport { Options, LanguageInfo, Token, Component } from '../../types';\nimport { EventBus } from '../../event/EventBus';\nimport { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { CLASSES } from '../../constants/classes';\nimport { forOwn, escapeHtml } from '../../utils';\n\n\n/**\n * Stores all Component functions.\n */\nconst Components: Record<string, Component> = {};\n\n/**\n * The class for highlighting code via provided tokens.\n *\n * @since 0.0.1\n */\nexport class Renderer {\n  /**\n   * Adds components.\n   *\n   * @param components - An object literal with Component functions.\n   */\n  static compose( components: Record<string, Component> ): void {\n    forOwn( components, ( Component, name ) => {\n      Components[ name ] = Component;\n    } );\n  }\n\n  /**\n   * Holds lines with tokens.\n   */\n  readonly lines = [];\n\n  /**\n   * Holds the language info.\n   */\n  readonly info: LanguageInfo;\n\n  /**\n   * Holds the root element if provided.\n   */\n  readonly root: HTMLElement | undefined;\n\n  /**\n   * Holds options.\n   */\n  readonly options: Options;\n\n  /**\n   * Holds the EventBus instance.\n   */\n  readonly event: EventBus = new EventBus();\n\n  /**\n   * The Renderer constructor.\n   *\n   * @param lines   - Lines with tokens to render.\n   * @param info    - The language info object.\n   * @param root    - Optional. A root element to highlight.\n   * @param options - Options.\n   */\n  constructor( lines: Token[][], info: LanguageInfo, root?: HTMLElement, options: Options = {} ) {\n    this.lines   = lines;\n    this.info    = info;\n    this.root    = root;\n    this.options = options;\n\n    this.init();\n  }\n\n  /**\n   * Initializes the instance.\n   */\n  protected init(): void {\n    const { lines } = this;\n\n    if ( lines.length ) {\n      const tokens = lines[ lines.length - 1 ];\n\n      if ( ! tokens.length || ( tokens.length === 1 && ! tokens[ 0 ][ 1 ].trim() ) ) {\n        // Removes the last empty line.\n        lines.pop();\n      }\n    }\n\n    forOwn( Components, Component => {\n      Component( this );\n    } );\n\n    this.event.emit( 'mounted' );\n  }\n\n  /**\n   * Renders lines as HTML.\n   *\n   * @param append - A function to add fragments to the HTML string.\n   *\n   * @return A rendered HTML string.\n   */\n  protected renderLines( append: ( fragment: string ) => void ): void {\n    const event = this.event;\n    const tag   = this.options.span ? 'span' : 'code';\n\n    for ( let i = 0; i < this.lines.length; i++ ) {\n      const tokens  = this.lines[ i ];\n      const classes = [ CLASSES.line ];\n\n      event.emit( 'line:open', append, classes, i );\n      append( `<div class=\"${ classes.join( ' ' ) }\">` );\n\n      if ( tokens.length ) {\n        for ( let j = 0; j < tokens.length; j++ ) {\n          const token   = tokens[ j ];\n          const classes = [ `${ CLASSES.token } ${ PROJECT_CODE_SHORT }__${ token[ 0 ] }` ];\n\n          event.emit( 'token', token, classes );\n\n          append( `<${ tag } class=\"${ classes.join( ' ' ) }\">${ escapeHtml( token[ 1 ] ) }</${ tag }>` );\n        }\n      } else {\n        append( LINE_BREAK );\n      }\n\n      append( '</div>' );\n      event.emit( 'line:closed', append, i );\n    }\n  }\n\n  /**\n   * Returns all lines and wrapper elements.\n   *\n   * @param pre - Whether to wrap elements by `pre` or not.\n   *\n   * @return An HTML string.\n   */\n  html( pre: boolean ): string {\n    const event = this.event;\n    let html  = '';\n\n    const append = ( fragment: string ) => { html += fragment };\n\n    if ( pre ) {\n      html += `<pre class=\"${ CLASSES.root } ${ CLASSES.root }--${ this.info.id }\">`;\n    }\n\n    const containerClasses = [ CLASSES.container ];\n    event.emit( 'open', append, containerClasses );\n\n    html += `<div class=\"${ containerClasses.join( ' ' ) }\">`;\n    event.emit( 'opened', append );\n\n    const bodyClasses = [ `${ CLASSES.body }${ this.options.wrap ? ` ${ CLASSES.body }--wrap` : '' }` ];\n    event.emit( 'body:open', append, bodyClasses );\n\n    html += `<div class=\"${ bodyClasses.join( ' ' ) }\">`;\n    event.emit( 'body:opened', append );\n\n    html += `<div class=\"${ CLASSES.code }\">`;\n    this.renderLines( append );\n    html += `</div>`; // code\n\n    event.emit( 'body:close', append );\n    html += `</div>`; // body\n\n    event.emit( 'close', append );\n    html += `</div>`; // container\n\n    event.emit( 'closed', append );\n\n    if ( pre ) {\n      html += `</pre>`;\n    }\n\n    return html;\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy(): void {\n    this.event.emit( 'destroy' );\n    this.event.destroy();\n  }\n}\n","/**\n * Converts essential HTML special characters to HTML entities.\n *\n * @param string - A string to escape.\n *\n * @return An escaped string.\n */\nexport function escapeHtml( string: string ): string {\n  return string.replace( /&/g, '&amp;' ).replace( /</g, '&lt;' );\n}\n","export const REGEXP_FLOAT = /\\d+\\.?\\d*|\\d*\\.?\\d+/;\n\nexport const REGEXP_NUMBER = /[+-]?(\\d+\\.?\\d*|\\d*\\.?\\d+)([eE][+-]?\\d+)?/;\n\nexport const REGEXP_BOOLEAN = /\\b(?:true|false)\\b/;\n\nexport const REGEXP_BRACKET = /[[\\]{}()]/;\n\nexport const REGEXP_SPACE = /[ \\t]+/;\n\nexport const REGEXP_QUOTE = /'(?:\\\\'|.)*?'/;\n\nexport const REGEXP_DOUBLE_QUOTE = /\"(?:\\\\\"|.)*?\"/;\n\nexport const REGEXP_MULTILINE_COMMENT = /\\/\\*[\\s\\S]*?\\*\\//;\n\nexport const REGEXP_SLASH_COMMENT = /\\/\\/.*/;\n\nexport const REGEXP_GENERAL_KEYWORDS = /\\b(?:break|catch|class|continue|do|else|extends|finally|for|function|if|implements|in|instanceof|interface|new|null|return|throw|try|while)\\b/;\n","import { Language } from '../../types';\nimport {\n  CATEGORY_BRACKET,\n  CATEGORY_COMMENT,\n  CATEGORY_FUNCTION,\n  CATEGORY_KEYWORD,\n  CATEGORY_NUMBER,\n  CATEGORY_OPERATOR,\n  CATEGORY_PROPERTY,\n  CATEGORY_SELECTOR,\n  CATEGORY_SPACE,\n  CATEGORY_STRING,\n  CATEGORY_DELIMITER,\n  CATEGORY_TAG,\n  CATEGORY_ATRULE,\n} from '../../constants/categories';\nimport { REGEXP_MULTILINE_COMMENT, REGEXP_SPACE } from '../../constants/regexp';\n\n\n/**\n * Returns the CSS language definition.\n *\n * @return A Language object.\n */\nexport function css(): Language {\n  return {\n    id  : 'css',\n    name: 'CSS',\n\n    grammar: {\n      main: [\n        [ '#common' ],\n\n        // An atrule without a block\n        [ '#findSingleAtrule' ],\n\n        // Blocks including atrules\n        [ '#findBlock' ],\n      ],\n\n      findBlock: [\n        [ '#block', /[^\\s;{}][^;{}]*{.*?}/s, '@rest' ],\n      ],\n\n      findSingleAtrule: [\n        [ '#atrule', /@[^{;]+?;/s ],\n      ],\n\n      // Finds atrules before { and ;\n      findAtrule: [\n        [ '#atrule', /@[^{;]*?(?=[{;])/s ],\n      ],\n\n      // May not start with digits\n      findSelector: [\n        [ '#selector', /[^\\s{};].*?(?={)/s ],\n      ],\n\n      common: [\n        [ CATEGORY_STRING, /(['\"]).*?[^\\\\]\\1/s ],\n        [ CATEGORY_COMMENT, REGEXP_MULTILINE_COMMENT ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n      ],\n\n      block: [\n        [ '#inner', /{/, '@rest' ],\n        [ CATEGORY_BRACKET, /}/, '@break' ],\n        [ '#findAtrule' ],\n        [ '#findSelector' ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n      ],\n\n      inner: [\n        [ CATEGORY_BRACKET, /{/ ],\n        [ '#common' ],\n        [ '#findBlock' ],\n        [ '#props' ],\n        [ '#findAtrule' ],\n        [ '', /}/, '@back' ],\n      ],\n\n      atrule: [\n        [ '#common' ],\n        [ '#url', /\\burl\\(/, '@rest' ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n        [ CATEGORY_ATRULE, /[^\\s();]+/ ],\n        [ CATEGORY_DELIMITER, /[:;,]/ ],\n        [ '#paren', /\\(/, '@rest' ],\n      ],\n\n      paren: [\n        [ CATEGORY_BRACKET, /^\\(/ ],\n        [ '#common' ],\n        [ '#paren', /\\(/, '@rest' ],\n        [ CATEGORY_BRACKET, /\\)/, '@break' ],\n        [ '#props' ],\n      ],\n\n      selector: [\n        [ '#common' ],\n        [ CATEGORY_OPERATOR, /[>+~]/ ],\n        [ CATEGORY_BRACKET, /[[\\]()]/ ],\n        [ CATEGORY_DELIMITER, /=/ ],\n        [ CATEGORY_SELECTOR, /::?\\S+/ ],\n        [ CATEGORY_SELECTOR, /[\\W\\d]\\S+/ ],\n        [ CATEGORY_TAG, /\\b[a-z]+|\\*/i ],\n        [ CATEGORY_SELECTOR, /\\S+/ ],\n      ],\n\n      url: [\n        [ '#common' ],\n        [ CATEGORY_FUNCTION, /^url/ ],\n        [ CATEGORY_BRACKET, /\\(/ ],\n        [ CATEGORY_STRING, /[^)]+/ ],\n        [ CATEGORY_BRACKET, /\\)/, '@break' ],\n      ],\n\n      props: [\n        [ CATEGORY_PROPERTY, /[a-z0-9-_\\xA0-\\uFFFF]+(?=:)/i ],\n        [ '#url', /\\burl\\(/, '@rest' ],\n        [ CATEGORY_FUNCTION, /\\b[\\w-]+(?=\\()\\b/ ],\n        [ CATEGORY_KEYWORD, /!important|\\b(?:initial|inherit|unset)/ ],\n        [ CATEGORY_PROPERTY, /[a-z0-9-]+(?=:)/ ],\n        [ CATEGORY_NUMBER, /#([0-9a-f]{6}|[0-9a-f]{3})/i ],\n        [ CATEGORY_NUMBER, /\\bU\\+[0-9a-f?-]+/i ],\n        [ CATEGORY_NUMBER, /[+-]?(\\d+\\.?\\d*|\\d*\\.?\\d+)/ ],\n        [ CATEGORY_DELIMITER, /[:;,]/ ],\n        [ '#paren', /\\(/, '@rest' ],\n        [ CATEGORY_BRACKET, /[[\\])]/ ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n      ],\n    },\n  };\n}\n","import {\n  REGEXP_BOOLEAN, REGEXP_BRACKET, REGEXP_DOUBLE_QUOTE, REGEXP_GENERAL_KEYWORDS, REGEXP_MULTILINE_COMMENT,\n  REGEXP_NUMBER, REGEXP_QUOTE, REGEXP_SLASH_COMMENT, REGEXP_SPACE,\n} from '../../constants/regexp';\nimport { Language } from '../../types';\nimport {\n  CATEGORY_DELIMITER, CATEGORY_DECORATOR, CATEGORY_KEYWORD, CATEGORY_REGEXP, CATEGORY_STRING,\n  CATEGORY_OPERATOR, CATEGORY_COMMENT, CATEGORY_CLASS, CATEGORY_FUNCTION, CATEGORY_BOOLEAN,\n  CATEGORY_IDENTIFIER, CATEGORY_NUMBER, CATEGORY_BRACKET, CATEGORY_SPACE,\n} from '../../constants/categories';\n\n\n/**\n * Returns the JavaScript language definition.\n *\n * @return A Language object.\n */\nexport function javascript(): Language {\n  return {\n    id   : 'javascript',\n    name : 'JavaScript',\n    alias: [ 'js' ],\n\n    source: {\n      func: /[_$a-z\\xA0-\\uFFFF][_$a-z0-9\\xA0-\\uFFFF]*/,\n    },\n\n    grammar: {\n      main: [\n        [ CATEGORY_STRING, REGEXP_QUOTE ],\n        [ CATEGORY_STRING, REGEXP_DOUBLE_QUOTE ],\n        [ '#backtick', /`/, '@rest' ],\n        [ CATEGORY_COMMENT, REGEXP_MULTILINE_COMMENT ],\n        [ CATEGORY_COMMENT, REGEXP_SLASH_COMMENT ],\n        [ CATEGORY_REGEXP, /\\/(\\[.*[^\\\\]?]|\\\\\\/|.)+?\\/[gimsuy]*/ ],\n        [ CATEGORY_KEYWORD, REGEXP_GENERAL_KEYWORDS ],\n        [ CATEGORY_KEYWORD, /\\b(?:as|async|await|case|catch|const|debugger|default|delete|enum|export|from|import|let|package|private|protected|public|super|switch|static|this|typeof|undefined|var|void|with|yield)\\b/ ],\n        [ CATEGORY_KEYWORD, /\\b((get|set)(?=\\s+%func))/i ],\n        [ CATEGORY_CLASS, /\\b[A-Z][\\w$]*\\b/ ],\n        [ CATEGORY_FUNCTION, /%func(?=\\s*\\()/i ],\n        [ CATEGORY_BOOLEAN, REGEXP_BOOLEAN ],\n        [ CATEGORY_DECORATOR, /@[^\\s(@]+/ ],\n        [ CATEGORY_IDENTIFIER, /\\b[a-z_$][\\w$]*\\b/ ],\n        [ CATEGORY_NUMBER, REGEXP_NUMBER ],\n        [ CATEGORY_OPERATOR, /=>/ ],\n        [ CATEGORY_OPERATOR, /\\+[+=]?|-[-=]?|\\*\\*?=?|[/%^]=?|&&?=?|\\|\\|?=?|\\?\\??=?|<<?=?|>>>=?|>>?=?|[!=]=?=?|[~:^]/ ],\n        [ CATEGORY_BRACKET, REGEXP_BRACKET ],\n        [ CATEGORY_DELIMITER, /[;.,]+/ ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n      ],\n\n      backtick: [\n        [ CATEGORY_STRING, /^`/ ],\n        [ CATEGORY_STRING, /(\\$[^{]|\\\\[$`]|[^`$])+/ ],\n        [ '#expression', /\\${/, '@rest' ],\n        [ CATEGORY_STRING, /`/, '@break' ],\n      ],\n\n      expression: [\n        [ CATEGORY_DELIMITER, /^\\${/ ],\n        [ CATEGORY_DELIMITER, /}/, '@break' ],\n        [ '#main' ],\n      ],\n    },\n  };\n}\n","import {\r\n  CATEGORY_ATTRIBUTE,\r\n  CATEGORY_BRACKET,\r\n  CATEGORY_CDATA,\r\n  CATEGORY_COMMENT,\r\n  CATEGORY_ENTITY,\r\n  CATEGORY_PROLOG,\r\n  CATEGORY_SPACE,\r\n  CATEGORY_DELIMITER,\r\n  CATEGORY_TAG,\r\n  CATEGORY_VALUE,\r\n} from '../../constants/categories';\r\nimport { REGEXP_SPACE } from '../../constants/regexp';\r\nimport { Language, Tokenizer } from '../../types';\r\nimport { css } from '../css/css';\r\nimport { javascript } from '../javascript/javascript';\r\n\r\n\r\n/**\r\n * The HTML language options.\r\n *\r\n * @since 0.0.12\r\n */\r\nexport interface HtmlOptions {\r\n  /**\r\n   * The language for tokenizing script blocks.\r\n   */\r\n  script?: () => Language;\r\n\r\n  /**\r\n   * The language for tokenizing style blocks.\r\n   */\r\n  style?: () => Language;\r\n}\r\n\r\n/**\r\n * Returns the HTML language definition.\r\n *\r\n * @param options - Optional. Options.\r\n *\r\n * @return A Language object.\r\n */\r\nexport function html( options: HtmlOptions = {} ): Language {\r\n  const script = ( options.script || javascript )();\r\n  const style  = ( options.style || css )();\r\n  const cdata  = [ CATEGORY_CDATA, /<!\\[CDATA\\[.*]]>/is ] as Tokenizer;\r\n\r\n  // Embedded scripts or styles may contain CDATA sections.\r\n  script.grammar.main.unshift( cdata );\r\n  style.grammar.main.unshift( cdata );\r\n\r\n  return {\r\n    id   : 'html',\r\n    alias: [ 'markup' ],\r\n    name : 'HTML',\r\n    use  : { script, style },\r\n\r\n    grammar: {\r\n      main: [\r\n        [ CATEGORY_COMMENT, /<!--.*?-->/s ],\r\n        [ CATEGORY_PROLOG, /<!DOCTYPE.*?>/is ],\r\n        cdata,\r\n        [ '#script', /<script.*?>.*?<\\/script>/s ],\r\n        [ '#style', /<style.*?>.*?<\\/style>/s ],\r\n        [ '#tag', /<.*?>/s ],\r\n        [ CATEGORY_ENTITY, /&[\\da-z]+;|&#\\d+;/i ],\r\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\r\n      ],\r\n\r\n      cdata: [\r\n        [ CATEGORY_CDATA, /<!\\[CDATA\\[.*]]>/is ],\r\n      ],\r\n\r\n      script: [\r\n        [ '#tag', /^<script.*?>/s ],\r\n        [ '#cdata' ],\r\n        [ '@script', /.+(?=<\\/script>)/s ],\r\n        [ '#tag', /<\\/script>/ ],\r\n      ],\r\n\r\n      style: [\r\n        [ '#tag', /^<style.*?>/s ],\r\n        [ '@style', /.+(?=<\\/style>)/s ],\r\n        [ '#tag', /<\\/style>/ ],\r\n      ],\r\n\r\n      tag: [\r\n        [ '#attr', /\\s+.+(?=[\\s/>])/s ],\r\n        [ CATEGORY_TAG, /[^\\s/<>\"'=]+/ ],\r\n        [ CATEGORY_BRACKET, /[<>]/ ],\r\n        [ CATEGORY_DELIMITER, /[/]/ ],\r\n      ],\r\n\r\n      attr: [\r\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\r\n        [ CATEGORY_VALUE, /(['\"])(\\\\\\1|.)*?\\1/ ],\r\n        [ CATEGORY_DELIMITER, /[/=]/ ],\r\n        [ CATEGORY_ATTRIBUTE, /[^\\s/>\"'=]+/ ],\r\n      ],\r\n    },\r\n  };\r\n}\r\n","import { Language } from '../../types';\nimport { CATEGORY_PROLOG } from '../../constants/categories';\nimport { assign } from '../../utils';\nimport { html } from '../html/html';\n\n\n/**\n * Returns the XML language definition.\n *\n * @return A Language object.\n */\nexport function xml(): Language {\n  const language = assign( html(), {\n    id   : 'xml',\n    name : 'XML',\n    alias: [],\n  } );\n\n  language.grammar.main.unshift( [ CATEGORY_PROLOG, /<\\?.*?\\?>/s ] );\n\n  return language;\n}\n","import { Language, Options, Token } from '../../types';\nimport { Lexer } from '../Lexer/Lexer';\nimport { Renderer } from '../Renderer/Renderer';\nimport { CLASSES } from '../../constants/classes';\nimport { ATTRIBUTE_LANGUAGE } from '../../constants/attributes';\nimport { attr, isHTMLElement, text, assert, isString, assign, addClass, toArray } from '../../utils';\nimport { none } from '../../languages';\n\n\n/**\n * Stores all Lexer instances.\n */\nconst lexers: Record<string, Lexer> = {};\n\n/**\n * The class that tokenizes code for syntax highlighting.\n *\n * @since 0.0.1\n */\nexport class RyuseiLight {\n  /**\n   * Registers languages.\n   *\n   * @param languages - A Language object or objects.\n   */\n  static register( languages: Language | Language[] ): void {\n    toArray( languages ).forEach( language => {\n      const { id } = language;\n\n      if ( id && ! lexers[ id ] ) {\n        ( language.alias || [] ).concat( id ).forEach( id => {\n          lexers[ id ] = new Lexer( language );\n        } );\n      }\n    } );\n  }\n\n  /**\n   * Adds components.\n   *\n   * @param components - An object literal with Component functions.\n   */\n  static compose = Renderer.compose;\n\n  /**\n   * Tokenizes the provided string.\n   *\n   * @param code     - A string to tokenize.\n   * @param language - A language ID.\n   *\n   * @return An array of arrays with tokens as [ string, string ].\n   */\n  static tokenize( code: string, language: string ): Token[][] {\n    return RyuseiLight.getLexer( language ).tokenize( code );\n  }\n\n  /**\n   * Checks if the given language has been already registered or not.\n   *\n   * @param language - A language to check.\n   */\n  static has( language: string ): boolean {\n    return !! lexers[ language ];\n  }\n\n  /**\n   * Returns a registered Lexer instance.\n   * If it's not found, the `none` lexer will be returned.\n   *\n   * @param language - A language name.\n   */\n  protected static getLexer( language: string ) {\n    if ( ! lexers.none ) {\n      RyuseiLight.register( none() );\n    }\n\n    return lexers[ language ] || lexers.none;\n  }\n\n  /**\n   * Holds all renderers.\n   */\n  protected readonly renderers: Renderer[] = [];\n\n  /**\n   * Holds options.\n   */\n  protected readonly options: Options;\n\n  /**\n   * The RyuseiLight constructor.\n   *\n   * @param options  - Optional. Options.\n   */\n  constructor( options?: Options ) {\n    this.options = assign( {}, options );\n  }\n\n  /**\n   * Returns a new Renderer instance.\n   *\n   * @param code    - A code to highlight.\n   * @param elm     - Optional. An element to highlight.\n   * @param options - Optional. Options.\n   */\n  protected getRenderer( code: string, elm?: HTMLElement, options?: Options ) {\n    options = assign( {}, this.options, options );\n\n    const language     = options.language;\n    const { name, id } = RyuseiLight.getLexer( language ).language;\n    return new Renderer( RyuseiLight.tokenize( code, language ), { name, id }, elm, options );\n  }\n\n  /**\n   * Applies the highlighter to elements that matches the selector or the provided element.\n   *\n   * @param target  - A selector or an element.\n   * @param options - Optional. Options.\n   */\n  apply( target: string | Element, options?: Options ): void {\n    const elms = isString( target ) ? document.querySelectorAll( target ) : [ target ];\n\n    for ( let i = 0; i < elms.length; i++ ) {\n      const elm = elms[ i ];\n\n      if ( isHTMLElement( elm ) ) {\n        const elmOptions = assign( {}, options, { language: attr( elm, ATTRIBUTE_LANGUAGE ) || undefined } );\n        const renderer   = this.getRenderer( text( elm ), elm, elmOptions );\n        const isPre      = elm instanceof HTMLPreElement;\n\n        if ( isPre ) {\n          addClass( elm, [ CLASSES.root, `${ CLASSES.root }--${ renderer.info.id }` ] );\n        }\n\n        elm.innerHTML = renderer.html( ! isPre );\n\n        renderer.event.emit( 'applied', elm );\n        this.renderers.push( renderer );\n      }\n    }\n  }\n\n  /**\n   * Returns highlighted HTML by tokenizing the provided code.\n   *\n   * @param code    - Code to highlight.\n   * @param options - Optional. Options.\n   *\n   * @return Highlighted HTML string.\n   */\n  html( code: string, options?: Options ): string {\n    assert( isString( code ), 'Invalid code.' );\n    return this.getRenderer( code, null, options ).html( true );\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy(): void {\n    this.renderers.forEach( renderer => {\n      renderer.destroy();\n    } );\n  }\n}\n","import { Language } from '../../types';\n\n\n/**\n * Returns the None language definition.\n *\n * @return A Language object.\n */\nexport function none(): Language {\n  return {\n    id     : 'none',\n    name   : '',\n    grammar: { main: [] },\n  };\n}\n","import { RyuseiLight } from '../core/RyuseiLight/RyuseiLight';\nimport { none, css, javascript, html, xml } from '../languages';\n\nRyuseiLight.register( [ none(), javascript(), html(), css(), xml() ] );\n\nexport { RyuseiLight as default } from '../core/RyuseiLight/RyuseiLight';\n"],"names":["CATEGORY_KEYWORD","CATEGORY_COMMENT","CATEGORY_SELECTOR","CATEGORY_PROPERTY","CATEGORY_CDATA","CATEGORY_PROLOG","CATEGORY_STRING","CATEGORY_NUMBER","CATEGORY_FUNCTION","CATEGORY_OPERATOR","CATEGORY_BRACKET","CATEGORY_DELIMITER","CATEGORY_SPACE","CATEGORY_TEXT","isObject","subject","isString","isUndefined","toArray","value","Array","isArray","addClass","elm","classes","forEach","name","classList","add","forOwn","object","iteratee","keys","Object","i","length","assign","sources","source","key","attr","attrs","getAttribute","setAttribute","String","text","node","textContent","assert","condition","message","Error","startsWith","string","char","charAt","isStickySupported","sticky","Lexer","language","init","grammar","tokenizers","_this","merge","use","this","bind","reduce","merged","tokenizer","category","regexp","include","slice","push","_this2","flags","toString","match","replace","replacement","RegExp","tokenizeBy","index","position","main","command","lastIndex","exec","handle","token","from","indexOf","lines","offset","console","log","lang","input","tokenize","EventBus","on","event","callback","handlers","emit","args","handler","destroy","CLASSES","root","container","PROJECT_CODE_SHORT","body","code","line","active","Components","Renderer","info","options","compose","components","Component","tokens","trim","pop","_this3","renderLines","append","tag","span","join","j","html","pre","fragment","id","containerClasses","bodyClasses","wrap","REGEXP_NUMBER","REGEXP_BOOLEAN","REGEXP_BRACKET","REGEXP_SPACE","REGEXP_QUOTE","REGEXP_DOUBLE_QUOTE","REGEXP_MULTILINE_COMMENT","REGEXP_SLASH_COMMENT","REGEXP_GENERAL_KEYWORDS","css","findBlock","findSingleAtrule","findAtrule","findSelector","common","block","inner","atrule","paren","selector","url","props","javascript","alias","func","backtick","expression","script","style","cdata","unshift","lexers","RyuseiLight","register","languages","concat","getLexer","has","none","getRenderer","apply","target","elms","document","querySelectorAll","HTMLElement","elmOptions","undefined","renderer","isPre","HTMLPreElement","innerHTML","renderers"],"mappings":"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"}