{"version":3,"file":"ryuseilight-components.min.js","sources":["../../src/js/constants/characters.ts","../../src/js/constants/categories.ts","../../src/js/utils/type/type.ts","../../src/js/utils/array/toArray/toArray.ts","../../src/js/utils/dom/addClass/addClass.ts","../../src/js/utils/dom/append/append.ts","../../src/js/utils/object/forOwn/forOwn.ts","../../src/js/utils/object/assign/assign.ts","../../src/js/utils/dom/attr/attr.ts","../../src/js/utils/dom/query/query.ts","../../src/js/utils/dom/styles/styles.ts","../../src/js/utils/dom/tag/tag.ts","../../src/js/utils/dom/text/text.ts","../../src/js/utils/error/assert/assert.ts","../../src/js/constants/project.ts","../../src/js/utils/string/startsWith/startsWith.ts","../../src/js/core/Lexer/Lexer.ts","../../src/js/constants/classes.ts","../../src/js/event/EventBus.ts","../../src/js/core/Renderer/Renderer.ts","../../src/js/utils/string/escapeHtml/escapeHtml.ts","../../src/js/constants/regexp.ts","../../src/js/languages/css/css.ts","../../src/js/languages/javascript/javascript.ts","../../src/js/languages/html/html.ts","../../src/js/core/RyuseiLight/RyuseiLight.ts","../../src/js/languages/none/none.ts","../../src/js/components/ActiveLines/ActiveLines.ts","../../src/js/components/Caption/Caption.ts","../../src/js/components/Copy/Copy.ts","../../src/js/utils/dom/create/create.ts","../../src/js/components/Diff/Diff.ts","../../src/js/components/Gutter/Gutter.ts","../../src/js/languages/xml/xml.ts","../../src/js/utils/error/error/error.ts","../../src/js/utils/function/throttle/throttle.ts","../../src/js/components/LanguageName/LanguageName.ts","../../src/js/components/LineNumbers/LineNumbers.ts","../../src/js/components/Overlay/Overlay.ts","../../src/js/build/components.ts"],"sourcesContent":["/**\n * The line break character.\n *\n * @private\n * @since 0.0.1\n */\nexport const LINE_BREAK = '\\n';\n","export const CATEGORY_KEYWORD    = 'keyword';\nexport const CATEGORY_CONSTANT   = 'constant';\nexport const CATEGORY_COMMENT    = 'comment';\nexport const CATEGORY_TAG        = 'tag';\nexport const CATEGORY_TAG_CLOSE  = 'tag.close';\nexport const CATEGORY_SELECTOR   = 'selector';\nexport const CATEGORY_ATRULE     = 'atrule';\nexport const CATEGORY_ATTRIBUTE  = 'attr';\nexport const CATEGORY_PROPERTY   = 'prop';\nexport const CATEGORY_VALUE      = 'value';\nexport const CATEGORY_VARIABLE   = 'variable';\nexport const CATEGORY_ENTITY     = 'entity';\nexport const CATEGORY_CDATA      = 'cdata';\nexport const CATEGORY_PROLOG     = 'prolog';\nexport const CATEGORY_IDENTIFIER = 'identifier';\nexport const CATEGORY_STRING     = 'string';\nexport const CATEGORY_NUMBER     = 'number';\nexport const CATEGORY_BOOLEAN    = 'boolean';\nexport const CATEGORY_FUNCTION   = 'function';\nexport const CATEGORY_CLASS      = 'class';\nexport const CATEGORY_DECORATOR  = 'decorator';\nexport const CATEGORY_REGEXP     = 'regexp';\nexport const CATEGORY_OPERATOR   = 'operator';\nexport const CATEGORY_BRACKET    = 'bracket';\nexport const CATEGORY_DELIMITER  = 'delimiter';\nexport const CATEGORY_SYMBOL     = 'symbol';\nexport const CATEGORY_SPACE      = 'space';\nexport const CATEGORY_TEXT       = 'text';\n\n// Internal use only\nexport const CATEGORY_LINEBREAK  = 'lb';\n","/**\n * Checks if the given subject is an object or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an object, or otherwise `false`.\n */\nexport function isObject<T extends object>( subject: any ): subject is T {\n  return subject !== null && typeof subject === 'object';\n}\n\n/**\n * Checks if the given subject is an array or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an array, or otherwise `false`.\n */\nexport function isArray<T>( subject: any ): subject is T[] {\n  return Array.isArray( subject );\n}\n\n/**\n * Checks if the given subject is a function or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is a function, or otherwise `false`.\n */\nexport function isFunction( subject: any ): subject is ( ...args: any[] ) => any {\n  return typeof subject === 'function';\n}\n\n/**\n * Checks if the given subject is a string or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is a string, or otherwise `false`.\n */\nexport function isString( subject: any ): subject is string {\n  return typeof subject === 'string';\n}\n\n/**\n * Checks if the given subject is `undefined` or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is `undefined`, or otherwise `false`.\n */\nexport function isUndefined( subject: any ): subject is undefined {\n  return typeof subject === 'undefined';\n}\n\n/**\n * Checks if the given subject is an HTMLElement instance or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an HTMLElement instance, or otherwise `false`.\n */\nexport function isHTMLElement( subject: any ): subject is HTMLElement {\n  return subject instanceof HTMLElement;\n}\n","import { isArray } from '../../type/type';\n\n\n/**\n * Push the provided value to an array only if the value is not an array.\n *\n * @param value - A value to push.\n *\n * @return An array containing the value, or the value itself if it is already an array.\n */\nexport function toArray<T>( value: T | T[] ): T[] {\n  return isArray<T>( value ) ? value : [ value ];\n}\n","import { toArray } from '../../array';\n\n\n/**\n * Adds classes to the element.\n *\n * @param elm     - An element to add classes to.\n * @param classes - Classes to add.\n */\nexport function addClass( elm: HTMLElement, classes: string | string[] ): void {\n  toArray( classes ).forEach( name => {\n    if ( name ) {\n      elm.classList.add( name );\n    }\n  } );\n}\n","import { toArray } from '../../array';\n\n\n/**\n * Appends children to the parent element.\n *\n * @param parent   - A parent element.\n * @param children - A child or children to append to the parent.\n */\nexport function append( parent: HTMLElement, children: Node | Node[] ): void {\n  children = toArray<Node>( children );\n\n  for ( let i = 0; i < children.length; i++ ) {\n    parent.appendChild( children[ i ] );\n  }\n}\n","/**\n * Iterates over the provided object by own enumerable keys with calling the iteratee function.\n *\n * @param object   - An object to iterate over.\n * @param iteratee - An iteratee function that takes the value and key as arguments.\n *\n * @return A provided object itself.\n */\nexport function forOwn<T extends object>( object: T, iteratee: ( value: T[ keyof T ], key: string ) => void ) {\n  if ( object ) {\n    const keys = Object.keys( object );\n\n    for ( let i = 0; i < keys.length; i++ ) {\n      iteratee( object[ keys[ i ] ], keys[ i ] );\n    }\n  }\n}\n","import { isObject, isUndefined } from '../../type/type';\nimport { forOwn } from '../forOwn/forOwn';\n\n\n/**\n * Assign U to T.\n *\n * @typeParam T - An object to assign to.\n * @typeParam U - An object to assign.\n *\n * @return An assigned object type.\n */\nexport type Assign<T, U> = Omit<T, keyof U> & U;\n\nexport function assign<T extends object>( object: T ): T;\n\n// There is a way to type arguments recursively, but these fixed definitions are enough for this project.\nexport function assign<T extends object, U extends object>( object: T, source: U ): Assign<T, U>;\n\nexport function assign<T extends object, U1 extends object, U2 extends object>(\n  object: T, source1: U1, source2: U2\n): Assign<Assign<T, U1>, U2>;\n\nexport function assign<T extends object, U1 extends object, U2 extends object, U3 extends object>(\n  object: T, source1: U1, source2: U2, source3: U3\n): Assign<Assign<Assign<T, U1>, U2>, U3>;\n\n/**\n * Assigns all own enumerable properties of all source objects to the provided object.\n * `undefined` in source objects will be skipped.\n *\n * @param object  - An object to assign properties to.\n * @param sources - Objects to assign properties from.\n *\n * @return An object assigned properties of the sources to.\n */\nexport function assign<T extends object, U extends object>( object: T, ...sources: U[] ): any {\n  sources.forEach( source => {\n    if ( isObject( source ) ) {\n      forOwn( source, ( value, key ) => {\n        if ( ! isUndefined( source[ key ] ) ) {\n          object[ key ] = source[ key ];\n        }\n      } );\n    }\n  } );\n\n  return object;\n}\n","import { forOwn } from '../../object';\nimport { isObject, isString } from '../../type/type';\n\n\nexport function attr( elm: Element, attrs: string ): string;\nexport function attr( elm: Element, attrs: Record<string, string | number | boolean> ): void;\n\n/**\n * Sets new attributes to the passed element if the `attrs` is an object literal,\n * or gets an attribute value from it if the `attrs` is a string.\n *\n * @param elm   - An element to set or get an attribute.\n * @param attrs - An attribute name as a string or new attributes as an object literal.\n */\nexport function attr( elm: Element, attrs: string | Record<string, string | number | boolean> ): string | void {\n  if ( isString( attrs ) ) {\n    return elm.getAttribute( attrs ) || '';\n  }\n\n  if ( isObject( attrs ) ) {\n    forOwn( attrs, ( value, key ) => {\n      elm.setAttribute( key, String( value ) );\n    } );\n  }\n}\n","/**\n * Returns an element that matches the provided selector.\n *\n * @param selector - A selector.\n * @param parent   - Optional. A parent element to start searching elements from.\n *\n * @return A found element or `null`.\n */\nexport function query<E extends Element = HTMLElement>(\n  selector: string,\n  parent: HTMLElement | Document = document\n): E | null {\n  return parent.querySelector<E>( selector );\n}\n","import { forOwn } from '../../object';\n\n\n/**\n * Applies inline styles to the provided element by an object literal.\n *\n * @param elm    - An element to apply styles to.\n * @param styles - An object literal with styles.\n */\nexport function styles( elm: HTMLElement, styles: Record<string, string | number> ): void {\n  forOwn( styles, ( value, key ) => {\n    elm.style[ key ] = String( value );\n  } );\n}\n","/**\n * Returns an open tag with provided classes.\n *\n * @param classes - Classes.\n * @param tag     - Optional. A tag name.\n */\nexport function tag( classes: string[], tag?: string ): string {\n  return `<${ tag || 'div' } class=\"${ classes.join( ' ' ) }\">`;\n}\n","import { isUndefined } from '../../type/type';\n\n\nexport function text( node: Node ): string;\nexport function text( node: Node, text: string ): void;\n\n/**\n * Sets or gets a text content of the provided node.\n *\n * @param node - A node to get or set a text.\n * @param text - Optional. A text to set.\n */\nexport function text( node: Node, text?: string ): string | void {\n  if ( isUndefined( text ) ) {\n    return node.textContent;\n  }\n\n  node.textContent = text;\n}\n","/**\n * Throws an error if the provided condition is falsy.\n *\n * @param condition - If falsy, an error is thrown.\n * @param message   - Optional. A message for the error.\n */\nexport function assert( condition: any, message = '' ): void {\n  if ( ! condition ) {\n    throw new Error( message );\n  }\n}\n","/**\n * The project code name.\n *\n * @since 0.0.1\n */\nexport const PROJECT_CODE = 'ryuseilight';\n\n/**\n * The abbreviated project code.\n *\n * @since 0.0.1\n */\nexport const PROJECT_CODE_SHORT = 'rl';\n","/**\n * Checks if the string starts with the `char` or not.\n *\n * @param string - A string to check.\n * @param char   - A character.\n *\n * @return `true` if the string starts with the `char`, or otherwise `false`.\n */\nexport function startsWith( string: string, char: string ): boolean {\n  return string.charAt( 0 ) === char;\n}\n","import { Language, Token, TokenInfo, Tokenizer } from '../../types';\nimport { LINE_BREAK } from '../../constants/characters';\nimport { CATEGORY_LINEBREAK, CATEGORY_TEXT } from '../../constants/categories';\nimport { assert, forOwn, isUndefined, startsWith } from '../../utils';\n\n\n/**\n * Checks if the RegExp supports the sticky flag or not.\n */\nconst isStickySupported = ! isUndefined( /x/.sticky );\n\n/**\n * The class for creating a simple lexer by a Language object.\n *\n * @since 0.0.1\n */\nexport class Lexer {\n  /**\n   * Holds the Language object.\n   */\n  readonly language: Language;\n\n  /**\n   * Stores lines.\n   */\n  protected lines: Token[][];\n\n  /**\n   * Indicates the current line index.\n   */\n  protected index: number;\n\n  /**\n   * The depth of the state.\n   */\n  protected depth;\n\n  /**\n   * Limits the number of lines.\n   */\n  protected limit;\n\n  /**\n   * Turned to be `true` if the tokenization is manually aborted.\n   */\n  protected aborted;\n\n  /**\n   * The Lexer constructor.\n   *\n   * @param language - A Language object.\n   */\n  constructor( language: Language ) {\n    this.language = language;\n    this.init( language );\n  }\n\n  /**\n   * Initializes the language object.\n   *\n   * @param language - A Language object to initialize.\n   */\n  protected init( language: Language ): void {\n    forOwn( language.grammar, ( tokenizers, key ) => {\n      language.grammar[ key ] = this.merge( language, tokenizers );\n    } );\n\n    forOwn( language.use, this.init.bind( this ) );\n  }\n\n  /**\n   * Includes tokenizers required by `#` annotation and flatten them.\n   *\n   * @param language   - A language object.\n   * @param tokenizers - Tokenizers.\n   *\n   * @return Merged tokenizers.\n   */\n  protected merge( language: Language, tokenizers: Tokenizer[] ): Tokenizer[] {\n    const merged = [];\n\n    for ( let i = 0; i < tokenizers.length; i++ ) {\n      const tokenizer = tokenizers[ i ];\n      const [ category, regexp ] = tokenizers[ i ];\n\n      if ( startsWith( category, '#' ) && ! regexp ) {\n        merged.push( ...this.merge( language, language.grammar[ category.slice( 1 ) ] ) );\n      } else {\n        const flags = regexp.toString().match( /[gimsy]*$/ )[ 0 ].replace( /[gy]/g, '' );\n        let source = regexp.source + ( isStickySupported ? '' : '|()' );\n\n        forOwn( language.source, ( replacement, key ) => {\n          source = source.replace( new RegExp( `%${ key }`, 'g' ), replacement.source );\n        } );\n\n        tokenizer[ 1 ] = new RegExp( source, ( isStickySupported ? 'y' : 'g' ) + flags );\n        merged.push( tokenizer );\n      }\n    }\n\n    return merged;\n  }\n\n  /**\n   * Parses the text by the provided language and tokenizers.\n   *\n   * @param text       - A text to tokenize.\n   * @param language   - A Language object.\n   * @param tokenizers - An array with tokenizers.\n   * @param state      - Optional. The current state name.\n   *\n   * @return An index of the text where the handling ends.\n   */\n  protected parse( text: string, language: Language, tokenizers: Tokenizer[], state: string ): number {\n    let index    = 0;\n    let position = 0;\n\n    this.depth++;\n\n    main:\n    while ( index < text.length && ! this.aborted ) {\n      for ( let i = 0; i < tokenizers.length; i++ ) {\n        const tokenizer = tokenizers[ i ];\n        const [ , regexp, action ] = tokenizer;\n\n        regexp.lastIndex = index;\n\n        const match = regexp.exec( text );\n\n        if ( ! match || ! match[ 0 ] ) {\n          continue;\n        }\n\n        if ( position < index ) {\n          this.push( [ CATEGORY_TEXT, text.slice( position, index ) ], language, state );\n        }\n\n        if ( action === '@back' ) {\n          position = index;\n          break main;\n        }\n\n        const offset = this.handle( match, language, tokenizer, state );\n        index += offset || 1;\n        position = index;\n\n        if ( action === '@break' ) {\n          break main;\n        }\n\n        continue main;\n      }\n\n      index++;\n    }\n\n    if ( position < index ) {\n      this.push( [ CATEGORY_TEXT, text.slice( position ) ], language, state );\n    }\n\n    this.depth--;\n\n    return index;\n  }\n\n  /**\n   * Pushes the provided token to the lines array.\n   *\n   * @param token    - A token to push.\n   * @param language - A Language object.\n   * @param state    - A state name.\n   */\n  protected push( token: Token, language: Language, state: string ): void {\n    const { depth } = this;\n    const [ category, text ] = token;\n    const start = this.index;\n\n    let index = 0;\n    let from  = 0;\n\n    while ( index > -1 && ! this.aborted ) {\n      index = text.indexOf( LINE_BREAK, from );\n\n      const line  = this.lines[ this.index ];\n      const empty = from === index && ! line.length;\n      const code  = empty ? LINE_BREAK : text.slice( from, index < 0 ? undefined : index );\n      const info  = { depth, language: language.id, state } as TokenInfo;\n\n      if ( code ) {\n        if ( category !== CATEGORY_TEXT ) {\n          info.head     = index > -1 && ! from;\n          info.tail     = index < 0 && !! from;\n          info.split    = index > -1 || !! from;\n          info.distance = this.index - start;\n        }\n\n        line.push( [ category === CATEGORY_TEXT && empty ? CATEGORY_LINEBREAK : category, code, info ] );\n      }\n\n      if ( index > -1 ) {\n        this.index++;\n        this.aborted = this.limit && this.index >= this.limit;\n\n        if ( ! this.aborted ) {\n          from = index + 1;\n          this.lines[ this.index ] = [];\n        }\n      }\n    }\n  }\n\n  /**\n   * Handles the matched text.\n   *\n   * @param match     - A matched result.\n   * @param language  - A Language object.\n   * @param tokenizer - A tokenizer that has been matched with the text.\n   * @param state     - A state name.\n   *\n   * @return An index of the text where the handling ends.\n   */\n  protected handle( match: RegExpExecArray, language: Language, tokenizer: Tokenizer, state: string ): number {\n    const [ category ] = tokenizer;\n\n    if ( ! category ) {\n      return 0;\n    }\n\n    let [ text ] = match;\n\n    if ( tokenizer[ 3 ] === '@debug' ) {\n      // eslint-disable-next-line\n      console.log( text, tokenizer );\n    }\n\n    if ( startsWith( category, '@' ) ) {\n      assert( language.use );\n\n      const lang = language.use[ category.slice( 1 ) ];\n      assert( lang );\n\n      return this.parse( text, lang, lang.grammar.main, category );\n    }\n\n    if ( startsWith( category, '#' ) ) {\n      const tokenizers = language.grammar[ category.slice( 1 ) ];\n      assert( tokenizers );\n\n      if ( tokenizer[ 2 ] === '@rest' ) {\n        text = match.input.slice( match.index );\n      }\n\n      return this.parse( text, language, tokenizers, category );\n    }\n\n    this.push( [ category, text ], language, state );\n    return text.length;\n  }\n\n  /**\n   * Tokenizes the text by the current language.\n   *\n   * @param text  - A text to tokenize.\n   * @param limit - Optional. Limits the number of lines.\n   *\n   * @return An array with tokens.\n   */\n  tokenize( text: string, limit?: number ): Token[][] {\n    this.lines   = [ [] ];\n    this.index   = 0;\n    this.depth   = -1;\n    this.limit   = limit || 0;\n    this.aborted = false;\n\n    this.parse( text, this.language, this.language.grammar.main, '#main' );\n\n    return this.lines;\n  }\n}\n","import { PROJECT_CODE, PROJECT_CODE_SHORT } from './project';\n\n\nexport const ROOT      = PROJECT_CODE;\nexport const CONTAINER = `${ PROJECT_CODE_SHORT }__container`;\nexport const BODY      = `${ PROJECT_CODE_SHORT }__body`;\nexport const CODE      = `${ PROJECT_CODE_SHORT }__code`;\nexport const LINE      = `${ PROJECT_CODE_SHORT }__line`;\nexport const TOKEN     = `${ PROJECT_CODE_SHORT }__token`;\nexport const ACTIVE    = 'is-active';\n","import { AnyFunction } from '../types';\n\n\n/**\n * The class for providing the very simple event bus.\n *\n * @private\n * @since 0.0.1\n */\nexport class EventBus {\n  /**\n   * Holds handlers.\n   */\n  protected handlers = {};\n\n  /**\n   * Attaches a handler.\n   *\n   * @param event    - An event name.\n   * @param callback - A callback function to register.\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\n   */\n  on( event: string, callback: AnyFunction, priority = 10 ): void {\n    const handlers = ( this.handlers[ event ] = this.handlers[ event ] || [] );\n    handlers.push( { callback, priority } );\n    handlers.sort( ( handler1, handler2 ) => handler1.priority - handler2.priority );\n  }\n\n  /**\n   * Emits an event.\n   *\n   * @param event - An event name.\n   * @param args  - Optional. Any number of arguments to pass to callbacks.\n   */\n  emit( event, ...args ): void {\n    ( this.handlers[ event ] || [] ).forEach( handler => {\n      handler.callback( ...args );\n    } );\n  }\n\n  /**\n   * Destroys the event bus.\n   */\n  destroy(): void {\n    this.handlers = {};\n  }\n}\n","import { BODY, CODE, CONTAINER, LINE, ROOT, TOKEN } from '../../constants/classes';\nimport { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { EventBus } from '../../event/EventBus';\nimport { Component, LanguageInfo, Options, Token } from '../../types';\nimport { escapeHtml, forOwn, tag } from '../../utils';\n\n\n/**\n * Stores all Component functions.\n */\nconst Components: Record<string, Component> = {};\n\n/**\n * The class for highlighting code via provided tokens.\n *\n * @since 0.0.1\n */\nexport class Renderer {\n  /**\n   * Adds components.\n   *\n   * @param components - An object literal with Component functions.\n   */\n  static compose( components: Record<string, Component> ): void {\n    forOwn( components, ( Component, name ) => {\n      Components[ name ] = Component;\n    } );\n  }\n\n  /**\n   * Holds lines with tokens.\n   */\n  readonly lines = [];\n\n  /**\n   * Holds the language info.\n   */\n  readonly info: LanguageInfo;\n\n  /**\n   * Holds the root element if provided.\n   */\n  readonly root: HTMLElement | undefined;\n\n  /**\n   * Holds options.\n   */\n  readonly options: Options;\n\n  /**\n   * Holds the EventBus instance.\n   */\n  readonly event: EventBus = new EventBus();\n\n  /**\n   * The Renderer constructor.\n   *\n   * @param lines   - Lines with tokens to render.\n   * @param info    - The language info object.\n   * @param root    - Optional. A root element to highlight.\n   * @param options - Options.\n   */\n  constructor( lines: Token[][], info: LanguageInfo, root?: HTMLElement, options: Options = {} ) {\n    this.lines   = lines;\n    this.info    = info;\n    this.root    = root;\n    this.options = options;\n\n    this.init();\n  }\n\n  /**\n   * Initializes the instance.\n   */\n  protected init(): void {\n    const { lines } = this;\n\n    if ( lines.length ) {\n      const tokens = lines[ lines.length - 1 ];\n\n      if ( ! tokens.length || ( tokens.length === 1 && ! tokens[ 0 ][ 1 ].trim() ) ) {\n        // Removes the last empty line.\n        lines.pop();\n      }\n    }\n\n    forOwn( Components, Component => {\n      Component( this );\n    } );\n\n    this.event.emit( 'mounted' );\n  }\n\n  /**\n   * Renders lines as HTML.\n   *\n   * @param append - A function to add fragments to the HTML string.\n   *\n   * @return A rendered HTML string.\n   */\n  protected renderLines( append: ( fragment: string ) => void ): void {\n    const event   = this.event;\n    const tagName = this.options.span ? 'span' : 'code';\n\n    for ( let i = 0; i < this.lines.length; i++ ) {\n      const tokens  = this.lines[ i ];\n      const classes = [ LINE ];\n\n      event.emit( 'line:open', append, classes, i );\n      append( tag( classes ) );\n\n      for ( let j = 0; j < tokens.length; j++ ) {\n        const token      = tokens[ j ];\n        const categories = token[ 0 ].split( '.' );\n        const className  = `${ PROJECT_CODE_SHORT }__${ categories[ 0 ] }`;\n        const modifiers  = categories.slice( 1 ).map( sub => `${ className }--${ sub }` );\n        const classes    = [ TOKEN, className ].concat( modifiers );\n\n        event.emit( 'token', token, classes );\n        append( `${ tag( classes, tagName ) }${ escapeHtml( token[ 1 ] ) }</${ tagName }>` );\n      }\n\n      append( '</div>' );\n      event.emit( 'line:closed', append, i );\n    }\n  }\n\n  /**\n   * Returns all lines and wrapper elements.\n   *\n   * @param pre - Whether to wrap elements by `pre` or not.\n   *\n   * @return An HTML string.\n   */\n  html( pre: boolean ): string {\n    const { event } = this;\n    const closeTag  = '</div>';\n    let html  = '';\n\n    const append = ( fragment: string ) => { html += fragment };\n\n    if ( pre ) {\n      html += tag( [ `${ ROOT } ${ ROOT }--${ this.info.id }` ], 'pre' );\n    }\n\n    const containerClasses = [ CONTAINER ];\n    event.emit( 'open', append, containerClasses );\n    html += tag( containerClasses );\n\n    const bodyClasses = [ `${ BODY }${ this.options.wrap ? ` ${ BODY }--wrap` : '' }` ];\n    event.emit( 'body:open', append, bodyClasses );\n    html += tag( bodyClasses );\n\n    event.emit( 'code:open', append );\n    html += tag( [ CODE ] );\n    this.renderLines( append );\n    html += closeTag; // code\n\n    event.emit( 'body:close', append );\n    html += closeTag; // body\n\n    event.emit( 'close', append );\n    html += closeTag; // container\n\n    event.emit( 'closed', append );\n\n    if ( pre ) {\n      html += `</pre>`;\n    }\n\n    return html;\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy(): void {\n    this.event.emit( 'destroy' );\n    this.event.destroy();\n  }\n}\n","/**\n * Converts essential HTML special characters to HTML entities.\n *\n * @param string - A string to escape.\n *\n * @return An escaped string.\n */\nexport function escapeHtml( string: string ): string {\n  return string.replace( /&/g, '&amp;' ).replace( /</g, '&lt;' );\n}\n","export const REGEXP_FLOAT = /\\d+\\.?\\d*|\\d*\\.?\\d+/;\n\nexport const REGEXP_NUMBER = /[+-]?(\\d+\\.?\\d*|\\d*\\.?\\d+)([eE][+-]?\\d+)?/;\n\nexport const REGEXP_BOOLEAN = /\\b(?:true|false)\\b/;\n\nexport const REGEXP_BRACKET = /[[\\]{}()]/;\n\nexport const REGEXP_SPACE = /[ \\t]+/;\n\nexport const REGEXP_QUOTE = /'(?:\\\\'|.)*?'/;\n\nexport const REGEXP_DOUBLE_QUOTE = /\"(?:\\\\\"|.)*?\"/;\n\nexport const REGEXP_MULTILINE_COMMENT = /\\/\\*[\\s\\S]*?(\\*\\/|$)/;\n\nexport const REGEXP_SLASH_COMMENT = /\\/\\/.*/;\n\nexport const REGEXP_GENERAL_KEYWORDS = /\\b(?:break|catch|class|continue|do|else|extends|finally|for|function|if|implements|in|instanceof|interface|new|null|return|throw|try|while)\\b/;\n","import { Language } from '../../types';\nimport {\n  CATEGORY_BRACKET,\n  CATEGORY_COMMENT,\n  CATEGORY_FUNCTION,\n  CATEGORY_KEYWORD,\n  CATEGORY_NUMBER,\n  CATEGORY_OPERATOR,\n  CATEGORY_PROPERTY,\n  CATEGORY_SELECTOR,\n  CATEGORY_SPACE,\n  CATEGORY_STRING,\n  CATEGORY_DELIMITER,\n  CATEGORY_TAG,\n  CATEGORY_ATRULE,\n} from '../../constants/categories';\nimport { REGEXP_MULTILINE_COMMENT, REGEXP_SPACE } from '../../constants/regexp';\n\n\n/**\n * Returns the CSS language definition.\n *\n * @return A Language object.\n */\nexport function css(): Language {\n  return {\n    id  : 'css',\n    name: 'CSS',\n\n    grammar: {\n      main: [\n        [ '#common' ],\n\n        // An atrule without a block\n        [ '#findSingleAtrule' ],\n\n        // Blocks including atrules\n        [ '#findBlock' ],\n      ],\n\n      findBlock: [\n        [ '#block', /[^ \\t\\r\\n;{}][^;{}]*{.*?}/s, '@rest' ],\n      ],\n\n      findSingleAtrule: [\n        [ '#atrule', /@[^{;]+?;/s ],\n      ],\n\n      // Finds atrules before { and ;\n      findAtrule: [\n        [ '#atrule', /@[^{;]*?(?=[{;])/s ],\n      ],\n\n      // May not start with digits\n      findSelector: [\n        [ '#selector', /[^ \\t\\r\\n{};].*?(?={)/s ],\n      ],\n\n      common: [\n        [ CATEGORY_STRING, /(['\"]).*?[^\\\\]\\1/s ],\n        [ CATEGORY_COMMENT, REGEXP_MULTILINE_COMMENT ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n      ],\n\n      block: [\n        [ '#inner', /{/, '@rest' ],\n        [ CATEGORY_BRACKET, /}/, '@break' ],\n        [ '#findAtrule' ],\n        [ '#findSelector' ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n      ],\n\n      inner: [\n        [ CATEGORY_BRACKET, /{/ ],\n        [ '#common' ],\n        [ '#findBlock' ],\n        [ '#props' ],\n        [ '#findAtrule' ],\n        [ '', /}/, '@back' ],\n      ],\n\n      atrule: [\n        [ '#common' ],\n        [ '#url', /\\burl\\(/, '@rest' ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n        [ CATEGORY_ATRULE, /[^\\s();]+/ ],\n        [ CATEGORY_DELIMITER, /[:;,]/ ],\n        [ '#paren', /\\(/, '@rest' ],\n      ],\n\n      paren: [\n        [ CATEGORY_BRACKET, /^\\(/ ],\n        [ '#common' ],\n        [ '#paren', /\\(/, '@rest' ],\n        [ CATEGORY_BRACKET, /\\)/, '@break' ],\n        [ '#props' ],\n      ],\n\n      selector: [\n        [ '#common' ],\n        [ CATEGORY_OPERATOR, /[>+~]/ ],\n        [ CATEGORY_BRACKET, /[[\\]()]/ ],\n        [ CATEGORY_DELIMITER, /=/ ],\n        [ CATEGORY_SELECTOR, /::?\\S+/ ],\n        [ CATEGORY_SELECTOR, /[\\W\\d]\\S+/ ],\n        [ CATEGORY_TAG, /\\b[a-z]+|\\*/i ],\n        [ CATEGORY_SELECTOR, /\\S+/ ],\n      ],\n\n      url: [\n        [ '#common' ],\n        [ CATEGORY_FUNCTION, /^url/ ],\n        [ CATEGORY_BRACKET, /\\(/ ],\n        [ CATEGORY_STRING, /[^)]+/ ],\n        [ CATEGORY_BRACKET, /\\)/, '@break' ],\n      ],\n\n      props: [\n        [ CATEGORY_PROPERTY, /[a-z0-9-_\\xA0-\\uFFFF]+(?=:)/i ],\n        [ '#url', /\\burl\\(/, '@rest' ],\n        [ CATEGORY_FUNCTION, /\\b[\\w-]+(?=\\()\\b/ ],\n        [ CATEGORY_KEYWORD, /!important|\\b(?:initial|inherit|unset)/ ],\n        [ CATEGORY_PROPERTY, /[a-z0-9-]+(?=:)/ ],\n        [ CATEGORY_NUMBER, /#([0-9a-f]{6}|[0-9a-f]{3})/i ],\n        [ CATEGORY_NUMBER, /\\bU\\+[0-9a-f?-]+/i ],\n        [ CATEGORY_NUMBER, /[+-]?(\\d+\\.?\\d*|\\d*\\.?\\d+)/ ],\n        [ CATEGORY_DELIMITER, /[:;,]/ ],\n        [ '#paren', /\\(/, '@rest' ],\n        [ CATEGORY_BRACKET, /[[\\])]/ ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n      ],\n    },\n  };\n}\n","import {\n  REGEXP_BOOLEAN, REGEXP_BRACKET, REGEXP_DOUBLE_QUOTE, REGEXP_GENERAL_KEYWORDS, REGEXP_MULTILINE_COMMENT,\n  REGEXP_NUMBER, REGEXP_QUOTE, REGEXP_SLASH_COMMENT, REGEXP_SPACE,\n} from '../../constants/regexp';\nimport { Language } from '../../types';\nimport {\n  CATEGORY_DELIMITER, CATEGORY_DECORATOR, CATEGORY_KEYWORD, CATEGORY_REGEXP, CATEGORY_STRING,\n  CATEGORY_OPERATOR, CATEGORY_COMMENT, CATEGORY_CLASS, CATEGORY_FUNCTION, CATEGORY_BOOLEAN,\n  CATEGORY_IDENTIFIER, CATEGORY_NUMBER, CATEGORY_BRACKET, CATEGORY_SPACE,\n} from '../../constants/categories';\n\n\n/**\n * Returns the JavaScript language definition.\n *\n * @return A Language object.\n */\nexport function javascript(): Language {\n  return {\n    id   : 'javascript',\n    name : 'JavaScript',\n    alias: [ 'js' ],\n\n    source: {\n      func: /[_$a-z\\xA0-\\uFFFF][_$a-z0-9\\xA0-\\uFFFF]*/,\n    },\n\n    grammar: {\n      main: [\n        [ CATEGORY_STRING, REGEXP_QUOTE ],\n        [ CATEGORY_STRING, REGEXP_DOUBLE_QUOTE ],\n        [ '#backtick', /`/, '@rest' ],\n        [ CATEGORY_COMMENT, REGEXP_MULTILINE_COMMENT ],\n        [ CATEGORY_COMMENT, REGEXP_SLASH_COMMENT ],\n        [ CATEGORY_REGEXP, /\\/(\\[.*[^\\\\]?]|\\\\\\/|.)+?\\/[gimsuy]*/ ],\n        [ CATEGORY_KEYWORD, REGEXP_GENERAL_KEYWORDS ],\n        [ CATEGORY_KEYWORD, /\\b(?:as|async|await|case|catch|const|debugger|default|delete|enum|export|from|import|let|package|private|protected|public|super|switch|static|this|typeof|undefined|var|void|with|yield)\\b/ ],\n        [ CATEGORY_KEYWORD, /\\b((get|set)(?=\\s+%func))/i ],\n        [ CATEGORY_CLASS, /\\b[A-Z][\\w$]*\\b/ ],\n        [ CATEGORY_FUNCTION, /%func(?=\\s*\\()/i ],\n        [ CATEGORY_BOOLEAN, REGEXP_BOOLEAN ],\n        [ CATEGORY_DECORATOR, /@[^\\s(@]+/ ],\n        [ CATEGORY_IDENTIFIER, /\\b[a-z_$][\\w$]*\\b/ ],\n        [ CATEGORY_NUMBER, REGEXP_NUMBER ],\n        [ CATEGORY_OPERATOR, /=>/ ],\n        [ CATEGORY_OPERATOR, /\\+[+=]?|-[-=]?|\\*\\*?=?|[/%^]=?|&&?=?|\\|\\|?=?|\\?\\??=?|<<?=?|>>>=?|>>?=?|[!=]=?=?|[~:^]/ ],\n        [ CATEGORY_BRACKET, REGEXP_BRACKET ],\n        [ CATEGORY_DELIMITER, /[;.,]+/ ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n      ],\n\n      backtick: [\n        [ CATEGORY_STRING, /^`/ ],\n        [ CATEGORY_STRING, /(\\$[^{]|\\\\[$`]|[^`$])+/ ],\n        [ '#expression', /\\${/, '@rest' ],\n        [ CATEGORY_STRING, /`/, '@break' ],\n      ],\n\n      expression: [\n        [ CATEGORY_DELIMITER, /^\\${/ ],\n        [ CATEGORY_DELIMITER, /}/, '@break' ],\n        [ '#main' ],\n      ],\n    },\n  };\n}\n","import {\n  CATEGORY_ATTRIBUTE,\n  CATEGORY_BRACKET,\n  CATEGORY_CDATA,\n  CATEGORY_COMMENT,\n  CATEGORY_DELIMITER,\n  CATEGORY_ENTITY,\n  CATEGORY_PROLOG,\n  CATEGORY_SPACE,\n  CATEGORY_TAG,\n  CATEGORY_TAG_CLOSE,\n  CATEGORY_VALUE,\n} from '../../constants/categories';\nimport { REGEXP_SPACE } from '../../constants/regexp';\nimport { Language, Tokenizer } from '../../types';\nimport { css } from '../css/css';\nimport { javascript } from '../javascript/javascript';\n\n\n/**\n * The HTML language options.\n *\n * @since 0.0.12\n */\nexport interface HtmlOptions {\n  /**\n   * The language for tokenizing script blocks.\n   */\n  script?: () => Language;\n\n  /**\n   * The language for tokenizing style blocks.\n   */\n  style?: () => Language;\n}\n\n/**\n * Returns the HTML language definition.\n *\n * @param options - Optional. Options.\n *\n * @return A Language object.\n */\nexport function html( options: HtmlOptions = {} ): Language {\n  const script = ( options.script || javascript )();\n  const style  = ( options.style || css )();\n  const cdata  = [ CATEGORY_CDATA, /<!\\[CDATA\\[.*]]>/is ] as Tokenizer;\n\n  // Embedded scripts or styles may contain CDATA sections.\n  script.grammar.main.unshift( cdata );\n  style.grammar.main.unshift( cdata );\n\n  return {\n    id   : 'html',\n    alias: [ 'markup' ],\n    name : 'HTML',\n    use  : { script, style },\n\n    grammar: {\n      main: [\n        [ CATEGORY_COMMENT, /<!--.*?-->/s ],\n        [ CATEGORY_PROLOG, /<!DOCTYPE.*?>/is ],\n        cdata,\n        [ '#script', /<script.*?>.*?<\\/script>/s ],\n        [ '#style', /<style.*?>.*?<\\/style>/s ],\n        [ '#tag', /<.*?>/s ],\n        [ CATEGORY_ENTITY, /&[\\da-z]+;|&#\\d+;/i ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n      ],\n\n      script: [\n        [ '#tag', /^<script.*?>/s ],\n        cdata,\n        [ '@script', /.+(?=<\\/script>)/s ],\n        [ '#tag', /<\\/script>/ ],\n      ],\n\n      style: [\n        [ '#tag', /^<style.*?>/s ],\n        [ '@style', /.+(?=<\\/style>)/s ],\n        [ '#tag', /<\\/style>/ ],\n      ],\n\n      tag: [\n        [ '#closeTag', /<\\/.+>/ ],\n        [ '#tagContent' ],\n      ],\n\n      closeTag: [\n        [ CATEGORY_TAG_CLOSE, /[^\\s/<>\"'=]+/ ],\n        [ '#tagContent' ],\n      ],\n\n      tagContent: [\n        [ '#attr', /[ \\t\\r\\n]+.+(?=[ \\t\\r\\n/>])/s ],\n        [ CATEGORY_TAG, /[^\\s/<>\"'=]+/ ],\n        [ CATEGORY_BRACKET, /[<>]/ ],\n        [ CATEGORY_DELIMITER, /[/]/ ],\n      ],\n\n      attr: [\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n        [ CATEGORY_VALUE, /(['\"])(\\\\\\1|.)*?\\1/ ],\n        [ CATEGORY_DELIMITER, /[/=]/ ],\n        [ CATEGORY_ATTRIBUTE, /[^\\s/>\"'=]+/ ],\n      ],\n    },\n  };\n}\n","import { Language, Options, Token } from '../../types';\nimport { Lexer } from '../Lexer/Lexer';\nimport { Renderer } from '../Renderer/Renderer';\nimport { ROOT } from '../../constants/classes';\nimport { ATTRIBUTE_LANGUAGE } from '../../constants/attributes';\nimport { attr, isHTMLElement, text, assert, isString, assign, addClass, toArray } from '../../utils';\nimport { none } from '../../languages';\n\n\n/**\n * Stores all Lexer instances.\n */\nconst lexers: Record<string, Lexer> = {};\n\n/**\n * The class that tokenizes code for syntax highlighting.\n *\n * @since 0.0.1\n */\nexport class RyuseiLight {\n  /**\n   * Registers languages.\n   *\n   * @param languages - A Language object or objects.\n   */\n  static register( languages: Language | Language[] ): void {\n    toArray( languages ).forEach( language => {\n      const { id } = language;\n\n      if ( id && ! lexers[ id ] ) {\n        ( language.alias || [] ).concat( id ).forEach( id => {\n          lexers[ id ] = new Lexer( language );\n        } );\n      }\n    } );\n  }\n\n  /**\n   * Adds components.\n   *\n   * @param components - An object literal with Component functions.\n   */\n  static compose = Renderer.compose;\n\n  /**\n   * Tokenizes the provided string.\n   *\n   * @param code     - A string to tokenize.\n   * @param language - A language ID.\n   * @param limit    - Optional. Limits the (ideal) number of lines.\n   *\n   * @return An array of arrays with tokens as [ string, string ].\n   */\n  static tokenize( code: string, language: string, limit?: number ): Token[][] {\n    return RyuseiLight.getLexer( language ).tokenize( code, limit );\n  }\n\n  /**\n   * Checks if the given language has been already registered or not.\n   *\n   * @param language - A language to check.\n   */\n  static has( language: string ): boolean {\n    return !! lexers[ language ];\n  }\n\n  /**\n   * Returns a registered Lexer instance.\n   * If it's not found, the `none` lexer will be returned.\n   *\n   * @param language - A language name.\n   */\n  protected static getLexer( language: string ) {\n    if ( ! lexers.none ) {\n      RyuseiLight.register( none() );\n    }\n\n    return lexers[ language ] || lexers.none;\n  }\n\n  /**\n   * Holds all renderers.\n   */\n  protected readonly renderers: Renderer[] = [];\n\n  /**\n   * Holds options.\n   */\n  protected readonly options: Options;\n\n  /**\n   * The RyuseiLight constructor.\n   *\n   * @param options  - Optional. Options.\n   */\n  constructor( options?: Options ) {\n    this.options = assign( {}, options );\n  }\n\n  /**\n   * Returns a new Renderer instance.\n   *\n   * @param code    - A code to highlight.\n   * @param elm     - Optional. An element to highlight.\n   * @param options - Optional. Options.\n   */\n  protected getRenderer( code: string, elm?: HTMLElement, options?: Options ) {\n    options = assign( {}, this.options, options );\n\n    const language     = options.language;\n    const { name, id } = RyuseiLight.getLexer( language ).language;\n    return new Renderer( RyuseiLight.tokenize( code, language ), { name, id }, elm, options );\n  }\n\n  /**\n   * Applies the highlighter to elements that matches the selector or the provided element.\n   *\n   * @param target  - A selector or an element.\n   * @param options - Optional. Options.\n   */\n  apply( target: string | Element, options?: Options ): void {\n    const elms = isString( target ) ? document.querySelectorAll( target ) : [ target ];\n\n    for ( let i = 0; i < elms.length; i++ ) {\n      const elm = elms[ i ];\n\n      if ( isHTMLElement( elm ) ) {\n        const elmOptions = assign( {}, options, { language: attr( elm, ATTRIBUTE_LANGUAGE ) || undefined } );\n        const renderer   = this.getRenderer( text( elm ), elm, elmOptions );\n        const isPre      = elm instanceof HTMLPreElement;\n\n        if ( isPre ) {\n          addClass( elm, [ ROOT, `${ ROOT }--${ renderer.info.id }` ] );\n        }\n\n        elm.innerHTML = renderer.html( ! isPre );\n\n        renderer.event.emit( 'applied', elm );\n        this.renderers.push( renderer );\n      }\n    }\n  }\n\n  /**\n   * Returns highlighted HTML by tokenizing the provided code.\n   *\n   * @param code    - Code to highlight.\n   * @param options - Optional. Options.\n   *\n   * @return Highlighted HTML string.\n   */\n  html( code: string, options?: Options ): string {\n    assert( isString( code ), 'Invalid code.' );\n    return this.getRenderer( code, null, options ).html( true );\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy(): void {\n    this.renderers.forEach( renderer => {\n      renderer.destroy();\n    } );\n  }\n}\n","import { Language } from '../../types';\n\n\n/**\n * Returns the None language definition.\n *\n * @return A Language object.\n */\nexport function none(): Language {\n  return {\n    id     : 'none',\n    name   : '',\n    grammar: { main: [] },\n  };\n}\n","import { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { Renderer } from '../../core/Renderer/Renderer';\nimport { ACTIVE } from '../../constants/classes';\nimport { attr, error, isArray } from '../../utils';\n\n\n/**\n * The data attribute name for active lines.\n * The value must be an array in JSON format, such as \"[ 2, [ 5, 10 ] ]\"\n *\n * @private\n * @since 0.0.1\n */\nexport const ATTRIBUTE_ACTIVE_LINES = `data-${ PROJECT_CODE_SHORT }-active-lines`;\n\n/**\n * The component for highlighting lines.\n *\n * @since 0.0.1\n */\nexport function ActiveLines( { event, root, options }: Renderer ): void {\n  const lines = ( root && parseData( root ) ) || options.activeLines;\n\n  if ( isArray( lines ) ) {\n    const activeLines = normalize( lines );\n\n    event.on( 'gutter:row:open', ( html, classes, index ) => {\n      if ( activeLines[ index ] ) {\n        classes.push( activeLines[ index ] );\n      }\n    } );\n\n    event.on( 'line:open', ( html, classes, index ) => {\n      if ( activeLines[ index ] ) {\n        classes.push( activeLines[ index ] );\n      }\n    } );\n  }\n}\n\n/**\n * Attempts to get definition of active lines from a data attribute.\n *\n * @param elm - A root element.\n *\n * @return An array with line numbers if available, or otherwise `undefined`.\n */\nfunction parseData( elm: HTMLElement ): Array<number | [ number, number ]> | void {\n  const data = attr( elm, ATTRIBUTE_ACTIVE_LINES );\n\n  if ( data ) {\n    try {\n      return JSON.parse( data );\n    } catch ( e ) {\n      error( e.message );\n    }\n  }\n}\n\n/**\n * Normalizes the definition of lines to activate.\n *\n * @param lines - An array with line numbers.\n *\n * @return An array with normalized line numbers.\n */\nfunction normalize( lines: Array<number | [ number, number ]> ): string[] {\n  const numbers = [];\n\n  lines.forEach( range => {\n    if ( ! isArray( range ) ) {\n      range = [ range, range ];\n    }\n\n    const start = ( +range[ 0 ] || 1 ) - 1;\n    const end   = ( +range[ 1 ] || 1 ) - 1;\n\n    for ( let i = start; i <= end; i++ ) {\n      numbers[ i ] = ACTIVE;\n    }\n  } );\n\n  return numbers;\n}\n","import { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { Renderer } from '../../core/Renderer/Renderer';\nimport { assign, attr, isObject, isString } from '../../utils';\n\n\n/**\n * The data attribute name for a caption.\n *\n * @since 0.0.22\n */\nexport const ATTRIBUTE_CAPTION = `data-${ PROJECT_CODE_SHORT }-caption`;\n\n/**\n * The component for wrapping a code snipped by a figure tag and appending a figcaption.\n *\n * @since 0.0.22\n */\nexport function Caption( { event, root, options }: Renderer ) {\n  const attrCaption = root && attr( root, ATTRIBUTE_CAPTION );\n\n  if ( ! attrCaption && ! options.caption ) {\n    return;\n  }\n\n  const captionOptions = options.caption;\n  const { position, html } = assign( {}, isObject( captionOptions ) ? captionOptions : null );\n  const caption = attrCaption || html || ( isString( captionOptions ) ? captionOptions : '' );\n\n  if ( caption ) {\n    const bottom = position === 'bottom';\n\n    event.on( 'open', append => {\n      append( `<figure class=\"${ PROJECT_CODE_SHORT }__figure\">` );\n\n      if ( ! bottom ) {\n        appendCaption( append, caption );\n      }\n    } );\n\n    event.on( 'closed', append => {\n      if ( bottom ) {\n        appendCaption( append, caption, true );\n      }\n\n      append( '</figure>' );\n    } );\n  }\n}\n\n/**\n * Appends a figcaption element with a provided caption.\n *\n * @param append  - The append function.\n * @param caption - A caption.\n * @param bottom  - Optional. Set `true` for a bottom caption.\n */\nfunction appendCaption( append: ( html: string ) => void, caption: string, bottom?: boolean ): void {\n  const className = `${ PROJECT_CODE_SHORT }__figcaption`;\n\n  append( `<figcaption class=\"${ className } ${ className + ( bottom ? '--bottom' : '--top' ) }\">` );\n  append( `<span>${ caption }</span>` );\n  append( `</figcaption>` );\n}\n","import { Renderer } from '../../core/Renderer/Renderer';\nimport { LINE_BREAK } from '../../constants/characters';\nimport { ACTIVE } from '../../constants/classes';\nimport { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { addClass, append, assign, create, isObject, query, styles } from '../../utils';\n\n\n/**\n * Default options for the Copy component.\n *\n * @private\n *\n * @since 0.0.1\n */\nexport const DEFAULT_OPTIONS = {\n  html      : 'Copy',\n  activeHtml: 'Done',\n  duration  : 1000,\n  ariaLabel : 'Copy code to clipboard',\n  position  : 'topRight',\n};\n\n/**\n * The component for creating a copy button and handling click.\n *\n * @since 0.0.1\n */\nexport function Copy( { lines, event, options }: Renderer ): void {\n  if ( options.copy ) {\n    const copyOptions = assign( {}, DEFAULT_OPTIONS, isObject( options.copy ) ? options.copy : {} );\n    const buttonClass = `${ PROJECT_CODE_SHORT }__copy`;\n    const labelClass  = `${ PROJECT_CODE_SHORT }__button__label`;\n\n    options.tools = copyOptions.position;\n\n    event.on( `tools:${ copyOptions.position }`, append => {\n      append( `<button type=\"button\" class=\"rl__button ${ buttonClass }\" aria-label=\"${ copyOptions.ariaLabel }\">` );\n      append( `<span class=\"${ labelClass } ${ labelClass }--inactive\">${ copyOptions.html }</span>` );\n      append( `<span class=\"${ labelClass } ${ labelClass }--active\">${ copyOptions.activeHtml }</span>` );\n      append( `</button>` );\n    } );\n\n    event.on( 'applied', root => {\n      const button = query<HTMLButtonElement>( `.${ buttonClass }`, root );\n      const code   = lines.map( line => line.map( token => token[ 1 ] ).join( '' ) ).join( LINE_BREAK );\n\n      if ( button ) {\n        const onClick = () => { copy( code, button, copyOptions.duration ) };\n        button.addEventListener( 'click', onClick );\n\n        event.on( 'destroy', () => {\n          button.removeEventListener( 'click', onClick );\n        } );\n      }\n    } );\n  }\n}\n\n/**\n * Attempts to copy the provided code by the Clipboard API.\n *\n * @param code     - A code to copy.\n * @param button   - A button element.\n * @param duration - Duration for the button activation.\n */\nfunction copy( code: string, button: HTMLButtonElement, duration: number ): void {\n  const onSuccess = () => {\n    if ( duration ) {\n      toggleClass( button, duration );\n    }\n  };\n\n  if ( navigator.clipboard ) {\n    navigator.clipboard.writeText( code )\n      .then( onSuccess )\n      .catch( () => execCopy( code, onSuccess ) );\n  } else {\n    execCopy( code, onSuccess );\n  }\n}\n\n/**\n * Attempts to copy the provided code by the `document.execCommand()` for old browsers.\n * Note that this method is deprecated.\n *\n * @param code      - Code to copy.\n * @param onSuccess - Called after the copy is done.\n */\nfunction execCopy( code: string, onSuccess: () => void ): void {\n  const textarea = create( 'textarea' );\n  textarea.textContent = code;\n\n  styles( textarea, { position: 'absolute', left: '-99999px' } );\n  append( document.body, textarea );\n\n  textarea.focus();\n  textarea.select();\n\n  let failed;\n\n  try {\n    document.execCommand( 'copy' );\n  } catch ( e ) {\n    alert( 'Failed to copy.' );\n    failed = true;\n  }\n\n  document.body.removeChild( textarea );\n\n  if ( ! failed ) {\n    onSuccess();\n  }\n}\n\n/**\n * Toggles the active class of the button.\n *\n * @param button   - A button element.\n * @param duration - Duration for the button activation.\n */\nfunction toggleClass( button: HTMLButtonElement, duration: number ): void {\n  addClass( button, ACTIVE );\n\n  const prop = '_rlTimer';\n\n  if ( button[ prop ] ) {\n    clearTimeout( button[ prop ] );\n  }\n\n  button[ prop ] = setTimeout( () => {\n    button.classList.remove( ACTIVE );\n  }, duration );\n}\n","import { append }   from '../append/append';\nimport { addClass } from '../addClass/addClass';\n\n\n/**\n * Creates an HTML element.\n *\n * @param tag     - A tag name.\n * @param classes - Optional. Classes to add.\n * @param parent  - Optional. A parent element where the created element is appended.\n */\nexport function create<K extends keyof HTMLElementTagNameMap>(\n  tag: K,\n  classes?: string | string[],\n  parent?: HTMLElement\n): HTMLElementTagNameMap[ K ] {\n  const elm = document.createElement( tag );\n\n  if ( classes ) {\n    addClass( elm, classes );\n  }\n\n  if ( parent ) {\n    append( parent, elm );\n  }\n\n  return elm;\n}\n","import { CATEGORY_SPACE } from '../../constants/categories';\nimport { LINE_BREAK } from '../../constants/characters';\nimport { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { Renderer } from '../../core/Renderer/Renderer';\nimport { Token } from '../../types';\nimport { assign, isObject, startsWith } from '../../utils';\n\n\n/**\n * The class name for added lines.\n *\n * @private\n * @since 0.0.17\n */\nexport const CLASS_ADDED = 'is-added';\n\n/**\n * The class name for deleted lines.\n *\n * @private\n * @since 0.0.17\n */\nexport const CLASS_DELETED = 'is-deleted';\n\n/**\n * The class name for deleted lines.\n *\n * @private\n * @since 0.0.17\n */\nexport const CLASS_DIFF = `${ PROJECT_CODE_SHORT }__diff`;\n\n/**\n * Default options for the Diff component.\n *\n * @since 0.0.17\n */\nconst DEFAULT_OPTIONS = {\n  addedSymbol  : '+',\n  deletedSymbol: '-',\n};\n\n/**\n * The component for highlighting added/deleted lines.\n *\n * @since 0.0.17\n */\nexport function Diff( { event, lines, options }: Renderer ): void {\n  if ( ! options.diff ) {\n    return;\n  }\n\n  options.gutter = true;\n\n  const diffOptions = assign( {}, DEFAULT_OPTIONS, isObject( options.diff ) ? options.diff : null );\n  const added       = [];\n  const deleted     = [];\n\n  lines.forEach( ( tokens, index ) => {\n    if ( tokens.length ) {\n      const text = tokens[ 0 ][ 1 ];\n\n      let processed;\n\n      if ( startsWith( text, diffOptions.addedSymbol ) ) {\n        added.push( index );\n        processed = true;\n      } else if ( startsWith( text, diffOptions.deletedSymbol ) ) {\n        deleted.push( index );\n        processed = true;\n      }\n\n      if ( processed ) {\n        convertSymbols( diffOptions.removeSymbols, tokens );\n      }\n    }\n  } );\n\n  if ( ! added.length && ! deleted.length ) {\n    return;\n  }\n\n  event.on( 'line:open', ( append, classes, i ) => {\n    addClass( added, deleted, i, classes );\n  } );\n\n  event.on( 'gutter:row:open', ( append, classes, i ) => {\n    addClass( added, deleted, i, classes );\n  } );\n\n  event.on( 'gutter:row:opened', ( append, i ) => {\n    let content = LINE_BREAK;\n\n    if ( added.indexOf( i ) > -1 ) {\n      content = diffOptions.addedSymbol;\n    } else if ( deleted.indexOf( i ) > -1 ) {\n      content = diffOptions.deletedSymbol;\n    }\n\n    append( `<span class=\"${ CLASS_DIFF }\">${ content }</span>` );\n  }, 20 );\n\n  event.on( 'lineNumber:open', ( append, classes, i, data ) => {\n    data.skip = deleted.indexOf( i ) > -1;\n  } );\n}\n\n/**\n * Adds a status class according to the added or deleted lines.\n *\n * @param added   - An array with added line indices.\n * @param deleted - An array with deleted line indices.\n * @param index   - A line index.\n * @param classes - An array with line classes.\n */\nfunction addClass( added: number[], deleted: number[], index: number, classes: string[] ): void {\n  if ( added.indexOf( index ) > -1 ) {\n    classes.push( CLASS_ADDED );\n  } else if ( deleted.indexOf( index ) > -1 ) {\n    classes.push( CLASS_DELETED );\n  }\n}\n\n/**\n * Converts +/- symbols to spaces or removes them.\n *\n * @param remove - Whether to remove symbols or not.\n * @param tokens - Target tokens.\n */\nfunction convertSymbols( remove: boolean, tokens: Token[] ): void {\n  const [ category, text ] = tokens[ 0 ];\n\n  if ( remove ) {\n    if ( text.length === 1 ) {\n      tokens.shift();\n    } else {\n      tokens[ 0 ] = [ category, text.slice( 1 ) ];\n    }\n  } else {\n    const spaceToken: Token = [ CATEGORY_SPACE, ' ' ];\n\n    if ( text.length === 1 ) {\n      tokens[ 0 ] = spaceToken;\n    } else {\n      tokens[ 0 ] = [ category, text.slice( 1 ) ];\n      tokens.unshift( spaceToken );\n    }\n  }\n}\n","import { Renderer } from '../../core/Renderer/Renderer';\nimport { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { CODE } from '../../constants/classes';\nimport { styles, throttle, isHTMLElement, query } from '../../utils';\n\n\n/**\n * The throttle duration in milliseconds for resizing gutter rows.\n *\n * @since 0.0.1\n */\nconst THROTTLE_DURATION = 100;\n\n/**\n * The class name for a gutter element.\n *\n * @since 0.0.1\n */\nexport const GUTTER_CLASS_NAME = `${ PROJECT_CODE_SHORT }__gutter`;\n\n/**\n * The class name for row element in a gutter.\n *\n * @since 0.0.1\n */\nexport const GUTTER_ROW_CLASS_NAME = `${ GUTTER_CLASS_NAME }__row`;\n\n/**\n * The component for creating a gutter and its rows.\n * This is usually activated by other components through the `gutter` option.\n *\n * @since 0.0.1\n */\nexport function Gutter( { lines, event, root, options }: Renderer ): void {\n  // Wait for initialization of other components.\n  event.on( 'mounted', () => {\n    if ( ! options.gutter ) {\n      return;\n    }\n\n    event.on( 'open', ( append, classes ) => {\n      classes.push( 'has-gutter' );\n    } );\n\n    event.on( 'code:open', append => {\n      append( `<div class=\"${ GUTTER_CLASS_NAME }\" aria-hidden=\"true\">` );\n\n      for ( let i = 0; i < lines.length; i++ ) {\n        const classes = [ GUTTER_ROW_CLASS_NAME ];\n        event.emit( 'gutter:row:open', append, classes, i );\n\n        append( `<div class=\"${ classes.join( ' ' ) }\">` );\n        event.emit( 'gutter:row:opened', append, i );\n        append( `</div>` );\n      }\n\n      append( `</div>` );\n    } );\n\n    if ( ! root || typeof window === 'undefined' ) {\n      return;\n    }\n\n    window.addEventListener( 'resize', throttle( resize, THROTTLE_DURATION ) );\n    resize();\n\n    event.on( 'destroy', () => {\n      window.removeEventListener( 'resize', resize );\n    } );\n\n    /**\n     * Resizes rows according to line height.\n     */\n    function resize() {\n      const rows = root.getElementsByClassName( GUTTER_ROW_CLASS_NAME );\n      const code = query( `.${ CODE }`, root );\n\n      if ( rows.length && code ) {\n        for ( let i = 0; i < code.children.length; i++ ) {\n          const row  = rows[ i ];\n          const line = code.children[ i ];\n\n          if ( isHTMLElement( row ) && row.clientHeight !== line.clientHeight ) {\n            styles( row, { height: `${ line.clientHeight }px` } );\n          }\n        }\n      }\n    }\n  } );\n}\n","import { Language } from '../../types';\nimport { CATEGORY_PROLOG } from '../../constants/categories';\nimport { assign } from '../../utils';\nimport { html } from '../html/html';\n\n\n/**\n * Returns the XML language definition.\n *\n * @return A Language object.\n */\nexport function xml(): Language {\n  const language = assign( html(), {\n    id   : 'xml',\n    name : 'XML',\n    alias: [],\n  } );\n\n  language.grammar.main.unshift( [ CATEGORY_PROLOG, /<\\?.*?\\?>/s ] );\n\n  return language;\n}\n","import { PROJECT_CODE } from '../../../constants/project';\n\n\n/**\n * Displays an error message on the console.\n *\n * @param message - An error message.\n */\nexport function error( message: string ): void {\n  console.error( `[${ PROJECT_CODE }] ${ message }` );\n}\n","import { AnyFunction } from '../../../types';\n\n\n/**\n * Returns a function that invokes the provided function at most once in the specified duration.\n *\n * @since 0.0.1\n *\n * @param callback - A function to throttle.\n * @param interval - A throttle duration in milliseconds.\n *\n * @return A throttled function.\n */\nexport function throttle( callback: AnyFunction, interval: number ): () => void {\n  let timer;\n\n  return function () {\n    if ( ! timer ) {\n      timer = setTimeout( () => {\n        callback();\n        timer = null;\n      }, interval );\n    }\n  };\n}\n","import { Renderer } from '../../core/Renderer/Renderer';\nimport { PROJECT_CODE_SHORT } from '../../constants/project';\n\n\n/**\n * The component for rendering a language name.\n *\n * @since 0.0.1\n */\nexport function LanguageName( { event, info, options }: Renderer ) {\n  const { name } = info;\n\n  if ( options.languageName && name ) {\n    const position = options.languageName === 'topLeft' ? 'topLeft' : 'topRight';\n    options.overlay = options.overlay || {};\n    options.overlay[ position ] = true;\n\n    event.on( `overlay:${ position }`, append => {\n      append( `<span class=\"${ PROJECT_CODE_SHORT }__name\">${ info.name }</span>` );\n    } );\n  }\n}\n","import { LINE_BREAK } from '../../constants/characters';\nimport { Renderer } from '../../core/Renderer/Renderer';\nimport { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { attr } from '../../utils';\n\n\n/**\n * The data attribute name for line numbers.\n * This accepts boolean or number as a value.\n *\n * @private\n * @since 0.0.1\n */\nexport const ATTRIBUTE_LINE_NUMBERS = `data-${ PROJECT_CODE_SHORT }-line-numbers`;\n\n/**\n * The class name for each line number element.\n *\n * @private\n * @since 0.0.23\n */\nexport const LINE_NUMBER_CLASS_NAME = `${ PROJECT_CODE_SHORT }__line-number`;\n\n/**\n * The component for displaying line numbers in a gutter.\n *\n * @since 0.0.1\n */\nexport function LineNumbers( { root, event, options }: Renderer ): void {\n  const data   = root ? attr( root, ATTRIBUTE_LINE_NUMBERS ) : '';\n  const number = data === '' ? +options.lineNumbers : +data;\n\n  if ( number || number === 0 ) {\n    options.gutter = true;\n    let offset = Math.floor( number ) - 1;\n\n    event.on( 'gutter:row:opened', ( append, i ) => {\n      const classes = [ LINE_NUMBER_CLASS_NAME ];\n      const data    = { skip: false, content: i + 1 + offset };\n\n      event.emit( 'lineNumber:open', append, classes, i, data );\n\n      if ( data.skip ) {\n        data.content = LINE_BREAK;\n        offset--;\n      }\n\n      append( `<span class=\"${ classes.join( ' ' ) }\">${ data.content }</span>` );\n    } );\n  }\n}\n","import { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { Renderer } from '../../core/Renderer/Renderer';\nimport { EventBus } from '../../event/EventBus';\n\n\n/**\n * The component for rendering overlay and tools elements.\n *\n * @since 0.0.1\n */\nexport function Overlay( { event, options }: Renderer ) {\n  event.on( 'mounted', () => {\n    const { overlay = {} } = options;\n    const { tools } = options;\n    let { topRight, topLeft } = overlay;\n\n    topRight = topRight || tools === 'topRight';\n    topLeft  = topLeft || tools === 'topLeft';\n\n    [ topRight, topLeft ].forEach( ( active, index ) => {\n      if ( active ) {\n        if ( tools ) {\n          appendTools( event, index === 1 );\n        }\n\n        appendOverlay( event, index === 1 );\n      }\n    } );\n\n    if ( topRight || topLeft ) {\n      event.on( 'open', ( append, classes ) => {\n        classes.push( 'has-top-overlay' );\n      } );\n    }\n  } );\n}\n\n/**\n * Appends HTML for the overlay.\n *\n * @private\n *\n * @param event - The EventBus object.\n * @param left  - Optional. Set `true` for the left overlay.\n */\nfunction appendOverlay( event: EventBus, left?: boolean ) {\n  const className = `${ PROJECT_CODE_SHORT }__overlay`;\n\n  event.on( 'close', append => {\n    append( `<div class=\"${ className } ${ className }--top-${ left ? 'left' : 'right' }\">` );\n    event.emit( `overlay:top${ left ? 'Left' : 'Right' }`, append );\n    append( `</div>` );\n  } );\n}\n\n/**\n * Appends HTML for tools.\n *\n * @private\n *\n * @param event - The EventBus object.\n * @param left  - Optional. Set `true` for the left tools.\n */\nfunction appendTools( event: EventBus, left?: boolean ): void {\n  const position = left ? 'Left' : 'Right';\n\n  event.on( `overlay:top${ position }`, append => {\n    append( `<span class=\"${ PROJECT_CODE_SHORT }__tools\">` );\n    event.emit( `tools:top${ position }`, append );\n    append( `</span>` );\n  } );\n}\n","import { RyuseiLight } from '../core/RyuseiLight/RyuseiLight';\nimport * as components from '../components';\nimport { css, html, javascript, none, xml } from '../languages';\n\nRyuseiLight.register( [ none(), javascript(), html(), css(), xml() ] );\nRyuseiLight.compose( components );\n\nexport { RyuseiLight as default } from '../core/RyuseiLight/RyuseiLight';\n"],"names":["LINE_BREAK","CATEGORY_KEYWORD","CATEGORY_COMMENT","CATEGORY_SELECTOR","CATEGORY_PROPERTY","CATEGORY_PROLOG","CATEGORY_STRING","CATEGORY_NUMBER","CATEGORY_FUNCTION","CATEGORY_OPERATOR","CATEGORY_BRACKET","CATEGORY_DELIMITER","CATEGORY_SPACE","CATEGORY_TEXT","isObject","subject","isArray","Array","isString","isUndefined","isHTMLElement","HTMLElement","toArray","value","addClass","elm","classes","forEach","name","classList","add","append","parent","children","i","length","appendChild","forOwn","object","iteratee","keys","Object","assign","sources","source","key","attr","attrs","getAttribute","setAttribute","String","query","selector","document","querySelector","styles","style","tag","join","text","node","textContent","assert","condition","message","Error","PROJECT_CODE","startsWith","string","char","charAt","isStickySupported","sticky","Lexer","language","init","grammar","tokenizers","_this","merge","use","this","bind","merged","tokenizer","category","regexp","push","slice","flags","toString","match","replace","replacement","RegExp","parse","state","index","position","depth","main","aborted","action","lastIndex","exec","handle","token","start","from","indexOf","line","lines","empty","code","undefined","info","id","head","tail","split","distance","limit","console","log","lang","input","tokenize","ROOT","BODY","PROJECT_CODE_SHORT","CODE","TOKEN","ACTIVE","EventBus","on","event","callback","priority","handlers","sort","handler1","handler2","emit","args","handler","destroy","Components","Renderer","root","options","compose","components","Component","tokens","trim","pop","_this2","renderLines","tagName","span","j","categories","className","modifiers","map","sub","concat","html","pre","closeTag","fragment","containerClasses","bodyClasses","wrap","REGEXP_NUMBER","REGEXP_BOOLEAN","REGEXP_BRACKET","REGEXP_SPACE","REGEXP_QUOTE","REGEXP_DOUBLE_QUOTE","REGEXP_MULTILINE_COMMENT","REGEXP_SLASH_COMMENT","REGEXP_GENERAL_KEYWORDS","css","findBlock","findSingleAtrule","findAtrule","findSelector","common","block","inner","atrule","paren","url","props","javascript","alias","func","backtick","expression","script","cdata","unshift","tagContent","lexers","RyuseiLight","register","languages","getLexer","has","none","getRenderer","apply","target","elms","querySelectorAll","elmOptions","renderer","isPre","HTMLPreElement","innerHTML","renderers","ATTRIBUTE_ACTIVE_LINES","appendCaption","caption","bottom","DEFAULT_OPTIONS","activeHtml","duration","ariaLabel","execCopy","onSuccess","failed","textarea","createElement","create","left","body","focus","select","execCommand","e","alert","removeChild","addedSymbol","deletedSymbol","added","deleted","GUTTER_ROW_CLASS_NAME","GUTTER_CLASS_NAME","data","JSON","error","parseData","activeLines","numbers","range","end","normalize","attrCaption","captionOptions","copy","copyOptions","labelClass","tools","button","onClick","prop","clearTimeout","setTimeout","remove","toggleClass","navigator","clipboard","writeText","then","catch","addEventListener","removeEventListener","diff","gutter","diffOptions","processed","shift","spaceToken","convertSymbols","removeSymbols","content","skip","interval","timer","window","resize","rows","getElementsByClassName","row","clientHeight","height","languageName","overlay","number","lineNumbers","offset","Math","floor","topRight","topLeft","active","appendTools","appendOverlay"],"mappings":"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"}