{"version":3,"file":"ryuseilight-components.min.js","sources":["../../src/js/constants/categories.ts","../../src/js/utils/type/type.ts","../../src/js/utils/array/toArray/toArray.ts","../../src/js/utils/dom/addClass/addClass.ts","../../src/js/utils/dom/append/append.ts","../../src/js/utils/object/forOwn/forOwn.ts","../../src/js/utils/object/assign/assign.ts","../../src/js/utils/dom/attr/attr.ts","../../src/js/utils/dom/query/query.ts","../../src/js/utils/dom/styles/styles.ts","../../src/js/utils/dom/text/text.ts","../../src/js/utils/error/assert/assert.ts","../../src/js/constants/project.ts","../../src/js/utils/string/startsWith/startsWith.ts","../../src/js/core/Lexer/Lexer.ts","../../src/js/constants/characters.ts","../../src/js/event/EventBus.ts","../../src/js/constants/classes.ts","../../src/js/core/Renderer/Renderer.ts","../../src/js/utils/string/escapeHtml/escapeHtml.ts","../../src/js/constants/regexp.ts","../../src/js/languages/css/css.ts","../../src/js/languages/javascript/javascript.ts","../../src/js/languages/html/html.ts","../../src/js/core/RyuseiLight/RyuseiLight.ts","../../src/js/languages/none/none.ts","../../src/js/components/ActiveLines/ActiveLines.ts","../../src/js/components/Copy/Copy.ts","../../src/js/utils/dom/create/create.ts","../../src/js/languages/xml/xml.ts","../../src/js/utils/error/error/error.ts","../../src/js/components/Gutter/Gutter.ts","../../src/js/utils/function/throttle/throttle.ts","../../src/js/components/LanguageName/LanguageName.ts","../../src/js/components/LineNumbers/LineNumbers.ts","../../src/js/components/Overlay/Overlay.ts","../../src/js/components/Title/Title.ts","../../src/js/build/components.ts"],"sourcesContent":["export const CATEGORY_KEYWORD    = 'keyword';\nexport const CATEGORY_CONSTANT   = 'constant';\nexport const CATEGORY_COMMENT    = 'comment';\nexport const CATEGORY_TAG        = 'tag';\nexport const CATEGORY_SELECTOR   = 'selector';\nexport const CATEGORY_ATRULE     = 'atrule';\nexport const CATEGORY_ATTRIBUTE  = 'attr';\nexport const CATEGORY_PROPERTY   = 'prop';\nexport const CATEGORY_VALUE      = 'value';\nexport const CATEGORY_VARIABLE   = 'variable';\nexport const CATEGORY_ENTITY     = 'entity';\nexport const CATEGORY_CDATA      = 'cdata';\nexport const CATEGORY_PROLOG     = 'prolog';\nexport const CATEGORY_IDENTIFIER = 'identifier';\nexport const CATEGORY_STRING     = 'string';\nexport const CATEGORY_NUMBER     = 'number';\nexport const CATEGORY_BOOLEAN    = 'boolean';\nexport const CATEGORY_FUNCTION   = 'function';\nexport const CATEGORY_CLASS      = 'class';\nexport const CATEGORY_DECORATOR  = 'decorator';\nexport const CATEGORY_REGEXP     = 'regexp';\nexport const CATEGORY_OPERATOR   = 'operator';\nexport const CATEGORY_BRACKET    = 'bracket';\nexport const CATEGORY_DELIMITER  = 'delimiter';\nexport const CATEGORY_SYMBOL     = 'symbol';\nexport const CATEGORY_SPACE      = 'space';\nexport const CATEGORY_TEXT       = 'text';\n","/**\n * Checks if the given subject is an object or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an object, or otherwise `false`.\n */\nexport function isObject<T extends object>( subject: any ): subject is T {\n  return subject !== null && typeof subject === 'object';\n}\n\n/**\n * Checks if the given subject is an array or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an array, or otherwise `false`.\n */\nexport function isArray<T>( subject: any ): subject is T[] {\n  return Array.isArray( subject );\n}\n\n/**\n * Checks if the given subject is a function or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is a function, or otherwise `false`.\n */\nexport function isFunction( subject: any ): subject is ( ...args: any[] ) => any {\n  return typeof subject === 'function';\n}\n\n/**\n * Checks if the given subject is a string or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is a string, or otherwise `false`.\n */\nexport function isString( subject: any ): subject is string {\n  return typeof subject === 'string';\n}\n\n/**\n * Checks if the given subject is `undefined` or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is `undefined`, or otherwise `false`.\n */\nexport function isUndefined( subject: any ): subject is undefined {\n  return typeof subject === 'undefined';\n}\n\n/**\n * Checks if the given subject is an HTMLElement instance or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an HTMLElement instance, or otherwise `false`.\n */\nexport function isHTMLElement( subject: any ): subject is HTMLElement {\n  return subject instanceof HTMLElement;\n}\n","import { isArray } from '../../type/type';\n\n\n/**\n * Push the provided value to an array only if the value is not an array.\n *\n * @param value - A value to push.\n *\n * @return An array containing the value, or the value itself if it is already an array.\n */\nexport function toArray<T>( value: T | T[] ): T[] {\n  return isArray<T>( value ) ? value : [ value ];\n}\n","import { toArray } from '../../array';\n\n\n/**\n * Adds classes to the element.\n *\n * @param elm     - An element to add classes to.\n * @param classes - Classes to add.\n */\nexport function addClass( elm: HTMLElement, classes: string | string[] ): void {\n  toArray( classes ).forEach( name => {\n    if ( name ) {\n      elm.classList.add( name );\n    }\n  } );\n}\n","import { toArray } from '../../array';\n\n\n/**\n * Appends children to the parent element.\n *\n * @param parent   - A parent element.\n * @param children - A child or children to append to the parent.\n */\nexport function append( parent: HTMLElement, children: Node | Node[] ): void {\n  children = toArray<Node>( children );\n\n  for ( let i = 0; i < children.length; i++ ) {\n    parent.appendChild( children[ i ] );\n  }\n}\n","/**\n * Iterates over the provided object by own enumerable keys with calling the iteratee function.\n *\n * @param object   - An object to iterate over.\n * @param iteratee - An iteratee function that takes the value and key as arguments.\n *\n * @return A provided object itself.\n */\nexport function forOwn<T extends object>( object: T, iteratee: ( value: T[ keyof T ], key: string ) => void ) {\n  if ( object ) {\n    const keys = Object.keys( object );\n\n    for ( let i = 0; i < keys.length; i++ ) {\n      iteratee( object[ keys[ i ] ], keys[ i ] );\n    }\n  }\n}\n","import { isObject, isUndefined } from '../../type/type';\nimport { forOwn } from '../forOwn/forOwn';\n\n\n/**\n * Assign U to T.\n *\n * @typeParam T - An object to assign to.\n * @typeParam U - An object to assign.\n *\n * @return An assigned object type.\n */\nexport type Assign<T, U> = Omit<T, keyof U> & U;\n\nexport function assign<T extends object>( object: T ): T;\n\n// There is a way to type arguments recursively, but these fixed definitions are enough for this project.\nexport function assign<T extends object, U extends object>( object: T, source: U ): Assign<T, U>;\n\nexport function assign<T extends object, U1 extends object, U2 extends object>(\n  object: T, source1: U1, source2: U2\n): Assign<Assign<T, U1>, U2>;\n\nexport function assign<T extends object, U1 extends object, U2 extends object, U3 extends object>(\n  object: T, source1: U1, source2: U2, source3: U3\n): Assign<Assign<Assign<T, U1>, U2>, U3>;\n\n/**\n * Assigns all own enumerable properties of all source objects to the provided object.\n * `undefined` in source objects will be skipped.\n *\n * @param object  - An object to assign properties to.\n * @param sources - Objects to assign properties from.\n *\n * @return An object assigned properties of the sources to.\n */\nexport function assign<T extends object, U extends object>( object: T, ...sources: U[] ): any {\n  sources.forEach( source => {\n    if ( isObject( source ) ) {\n      forOwn( source, ( value, key ) => {\n        if ( ! isUndefined( source[ key ] ) ) {\n          object[ key ] = source[ key ];\n        }\n      } );\n    }\n  } );\n\n  return object;\n}\n","import { forOwn } from '../../object';\nimport { isObject, isString } from '../../type/type';\n\n\nexport function attr( elm: Element, attrs: string ): string;\nexport function attr( elm: Element, attrs: Record<string, string | number | boolean> ): void;\n\n/**\n * Sets new attributes to the passed element if the `attrs` is an object literal,\n * or gets an attribute value from it if the `attrs` is a string.\n *\n * @param elm   - An element to set or get an attribute.\n * @param attrs - An attribute name as a string or new attributes as an object literal.\n */\nexport function attr( elm: Element, attrs: string | Record<string, string | number | boolean> ): string | void {\n  if ( isString( attrs ) ) {\n    return elm.getAttribute( attrs ) || '';\n  }\n\n  if ( isObject( attrs ) ) {\n    forOwn( attrs, ( value, key ) => {\n      elm.setAttribute( key, String( value ) );\n    } );\n  }\n}\n","/**\n * Returns an element that matches the provided selector.\n *\n * @param selector - A selector.\n * @param parent   - Optional. A parent element to start searching elements from.\n *\n * @return A found element or `null`.\n */\nexport function query<E extends Element = HTMLElement>(\n  selector: string,\n  parent: HTMLElement | Document = document\n): E | null {\n  return parent.querySelector<E>( selector );\n}\n","import { forOwn } from '../../object';\n\n\n/**\n * Applies inline styles to the provided element by an object literal.\n *\n * @param elm    - An element to apply styles to.\n * @param styles - An object literal with styles.\n */\nexport function styles( elm: HTMLElement, styles: Record<string, string | number> ): void {\n  forOwn( styles, ( value, key ) => {\n    elm.style[ key ] = String( value );\n  } );\n}\n","import { isUndefined } from '../../type/type';\n\n\nexport function text( node: Node ): string;\nexport function text( node: Node, text: string ): void;\n\n/**\n * Sets or gets a text content of the provided node.\n *\n * @param node - A node to get or set a text.\n * @param text - Optional. A text to set.\n */\nexport function text( node: Node, text?: string ): string | void {\n  if ( isUndefined( text ) ) {\n    return node.textContent;\n  }\n\n  node.textContent = text;\n}\n","/**\n * Throws an error if the provided condition is falsy.\n *\n * @param condition - If falsy, an error is thrown.\n * @param message   - Optional. A message for the error.\n */\nexport function assert( condition: any, message = '' ): void {\n  if ( ! condition ) {\n    throw new Error( message );\n  }\n}\n","/**\n * The project code name.\n *\n * @since 0.0.1\n */\nexport const PROJECT_CODE = 'ryuseilight';\n\n/**\n * The abbreviated project code.\n *\n * @since 0.0.1\n */\nexport const PROJECT_CODE_SHORT = 'rl';\n","/**\n * Checks if the string starts with the `char` or not.\n *\n * @param string - A string to check.\n * @param char   - A character.\n *\n * @return `true` if the string starts with the `char`, or otherwise `false`.\n */\nexport function startsWith( string: string, char: string ): boolean {\n  return string.charAt( 0 ) === char;\n}\n","import { Language, Token, Tokenizer } from '../../types';\nimport { LINE_BREAK } from '../../constants/characters';\nimport { CATEGORY_TEXT } from '../../constants/categories';\nimport { assert, forOwn, isUndefined, startsWith } from '../../utils';\n\n\n/**\n * Checks if the RegExp supports the sticky flag or not.\n */\nconst isStickySupported = ! isUndefined( /x/.sticky );\n\n/**\n * The class for creating a simple lexer by a Language object.\n *\n * @since 0.0.1\n */\nexport class Lexer {\n  /**\n   * Holds the Language object.\n   */\n  readonly language: Language;\n\n  /**\n   * Stores lines.\n   */\n  protected lines: Token[][];\n\n  /**\n   * Indicates the current line index.\n   */\n  protected index: number;\n\n  /**\n   * The Lexer constructor.\n   *\n   * @param language - A Language object.\n   */\n  constructor( language: Language ) {\n    this.language = language;\n    this.init( language );\n  }\n\n  /**\n   * Initializes the language object.\n   *\n   * @param language - A Language object to initialize.\n   */\n  protected init( language: Language ): void {\n    forOwn( language.grammar, ( tokenizers, key ) => {\n      language.grammar[ key ] = this.merge( language, tokenizers );\n    } );\n\n    forOwn( language.use, this.init.bind( this ) );\n  }\n\n  /**\n   * Includes tokenizers required by `#` annotation and flatten them.\n   *\n   * @param language   - A language object.\n   * @param tokenizers - Tokenizers.\n   *\n   * @return Merged tokenizers.\n   */\n  protected merge( language: Language, tokenizers: Tokenizer[] ): Tokenizer[] {\n    return tokenizers.reduce( ( merged, tokenizer ) => {\n      const [ category, regexp ] = tokenizer;\n\n      if ( startsWith( category, '#' ) && ! regexp ) {\n        const include = language.grammar[ category.slice( 1 ) ];\n        assert( include );\n        merged.push( ...this.merge( language, include ) );\n      } else {\n        const flags = regexp.toString().match( /[gimsy]*$/ )[ 0 ].replace( /[gy]/g, '' );\n        let source = regexp.source + ( isStickySupported ? '' : '|()' );\n\n        forOwn( language.source, ( replacement, key ) => {\n          source = source.replace( new RegExp( `%${ key }`, 'g' ), replacement.source );\n        } );\n\n        tokenizer[ 1 ] = new RegExp( source, ( isStickySupported ? 'y' : 'g' ) + flags );\n        merged.push( tokenizer );\n      }\n\n      return merged;\n    }, [] );\n  }\n\n  /**\n   * Tokenizes the text by the provided language and tokenizers.\n   *\n   * @param text       - A text to tokenize.\n   * @param language   - A Grammar object.\n   * @param tokenizers - An array with tokenizers.\n   *\n   * @return An index of the text where the handling ends.\n   */\n  protected tokenizeBy( text: string, language: Language, tokenizers: Tokenizer[] ): number {\n    let index    = 0;\n    let position = 0;\n\n    main:\n    while ( index < text.length ) {\n      for ( let i = 0; i < tokenizers.length; i++ ) {\n        const tokenizer = tokenizers[ i ];\n        const regexp    = tokenizer[ 1 ];\n        const command   = tokenizer[ 2 ];\n\n        regexp.lastIndex = index;\n\n        const match = regexp.exec( text );\n\n        if ( ! match || ! match[ 0 ] ) {\n          continue;\n        }\n\n        if ( position < index ) {\n          this.push( [ CATEGORY_TEXT, text.slice( position, index ) ] );\n        }\n\n        if ( command === '@back' ) {\n          position = index;\n          break main;\n        }\n\n        const offset = this.handle( match, language, tokenizers[ i ] );\n\n        index += offset || 1;\n        position = index;\n\n        if ( command === '@break' ) {\n          break main;\n        }\n\n        continue main;\n      }\n\n      index++;\n    }\n\n    if ( position < index ) {\n      this.push( [ CATEGORY_TEXT, text.slice( position ) ] );\n    }\n\n    return index;\n  }\n\n  /**\n   * Pushes the provided token to the lines array.\n   *\n   * @param token - A token to push.\n   */\n  protected push( token: Token ): void {\n    const [ category ] = token;\n\n    let index;\n    let from = 0;\n    let text = token[ 1 ];\n\n    while ( ( index = text.indexOf( LINE_BREAK, from ) ) > -1 ) {\n      if ( from < index ) {\n        this.lines[ this.index ].push( [ category, text.slice( from, index ) ] );\n      }\n\n      from = index + 1;\n      this.lines[ ++this.index ] = [];\n    }\n\n    text = text.slice( from );\n\n    if ( text ) {\n      this.lines[ this.index ].push( [ category, text ] );\n    }\n  }\n\n  /**\n   * Handles the matched text.\n   *\n   * @param match     - A matched result.\n   * @param language  - A Language object.\n   * @param tokenizer - A tokenizer that has been matched with the text.\n   *\n   * @return An index of the text where the handling ends.\n   */\n  protected handle( match: RegExpExecArray, language: Language, tokenizer: Tokenizer ): number {\n    const [ category ] = tokenizer;\n    let offset = 0;\n\n    if ( category ) {\n      const [ text ] = match;\n\n      if ( tokenizer[ 3 ] === '@debug' ) {\n        // eslint-disable-next-line\n        console.log( text, tokenizer );\n      }\n\n      if ( startsWith( category, '@' ) ) {\n        assert( language.use );\n\n        const lang = language.use[ category.slice( 1 ) ];\n        assert( lang );\n\n        return this.tokenizeBy( text, lang, lang.grammar.main );\n      }\n\n      if ( startsWith( category, '#' ) ) {\n        const tokenizers = language.grammar[ category.slice( 1 ) ];\n        assert( tokenizers );\n\n        const value = tokenizer[ 2 ] === '@rest' ? match.input.slice( match.index ) : text;\n        return this.tokenizeBy( value, language, tokenizers );\n      }\n\n      offset = text.length;\n      this.push( [ category, text ] );\n    }\n\n    return offset;\n  }\n\n  /**\n   * Tokenizes the text by the current language.\n   *\n   * @param text  - A text to tokenize.\n   *\n   * @return An array with tokens.\n   */\n  tokenize( text: string ): Token[][] {\n    this.lines = [ [] ];\n    this.index = 0;\n\n    this.tokenizeBy( text, this.language, this.language.grammar.main );\n\n    return this.lines;\n  }\n}\n","/**\n * The line break character.\n *\n * @private\n * @since 0.0.1\n */\nexport const LINE_BREAK = '\\n';\n","import { AnyFunction } from '../types';\n\n\n/**\n * The class for providing the very simple event bus.\n *\n * @private\n * @since 0.0.1\n */\nexport class EventBus {\n  /**\n   * Holds handlers.\n   */\n  protected handlers = {};\n\n  /**\n   * Attaches a handler.\n   *\n   * @param event    - An event name.\n   * @param callback - A callback function to register.\n   */\n  on( event: string, callback: AnyFunction ): void {\n    const handlers = ( this.handlers[ event ] = this.handlers[ event ] || [] );\n    handlers.push( { callback } );\n  }\n\n  /**\n   * Emits an event.\n   *\n   * @param event - An event name.\n   * @param args  - Optional. Any number of arguments to pass to callbacks.\n   */\n  emit( event, ...args ): void {\n    ( this.handlers[ event ] || [] ).forEach( handler => {\n      handler.callback( ...args );\n    } );\n  }\n\n  /**\n   * Destroys the event bus.\n   */\n  destroy(): void {\n    this.handlers = {};\n  }\n}\n","import { PROJECT_CODE, PROJECT_CODE_SHORT } from './project';\n\n\n/**\n * The collection of class names.\n *\n * @since 0.0.1\n */\nexport const CLASSES = {\n  root     : PROJECT_CODE,\n  container: `${ PROJECT_CODE_SHORT }__container`,\n  body     : `${ PROJECT_CODE_SHORT }__body`,\n  code     : `${ PROJECT_CODE_SHORT }__code`,\n  line     : `${ PROJECT_CODE_SHORT }__line`,\n  token    : `${ PROJECT_CODE_SHORT }__token`,\n  active   : 'is-active',\n};\n","import { LINE_BREAK } from '../../constants/characters';\nimport { Options, LanguageInfo, Token, Component } from '../../types';\nimport { EventBus } from '../../event/EventBus';\nimport { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { CLASSES } from '../../constants/classes';\nimport { forOwn, escapeHtml } from '../../utils';\n\n\n/**\n * Stores all Component functions.\n */\nconst Components: Record<string, Component> = {};\n\n/**\n * The class for highlighting code via provided tokens.\n *\n * @since 0.0.1\n */\nexport class Renderer {\n  /**\n   * Adds components.\n   *\n   * @param components - An object literal with Component functions.\n   */\n  static compose( components: Record<string, Component> ): void {\n    forOwn( components, ( Component, name ) => {\n      Components[ name ] = Component;\n    } );\n  }\n\n  /**\n   * Holds lines with tokens.\n   */\n  readonly lines = [];\n\n  /**\n   * Holds the language info.\n   */\n  readonly info: LanguageInfo;\n\n  /**\n   * Holds the root element if provided.\n   */\n  readonly root: HTMLElement | undefined;\n\n  /**\n   * Holds options.\n   */\n  readonly options: Options;\n\n  /**\n   * Holds the EventBus instance.\n   */\n  readonly event: EventBus = new EventBus();\n\n  /**\n   * The Renderer constructor.\n   *\n   * @param lines   - Lines with tokens to render.\n   * @param info    - The language info object.\n   * @param root    - Optional. A root element to highlight.\n   * @param options - Options.\n   */\n  constructor( lines: Token[][], info: LanguageInfo, root?: HTMLElement, options: Options = {} ) {\n    this.lines   = lines;\n    this.info    = info;\n    this.root    = root;\n    this.options = options;\n\n    this.init();\n  }\n\n  /**\n   * Initializes the instance.\n   */\n  protected init(): void {\n    const { lines } = this;\n\n    if ( lines.length ) {\n      const tokens = lines[ lines.length - 1 ];\n\n      if ( ! tokens.length || ( tokens.length === 1 && ! tokens[ 0 ][ 1 ].trim() ) ) {\n        // Removes the last empty line.\n        lines.pop();\n      }\n    }\n\n    forOwn( Components, Component => {\n      Component( this );\n    } );\n\n    this.event.emit( 'mounted' );\n  }\n\n  /**\n   * Renders lines as HTML.\n   *\n   * @param append - A function to add fragments to the HTML string.\n   *\n   * @return A rendered HTML string.\n   */\n  protected renderLines( append: ( fragment: string ) => void ): void {\n    const event = this.event;\n    const tag   = this.options.span ? 'span' : 'code';\n\n    for ( let i = 0; i < this.lines.length; i++ ) {\n      const tokens  = this.lines[ i ];\n      const classes = [ CLASSES.line ];\n\n      event.emit( 'line:open', append, classes, i );\n      append( `<div class=\"${ classes.join( ' ' ) }\">` );\n\n      if ( tokens.length ) {\n        for ( let j = 0; j < tokens.length; j++ ) {\n          const token   = tokens[ j ];\n          const classes = [ `${ CLASSES.token } ${ PROJECT_CODE_SHORT }__${ token[ 0 ] }` ];\n\n          event.emit( 'token', token, classes );\n\n          append( `<${ tag } class=\"${ classes.join( ' ' ) }\">${ escapeHtml( token[ 1 ] ) }</${ tag }>` );\n        }\n      } else {\n        append( LINE_BREAK );\n      }\n\n      append( '</div>' );\n      event.emit( 'line:closed', append, i );\n    }\n  }\n\n  /**\n   * Returns all lines and wrapper elements.\n   *\n   * @param pre - Whether to wrap elements by `pre` or not.\n   *\n   * @return An HTML string.\n   */\n  html( pre: boolean ): string {\n    const event = this.event;\n    let html  = '';\n\n    const append = ( fragment: string ) => { html += fragment };\n\n    if ( pre ) {\n      html += `<pre class=\"${ CLASSES.root } ${ CLASSES.root }--${ this.info.id }\">`;\n    }\n\n    const containerClasses = [ CLASSES.container ];\n    event.emit( 'open', append, containerClasses );\n\n    html += `<div class=\"${ containerClasses.join( ' ' ) }\">`;\n    event.emit( 'opened', append );\n\n    const bodyClasses = [ `${ CLASSES.body }${ this.options.wrap ? ` ${ CLASSES.body }--wrap` : '' }` ];\n    event.emit( 'body:open', append, bodyClasses );\n\n    html += `<div class=\"${ bodyClasses.join( ' ' ) }\">`;\n    event.emit( 'body:opened', append );\n\n    html += `<div class=\"${ CLASSES.code }\">`;\n    this.renderLines( append );\n    html += `</div>`; // code\n\n    event.emit( 'body:close', append );\n    html += `</div>`; // body\n\n    event.emit( 'close', append );\n    html += `</div>`; // container\n\n    event.emit( 'closed', append );\n\n    if ( pre ) {\n      html += `</pre>`;\n    }\n\n    return html;\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy(): void {\n    this.event.emit( 'destroy' );\n    this.event.destroy();\n  }\n}\n","/**\n * Converts essential HTML special characters to HTML entities.\n *\n * @param string - A string to escape.\n *\n * @return An escaped string.\n */\nexport function escapeHtml( string: string ): string {\n  return string.replace( /&/g, '&amp;' ).replace( /</g, '&lt;' );\n}\n","export const REGEXP_FLOAT = /\\d+\\.?\\d*|\\d*\\.?\\d+/;\n\nexport const REGEXP_NUMBER = /[+-]?(\\d+\\.?\\d*|\\d*\\.?\\d+)([eE][+-]?\\d+)?/;\n\nexport const REGEXP_BOOLEAN = /\\b(?:true|false)\\b/;\n\nexport const REGEXP_BRACKET = /[[\\]{}()]/;\n\nexport const REGEXP_SPACE = /[ \\t]+/;\n\nexport const REGEXP_QUOTE = /'(?:\\\\'|.)*?'/;\n\nexport const REGEXP_DOUBLE_QUOTE = /\"(?:\\\\\"|.)*?\"/;\n\nexport const REGEXP_MULTILINE_COMMENT = /\\/\\*[\\s\\S]*?\\*\\//;\n\nexport const REGEXP_SLASH_COMMENT = /\\/\\/.*/;\n\nexport const REGEXP_GENERAL_KEYWORDS = /\\b(?:break|catch|class|continue|do|else|extends|finally|for|function|if|implements|in|instanceof|interface|new|null|return|throw|try|while)\\b/;\n","import { Language } from '../../types';\nimport {\n  CATEGORY_BRACKET,\n  CATEGORY_COMMENT,\n  CATEGORY_FUNCTION,\n  CATEGORY_KEYWORD,\n  CATEGORY_NUMBER,\n  CATEGORY_OPERATOR,\n  CATEGORY_PROPERTY,\n  CATEGORY_SELECTOR,\n  CATEGORY_SPACE,\n  CATEGORY_STRING,\n  CATEGORY_DELIMITER,\n  CATEGORY_TAG,\n  CATEGORY_ATRULE,\n} from '../../constants/categories';\nimport { REGEXP_MULTILINE_COMMENT, REGEXP_SPACE } from '../../constants/regexp';\n\n\n/**\n * Returns the CSS language definition.\n *\n * @return A Language object.\n */\nexport function css(): Language {\n  return {\n    id  : 'css',\n    name: 'CSS',\n\n    grammar: {\n      main: [\n        [ '#common' ],\n\n        // An atrule without a block\n        [ '#findSingleAtrule' ],\n\n        // Blocks including atrules\n        [ '#findBlock' ],\n      ],\n\n      findBlock: [\n        [ '#block', /[^\\s;{}][^;{}]*{.*?}/s, '@rest' ],\n      ],\n\n      findSingleAtrule: [\n        [ '#atrule', /@[^{;]+?;/s ],\n      ],\n\n      // Finds atrules before { and ;\n      findAtrule: [\n        [ '#atrule', /@[^{;]*?(?=[{;])/s ],\n      ],\n\n      // May not start with digits\n      findSelector: [\n        [ '#selector', /[^\\s{};].*?(?={)/s ],\n      ],\n\n      common: [\n        [ CATEGORY_STRING, /(['\"]).*?[^\\\\]\\1/s ],\n        [ CATEGORY_COMMENT, REGEXP_MULTILINE_COMMENT ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n      ],\n\n      block: [\n        [ '#inner', /{/, '@rest' ],\n        [ CATEGORY_BRACKET, /}/, '@break' ],\n        [ '#findAtrule' ],\n        [ '#findSelector' ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n      ],\n\n      inner: [\n        [ CATEGORY_BRACKET, /{/ ],\n        [ '#common' ],\n        [ '#findBlock' ],\n        [ '#props' ],\n        [ '#findAtrule' ],\n        [ '', /}/, '@back' ],\n      ],\n\n      atrule: [\n        [ '#common' ],\n        [ '#url', /\\burl\\(/, '@rest' ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n        [ CATEGORY_ATRULE, /[^\\s();]+/ ],\n        [ CATEGORY_DELIMITER, /[:;,]/ ],\n        [ '#paren', /\\(/, '@rest' ],\n      ],\n\n      paren: [\n        [ CATEGORY_BRACKET, /^\\(/ ],\n        [ '#common' ],\n        [ '#paren', /\\(/, '@rest' ],\n        [ CATEGORY_BRACKET, /\\)/, '@break' ],\n        [ '#props' ],\n      ],\n\n      selector: [\n        [ '#common' ],\n        [ CATEGORY_OPERATOR, /[>+~]/ ],\n        [ CATEGORY_BRACKET, /[[\\]()]/ ],\n        [ CATEGORY_DELIMITER, /=/ ],\n        [ CATEGORY_SELECTOR, /::?\\S+/ ],\n        [ CATEGORY_SELECTOR, /[\\W\\d]\\S+/ ],\n        [ CATEGORY_TAG, /\\b[a-z]+|\\*/i ],\n        [ CATEGORY_SELECTOR, /\\S+/ ],\n      ],\n\n      url: [\n        [ '#common' ],\n        [ CATEGORY_FUNCTION, /^url/ ],\n        [ CATEGORY_BRACKET, /\\(/ ],\n        [ CATEGORY_STRING, /[^)]+/ ],\n        [ CATEGORY_BRACKET, /\\)/, '@break' ],\n      ],\n\n      props: [\n        [ CATEGORY_PROPERTY, /[a-z0-9-_\\xA0-\\uFFFF]+(?=:)/i ],\n        [ '#url', /\\burl\\(/, '@rest' ],\n        [ CATEGORY_FUNCTION, /\\b[\\w-]+(?=\\()\\b/ ],\n        [ CATEGORY_KEYWORD, /!important|\\b(?:initial|inherit|unset)/ ],\n        [ CATEGORY_PROPERTY, /[a-z0-9-]+(?=:)/ ],\n        [ CATEGORY_NUMBER, /#([0-9a-f]{6}|[0-9a-f]{3})/i ],\n        [ CATEGORY_NUMBER, /\\bU\\+[0-9a-f?-]+/i ],\n        [ CATEGORY_NUMBER, /[+-]?(\\d+\\.?\\d*|\\d*\\.?\\d+)/ ],\n        [ CATEGORY_DELIMITER, /[:;,]/ ],\n        [ '#paren', /\\(/, '@rest' ],\n        [ CATEGORY_BRACKET, /[[\\])]/ ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n      ],\n    },\n  };\n}\n","import {\n  REGEXP_BOOLEAN, REGEXP_BRACKET, REGEXP_DOUBLE_QUOTE, REGEXP_GENERAL_KEYWORDS, REGEXP_MULTILINE_COMMENT,\n  REGEXP_NUMBER, REGEXP_QUOTE, REGEXP_SLASH_COMMENT, REGEXP_SPACE,\n} from '../../constants/regexp';\nimport { Language } from '../../types';\nimport {\n  CATEGORY_DELIMITER, CATEGORY_DECORATOR, CATEGORY_KEYWORD, CATEGORY_REGEXP, CATEGORY_STRING,\n  CATEGORY_OPERATOR, CATEGORY_COMMENT, CATEGORY_CLASS, CATEGORY_FUNCTION, CATEGORY_BOOLEAN,\n  CATEGORY_IDENTIFIER, CATEGORY_NUMBER, CATEGORY_BRACKET, CATEGORY_SPACE,\n} from '../../constants/categories';\n\n\n/**\n * Returns the JavaScript language definition.\n *\n * @return A Language object.\n */\nexport function javascript(): Language {\n  return {\n    id   : 'javascript',\n    name : 'JavaScript',\n    alias: [ 'js' ],\n\n    source: {\n      func: /[_$a-z\\xA0-\\uFFFF][_$a-z0-9\\xA0-\\uFFFF]*/,\n    },\n\n    grammar: {\n      main: [\n        [ CATEGORY_STRING, REGEXP_QUOTE ],\n        [ CATEGORY_STRING, REGEXP_DOUBLE_QUOTE ],\n        [ '#backtick', /`/, '@rest' ],\n        [ CATEGORY_COMMENT, REGEXP_MULTILINE_COMMENT ],\n        [ CATEGORY_COMMENT, REGEXP_SLASH_COMMENT ],\n        [ CATEGORY_REGEXP, /\\/(\\[.*[^\\\\]?]|\\\\\\/|.)+?\\/[gimsuy]*/ ],\n        [ CATEGORY_KEYWORD, REGEXP_GENERAL_KEYWORDS ],\n        [ CATEGORY_KEYWORD, /\\b(?:as|async|await|case|catch|const|debugger|default|delete|enum|export|from|import|let|package|private|protected|public|super|switch|static|this|typeof|undefined|var|void|with|yield)\\b/ ],\n        [ CATEGORY_KEYWORD, /\\b((get|set)(?=\\s+%func))/i ],\n        [ CATEGORY_CLASS, /\\b[A-Z][\\w$]*\\b/ ],\n        [ CATEGORY_FUNCTION, /%func(?=\\s*\\()/i ],\n        [ CATEGORY_BOOLEAN, REGEXP_BOOLEAN ],\n        [ CATEGORY_DECORATOR, /@[^\\s(@]+/ ],\n        [ CATEGORY_IDENTIFIER, /\\b[a-z_$][\\w$]*\\b/ ],\n        [ CATEGORY_NUMBER, REGEXP_NUMBER ],\n        [ CATEGORY_OPERATOR, /=>/ ],\n        [ CATEGORY_OPERATOR, /\\+[+=]?|-[-=]?|\\*\\*?=?|[/%^]=?|&&?=?|\\|\\|?=?|\\?\\??=?|<<?=?|>>>=?|>>?=?|[!=]=?=?|[~:^]/ ],\n        [ CATEGORY_BRACKET, REGEXP_BRACKET ],\n        [ CATEGORY_DELIMITER, /[;.,]+/ ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n      ],\n\n      backtick: [\n        [ CATEGORY_STRING, /^`/ ],\n        [ CATEGORY_STRING, /(\\$[^{]|\\\\[$`]|[^`$])+/ ],\n        [ '#expression', /\\${/, '@rest' ],\n        [ CATEGORY_STRING, /`/, '@break' ],\n      ],\n\n      expression: [\n        [ CATEGORY_DELIMITER, /^\\${/ ],\n        [ CATEGORY_DELIMITER, /}/, '@break' ],\n        [ '#main' ],\n      ],\n    },\n  };\n}\n","import {\r\n  CATEGORY_ATTRIBUTE,\r\n  CATEGORY_BRACKET,\r\n  CATEGORY_CDATA,\r\n  CATEGORY_COMMENT,\r\n  CATEGORY_ENTITY,\r\n  CATEGORY_PROLOG,\r\n  CATEGORY_SPACE,\r\n  CATEGORY_DELIMITER,\r\n  CATEGORY_TAG,\r\n  CATEGORY_VALUE,\r\n} from '../../constants/categories';\r\nimport { REGEXP_SPACE } from '../../constants/regexp';\r\nimport { Language, Tokenizer } from '../../types';\r\nimport { css } from '../css/css';\r\nimport { javascript } from '../javascript/javascript';\r\n\r\n\r\n/**\r\n * The HTML language options.\r\n *\r\n * @since 0.0.12\r\n */\r\nexport interface HtmlOptions {\r\n  /**\r\n   * The language for tokenizing script blocks.\r\n   */\r\n  script?: () => Language;\r\n\r\n  /**\r\n   * The language for tokenizing style blocks.\r\n   */\r\n  style?: () => Language;\r\n}\r\n\r\n/**\r\n * Returns the HTML language definition.\r\n *\r\n * @param options - Optional. Options.\r\n *\r\n * @return A Language object.\r\n */\r\nexport function html( options: HtmlOptions = {} ): Language {\r\n  const script = ( options.script || javascript )();\r\n  const style  = ( options.style || css )();\r\n  const cdata  = [ CATEGORY_CDATA, /<!\\[CDATA\\[.*]]>/is ] as Tokenizer;\r\n\r\n  // Embedded scripts or styles may contain CDATA sections.\r\n  script.grammar.main.unshift( cdata );\r\n  style.grammar.main.unshift( cdata );\r\n\r\n  return {\r\n    id   : 'html',\r\n    alias: [ 'markup' ],\r\n    name : 'HTML',\r\n    use  : { script, style },\r\n\r\n    grammar: {\r\n      main: [\r\n        [ CATEGORY_COMMENT, /<!--.*?-->/s ],\r\n        [ CATEGORY_PROLOG, /<!DOCTYPE.*?>/is ],\r\n        cdata,\r\n        [ '#script', /<script.*?>.*?<\\/script>/s ],\r\n        [ '#style', /<style.*?>.*?<\\/style>/s ],\r\n        [ '#tag', /<.*?>/s ],\r\n        [ CATEGORY_ENTITY, /&[\\da-z]+;|&#\\d+;/i ],\r\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\r\n      ],\r\n\r\n      cdata: [\r\n        [ CATEGORY_CDATA, /<!\\[CDATA\\[.*]]>/is ],\r\n      ],\r\n\r\n      script: [\r\n        [ '#tag', /^<script.*?>/s ],\r\n        [ '#cdata' ],\r\n        [ '@script', /.+(?=<\\/script>)/s ],\r\n        [ '#tag', /<\\/script>/ ],\r\n      ],\r\n\r\n      style: [\r\n        [ '#tag', /^<style.*?>/s ],\r\n        [ '@style', /.+(?=<\\/style>)/s ],\r\n        [ '#tag', /<\\/style>/ ],\r\n      ],\r\n\r\n      tag: [\r\n        [ '#attr', /\\s+.+(?=[\\s/>])/s ],\r\n        [ CATEGORY_TAG, /[^\\s/<>\"'=]+/ ],\r\n        [ CATEGORY_BRACKET, /[<>]/ ],\r\n        [ CATEGORY_DELIMITER, /[/]/ ],\r\n      ],\r\n\r\n      attr: [\r\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\r\n        [ CATEGORY_VALUE, /(['\"])(\\\\\\1|.)*?\\1/ ],\r\n        [ CATEGORY_DELIMITER, /[/=]/ ],\r\n        [ CATEGORY_ATTRIBUTE, /[^\\s/>\"'=]+/ ],\r\n      ],\r\n    },\r\n  };\r\n}\r\n","import { Language, Options, Token } from '../../types';\nimport { Lexer } from '../Lexer/Lexer';\nimport { Renderer } from '../Renderer/Renderer';\nimport { CLASSES } from '../../constants/classes';\nimport { ATTRIBUTE_LANGUAGE } from '../../constants/attributes';\nimport { attr, isHTMLElement, text, assert, isString, assign, addClass, toArray } from '../../utils';\nimport { none } from '../../languages';\n\n\n/**\n * Stores all Lexer instances.\n */\nconst lexers: Record<string, Lexer> = {};\n\n/**\n * The class that tokenizes code for syntax highlighting.\n *\n * @since 0.0.1\n */\nexport class RyuseiLight {\n  /**\n   * Registers languages.\n   *\n   * @param languages - A Language object or objects.\n   */\n  static register( languages: Language | Language[] ): void {\n    toArray( languages ).forEach( language => {\n      const { id } = language;\n\n      if ( id && ! lexers[ id ] ) {\n        ( language.alias || [] ).concat( id ).forEach( id => {\n          lexers[ id ] = new Lexer( language );\n        } );\n      }\n    } );\n  }\n\n  /**\n   * Adds components.\n   *\n   * @param components - An object literal with Component functions.\n   */\n  static compose = Renderer.compose;\n\n  /**\n   * Tokenizes the provided string.\n   *\n   * @param code     - A string to tokenize.\n   * @param language - A language ID.\n   *\n   * @return An array of arrays with tokens as [ string, string ].\n   */\n  static tokenize( code: string, language: string ): Token[][] {\n    return RyuseiLight.getLexer( language ).tokenize( code );\n  }\n\n  /**\n   * Checks if the given language has been already registered or not.\n   *\n   * @param language - A language to check.\n   */\n  static has( language: string ): boolean {\n    return !! lexers[ language ];\n  }\n\n  /**\n   * Returns a registered Lexer instance.\n   * If it's not found, the `none` lexer will be returned.\n   *\n   * @param language - A language name.\n   */\n  protected static getLexer( language: string ) {\n    if ( ! lexers.none ) {\n      RyuseiLight.register( none() );\n    }\n\n    return lexers[ language ] || lexers.none;\n  }\n\n  /**\n   * Holds all renderers.\n   */\n  protected readonly renderers: Renderer[] = [];\n\n  /**\n   * Holds options.\n   */\n  protected readonly options: Options;\n\n  /**\n   * The RyuseiLight constructor.\n   *\n   * @param options  - Optional. Options.\n   */\n  constructor( options?: Options ) {\n    this.options = assign( {}, options );\n  }\n\n  /**\n   * Returns a new Renderer instance.\n   *\n   * @param code    - A code to highlight.\n   * @param elm     - Optional. An element to highlight.\n   * @param options - Optional. Options.\n   */\n  protected getRenderer( code: string, elm?: HTMLElement, options?: Options ) {\n    options = assign( {}, this.options, options );\n\n    const language     = options.language;\n    const { name, id } = RyuseiLight.getLexer( language ).language;\n    return new Renderer( RyuseiLight.tokenize( code, language ), { name, id }, elm, options );\n  }\n\n  /**\n   * Applies the highlighter to elements that matches the selector or the provided element.\n   *\n   * @param target  - A selector or an element.\n   * @param options - Optional. Options.\n   */\n  apply( target: string | Element, options?: Options ): void {\n    const elms = isString( target ) ? document.querySelectorAll( target ) : [ target ];\n\n    for ( let i = 0; i < elms.length; i++ ) {\n      const elm = elms[ i ];\n\n      if ( isHTMLElement( elm ) ) {\n        const elmOptions = assign( {}, options, { language: attr( elm, ATTRIBUTE_LANGUAGE ) || undefined } );\n        const renderer   = this.getRenderer( text( elm ), elm, elmOptions );\n        const isPre      = elm instanceof HTMLPreElement;\n\n        if ( isPre ) {\n          addClass( elm, [ CLASSES.root, `${ CLASSES.root }--${ renderer.info.id }` ] );\n        }\n\n        elm.innerHTML = renderer.html( ! isPre );\n\n        renderer.event.emit( 'applied', elm );\n        this.renderers.push( renderer );\n      }\n    }\n  }\n\n  /**\n   * Returns highlighted HTML by tokenizing the provided code.\n   *\n   * @param code    - Code to highlight.\n   * @param options - Optional. Options.\n   *\n   * @return Highlighted HTML string.\n   */\n  html( code: string, options?: Options ): string {\n    assert( isString( code ), 'Invalid code.' );\n    return this.getRenderer( code, null, options ).html( true );\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy(): void {\n    this.renderers.forEach( renderer => {\n      renderer.destroy();\n    } );\n  }\n}\n","import { Language } from '../../types';\n\n\n/**\n * Returns the None language definition.\n *\n * @return A Language object.\n */\nexport function none(): Language {\n  return {\n    id     : 'none',\n    name   : '',\n    grammar: { main: [] },\n  };\n}\n","import { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { Renderer } from '../../core/Renderer/Renderer';\nimport { CLASSES } from '../../constants/classes';\nimport { attr, error, isArray } from '../../utils';\n\n\n/**\n * The data attribute name for active lines.\n * The value must be an array in JSON format, such as \"[ 2, [ 5, 10 ] ]\"\n *\n * @since 0.0.1\n */\nconst ATTRIBUTE_ACTIVE_LINES = `data-${ PROJECT_CODE_SHORT }-active-lines`;\n\n/**\n * The component for highlighting lines.\n *\n * @since 0.0.1\n */\nexport function ActiveLines( { event, root, options }: Renderer ): void {\n  const lines = ( root && parseData( root ) ) || options.activeLines;\n\n  if ( isArray( lines ) ) {\n    const activeLines = normalize( lines );\n\n    event.on( 'gutter:row:open', ( html, classes, index ) => {\n      if ( activeLines[ index ] ) {\n        classes.push( activeLines[ index ] );\n      }\n    } );\n\n    event.on( 'line:open', ( html, classes, index ) => {\n      if ( activeLines[ index ] ) {\n        classes.push( activeLines[ index ] );\n      }\n    } );\n  }\n}\n\n/**\n * Attempts to get definition of active lines from a data attribute.\n *\n * @param elm - A root element.\n *\n * @return An array with line numbers if available, or otherwise `undefined`.\n */\nfunction parseData( elm: HTMLElement ): Array<number | [ number, number ]> | void {\n  const data = attr( elm, ATTRIBUTE_ACTIVE_LINES );\n\n  if ( data ) {\n    try {\n      return JSON.parse( data );\n    } catch ( e ) {\n      error( e.message );\n    }\n  }\n}\n\n/**\n * Normalizes the definition of lines to activate.\n *\n * @param lines - An array with line numbers.\n *\n * @return An array with normalized line numbers.\n */\nfunction normalize( lines: Array<number | [ number, number ]> ): string[] {\n  const numbers = [];\n\n  lines.forEach( range => {\n    if ( ! isArray( range ) ) {\n      range = [ range, range ];\n    }\n\n    const start = ( +range[ 0 ] || 1 ) - 1;\n    const end   = ( +range[ 1 ] || 1 ) - 1;\n\n    for ( let i = start; i <= end; i++ ) {\n      numbers[ i ] = CLASSES.active;\n    }\n  } );\n\n  return numbers;\n}\n","import { Renderer } from '../../core/Renderer/Renderer';\nimport { LINE_BREAK } from '../../constants/characters';\nimport { CLASSES } from '../../constants/classes';\nimport { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { addClass, append, assign, create, isObject, query, styles } from '../../utils';\n\n\n/**\n * Default options for the Copy component.\n *\n * @since 0.0.1\n */\nconst DEFAULT_OPTIONS = {\n  html      : 'Copy',\n  activeHtml: 'Done',\n  duration  : 1000,\n  ariaLabel : 'Copy code to clipboard',\n};\n\n/**\n * The component for creating a copy button and handling click.\n *\n * @since 0.0.1\n */\nexport function Copy( { lines, event, options }: Renderer ): void {\n  if ( options.copy ) {\n    const copyOptions = assign( {}, DEFAULT_OPTIONS, isObject( options.copy ) ? options.copy : {} );\n    const buttonClass = `${ PROJECT_CODE_SHORT }__copy`;\n    const labelClass  = `${ PROJECT_CODE_SHORT }__button__label`;\n\n    options.tools = true;\n\n    event.on( `overlay:tools`, append => {\n      append( `<button type=\"button\" class=\"rl__button ${ buttonClass }\" aria-label=\"Copy code to clipboard\">` );\n      append( `<span class=\"${ labelClass } ${ labelClass }--inactive\">${ copyOptions.html }</span>` );\n      append( `<span class=\"${ labelClass } ${ labelClass }--active\">${ copyOptions.activeHtml }</span>` );\n      append( `</button>` );\n    } );\n\n    event.on( 'applied', root => {\n      const button = query<HTMLButtonElement>( `.${ buttonClass }`, root );\n      const code   = lines.map( line => line.map( token => token[ 1 ] ).join( '' ) ).join( LINE_BREAK );\n\n      if ( button ) {\n        const onClick = () => { copy( code, button, copyOptions.duration ) };\n        button.addEventListener( 'click', onClick );\n\n        event.on( 'destroy', () => {\n          button.removeEventListener( 'click', onClick );\n        } );\n      }\n    } );\n  }\n}\n\n/**\n * Attempts to copy the provided code by the Clipboard API.\n *\n * @param code     - A code to copy.\n * @param button   - A button element.\n * @param duration - Duration for the button activation.\n */\nfunction copy( code: string, button: HTMLButtonElement, duration: number ): void {\n  const onSuccess = () => {\n    if ( duration ) {\n      toggleClass( button, duration );\n    }\n  };\n\n  if ( navigator.clipboard ) {\n    navigator.clipboard.writeText( code )\n      .then( onSuccess )\n      .catch( () => execCopy( code, onSuccess ) );\n  } else {\n    execCopy( code, onSuccess );\n  }\n}\n\n/**\n * Attempts to copy the provided code by the `document.execCommand()` for old browsers.\n * Note that this method is deprecated.\n *\n * @param code      - Code to copy.\n * @param onSuccess - Called after the copy is done.\n */\nfunction execCopy( code: string, onSuccess: () => void ): void {\n  const textarea = create( 'textarea' );\n  textarea.textContent = code;\n\n  styles( textarea, { position: 'absolute', left: '-99999px' } );\n  append( document.body, textarea );\n\n  textarea.focus();\n  textarea.select();\n\n  let failed;\n\n  try {\n    document.execCommand( 'copy' );\n  } catch ( e ) {\n    alert( 'Failed to copy.' );\n    failed = true;\n  }\n\n  document.body.removeChild( textarea );\n\n  if ( ! failed ) {\n    onSuccess();\n  }\n}\n\n/**\n * Toggles the active class of the button.\n *\n * @param button   - A button element.\n * @param duration - Duration for the button activation.\n */\nfunction toggleClass( button: HTMLButtonElement, duration: number ): void {\n  addClass( button, CLASSES.active );\n\n  const prop = '_rlTimer';\n\n  if ( button[ prop ] ) {\n    clearTimeout( button[ prop ] );\n  }\n\n  button[ prop ] = setTimeout( () => {\n    button.classList.remove( CLASSES.active );\n  }, duration );\n}\n","import { append }   from '../append/append';\nimport { addClass } from '../addClass/addClass';\n\n\n/**\n * Creates an HTML element.\n *\n * @param tag     - A tag name.\n * @param classes - Optional. Classes to add.\n * @param parent  - Optional. A parent element where the created element is appended.\n */\nexport function create<K extends keyof HTMLElementTagNameMap>(\n  tag: K,\n  classes?: string | string[],\n  parent?: HTMLElement\n): HTMLElementTagNameMap[ K ] {\n  const elm = document.createElement( tag );\n\n  if ( classes ) {\n    addClass( elm, classes );\n  }\n\n  if ( parent ) {\n    append( parent, elm );\n  }\n\n  return elm;\n}\n","import { Language } from '../../types';\nimport { CATEGORY_PROLOG } from '../../constants/categories';\nimport { assign } from '../../utils';\nimport { html } from '../html/html';\n\n\n/**\n * Returns the XML language definition.\n *\n * @return A Language object.\n */\nexport function xml(): Language {\n  const language = assign( html(), {\n    id   : 'xml',\n    name : 'XML',\n    alias: [],\n  } );\n\n  language.grammar.main.unshift( [ CATEGORY_PROLOG, /<\\?.*?\\?>/s ] );\n\n  return language;\n}\n","import { PROJECT_CODE } from '../../../constants/project';\n\n\n/**\n * Displays an error message on the console.\n *\n * @param message - An error message.\n */\nexport function error( message: string ): void {\n  console.error( `[${ PROJECT_CODE }] ${ message }` );\n}\n","import { Renderer } from '../../core/Renderer/Renderer';\nimport { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { CLASSES } from '../../constants/classes';\nimport { styles, throttle, isHTMLElement, query } from '../../utils';\n\n\n/**\n * The throttle duration in milliseconds for resizing gutter rows.\n *\n * @since 0.0.1\n */\nconst THROTTLE_DURATION = 100;\n\n/**\n * The class name for a gutter element.\n *\n * @since 0.0.1\n */\nconst GUTTER_CLASS_NAME = `${ PROJECT_CODE_SHORT }__gutter`;\n\n/**\n * The class name for row element in a gutter.\n *\n * @since 0.0.1\n */\nconst GUTTER_ROW_CLASS_NAME = `${ GUTTER_CLASS_NAME }__row`;\n\n/**\n * The component for creating a gutter and its rows.\n * This is usually activated by other components through the `gutter` option.\n *\n * @since 0.0.1\n */\nexport function Gutter( { lines, event, root, options }: Renderer ): void {\n  // Wait for initialization of other components.\n  event.on( 'mounted', () => {\n    if ( ! options.gutter ) {\n      return;\n    }\n\n    event.on( 'open', ( append, classes ) => {\n      classes.push( 'has-gutter' );\n    } );\n\n    event.on( 'body:opened', append => {\n      append( `<div class=\"${ GUTTER_CLASS_NAME }\" aria-hidden=\"true\">` );\n\n      for ( let i = 0; i < lines.length; i++ ) {\n        const classes = [ GUTTER_ROW_CLASS_NAME ];\n        event.emit( 'gutter:row:open', append, classes, i );\n\n        append( `<div class=\"${ classes.join( ' ' ) }\">` );\n        event.emit( 'gutter:row:opened', append, i );\n        append( `</div>` );\n      }\n\n      append( `</div>` );\n    } );\n\n    if ( ! root || typeof window === 'undefined' ) {\n      return;\n    }\n\n    window.addEventListener( 'resize', throttle( resize, THROTTLE_DURATION ) );\n    resize();\n\n    event.on( 'destroy', () => {\n      window.removeEventListener( 'resize', resize );\n    } );\n\n    /**\n     * Resizes rows according to line height.\n     */\n    function resize() {\n      const gutter = query( `.${ GUTTER_CLASS_NAME }`, root );\n      const code   = query( `.${ CLASSES.code }`, root );\n\n      if ( gutter && code ) {\n        for ( let i = 0; i < code.children.length; i++ ) {\n          const row  = gutter.children[ i ];\n          const line = code.children[ i ];\n\n          if ( isHTMLElement( row ) && row.clientHeight !== line.clientHeight ) {\n            styles( row, { height: `${ line.clientHeight }px` } );\n          }\n        }\n      }\n    }\n  } );\n}\n","import { AnyFunction } from '../../../types';\n\n\n/**\n * Returns a function that invokes the provided function at most once in the specified duration.\n *\n * @since 0.0.1\n *\n * @param callback - A function to throttle.\n * @param interval - A throttle duration in milliseconds.\n *\n * @return A throttled function.\n */\nexport function throttle( callback: AnyFunction, interval: number ): () => void {\n  let timer;\n\n  return function () {\n    if ( ! timer ) {\n      timer = setTimeout( () => {\n        callback();\n        timer = null;\n      }, interval );\n    }\n  };\n}\n","import { Renderer } from '../../core/Renderer/Renderer';\nimport { PROJECT_CODE_SHORT } from '../../constants/project';\n\n\n/**\n * The component for rendering a language name.\n *\n * @since 0.0.1\n */\nexport function LanguageName( { event, info, options }: Renderer ) {\n  const { name } = info;\n\n  if ( options.languageName && name ) {\n    const position = options.languageName === 'topLeft' ? 'topLeft' : 'topRight';\n    options.overlay = options.overlay || {};\n    options.overlay[ position ] = true;\n\n    event.on( `overlay:${ position }`, append => {\n      append( `<span class=\"${ PROJECT_CODE_SHORT }__name\">${ info.name }</span>` );\n    } );\n  }\n}\n","import { Renderer } from '../../core/Renderer/Renderer';\nimport { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { attr } from '../../utils';\n\n\n/**\n * The data attribute name for line numbers.\n * This accepts boolean or number as a value.\n *\n * @since 0.0.1\n */\nconst ATTRIBUTE_LINE_NUMBERS = `data-${ PROJECT_CODE_SHORT }-line-numbers`;\n\n/**\n * The component for displaying line numbers in a gutter.\n *\n * @since 0.0.1\n */\nexport function LineNumbers( { root, event, options }: Renderer ): void {\n  const data   = root ? attr( root, ATTRIBUTE_LINE_NUMBERS ) : '';\n  const number = data === '' ? +options.lineNumbers : +data;\n\n  if ( number || number === 0 ) {\n    options.gutter = true;\n    const start = Math.floor( number ) - 1;\n\n    event.on( 'gutter:row:opened', ( append, i ) => {\n      append( `<span class=\"${ PROJECT_CODE_SHORT }__line-number\">${ i + 1 + start }</span>` );\n    } );\n  }\n}\n","import { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { Renderer } from '../../core/Renderer/Renderer';\n\n\n/**\n * The component for rendering overlay elements.\n *\n * @since 0.0.1\n */\nexport function Overlay( { event, options }: Renderer ) {\n  event.on( 'mounted', () => {\n    const className = `${ PROJECT_CODE_SHORT }__overlay`;\n    const { overlay = {} } = options;\n\n    if ( overlay.topRight || options.tools ) {\n      event.on( 'close', append => {\n        append( `<div class=\"${ className } ${ className }--top-right\">` );\n        event.emit( 'overlay:topRight', append );\n\n        if ( options.tools ) {\n          append( `<span class=\"${ PROJECT_CODE_SHORT }__tools\">` );\n          event.emit( 'overlay:tools', append );\n          append( `</span>` );\n        }\n\n        append( `</div>` );\n      } );\n    }\n\n    if ( overlay.topLeft ) {\n      event.on( 'close', append => {\n        append( `<div class=\"${ className } ${ className }--top-left\">` );\n        event.emit( 'overlay:topLeft', append );\n        append( `</div>` );\n      } );\n    }\n\n    if ( overlay.topRight || overlay.topLeft ) {\n      event.on( 'open', ( append, classes ) => {\n        classes.push( 'has-top-overlay' );\n      } );\n    }\n  } );\n}\n","import { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { Renderer } from '../../core/Renderer/Renderer';\nimport { attr } from '../../utils';\n\n\n/**\n * The data attribute name for a title.\n *\n * @since 0.0.1\n */\nconst ATTRIBUTE_TITLE = `data-${ PROJECT_CODE_SHORT }-title`;\n\n/**\n * The component for rendering a title in a header.\n *\n * @since 0.0.1\n */\nexport function Title( { event, root, options }: Renderer ) {\n  const title = ( root && attr( root, ATTRIBUTE_TITLE ) ) || options.title;\n\n  if ( title ) {\n    event.on( 'open', append => {\n      append( `<div class=\"${ PROJECT_CODE_SHORT }__header\">` );\n      append( `<span class=\"${ PROJECT_CODE_SHORT }__title\">${ title }</span>` );\n      append( `</div>` );\n    } );\n  }\n}\n","import { RyuseiLight } from '../core/RyuseiLight/RyuseiLight';\nimport * as components from '../components';\nimport { css, html, javascript, none, xml } from '../languages';\n\nRyuseiLight.register( [ none(), javascript(), html(), css(), xml() ] );\nRyuseiLight.compose( components );\n\nexport { RyuseiLight as default } from '../core/RyuseiLight/RyuseiLight';\n"],"names":["CATEGORY_KEYWORD","CATEGORY_COMMENT","CATEGORY_SELECTOR","CATEGORY_PROPERTY","CATEGORY_CDATA","CATEGORY_PROLOG","CATEGORY_STRING","CATEGORY_NUMBER","CATEGORY_FUNCTION","CATEGORY_OPERATOR","CATEGORY_BRACKET","CATEGORY_DELIMITER","CATEGORY_SPACE","CATEGORY_TEXT","isObject","subject","isArray","Array","isString","isUndefined","isHTMLElement","HTMLElement","toArray","value","addClass","elm","classes","forEach","name","classList","add","append","parent","children","i","length","appendChild","forOwn","object","iteratee","keys","Object","assign","sources","source","key","attr","attrs","getAttribute","setAttribute","String","query","selector","document","querySelector","styles","style","text","node","textContent","assert","condition","message","Error","PROJECT_CODE","startsWith","string","char","charAt","isStickySupported","sticky","Lexer","language","init","grammar","tokenizers","_this","merge","use","this","bind","reduce","merged","tokenizer","category","regexp","include","slice","push","_this2","flags","toString","match","replace","replacement","RegExp","tokenizeBy","index","position","main","command","lastIndex","exec","handle","token","from","indexOf","lines","offset","console","log","lang","input","tokenize","EventBus","on","event","callback","handlers","emit","args","handler","destroy","CLASSES","root","container","PROJECT_CODE_SHORT","body","code","line","active","Components","Renderer","info","options","compose","components","Component","tokens","trim","pop","_this3","renderLines","tag","span","join","j","html","pre","fragment","id","containerClasses","bodyClasses","wrap","REGEXP_NUMBER","REGEXP_BOOLEAN","REGEXP_BRACKET","REGEXP_SPACE","REGEXP_QUOTE","REGEXP_DOUBLE_QUOTE","REGEXP_MULTILINE_COMMENT","REGEXP_SLASH_COMMENT","REGEXP_GENERAL_KEYWORDS","css","findBlock","findSingleAtrule","findAtrule","findSelector","common","block","inner","atrule","paren","url","props","javascript","alias","func","backtick","expression","script","cdata","unshift","lexers","RyuseiLight","register","languages","concat","getLexer","has","none","getRenderer","apply","target","elms","querySelectorAll","elmOptions","undefined","renderer","isPre","HTMLPreElement","innerHTML","renderers","ATTRIBUTE_ACTIVE_LINES","DEFAULT_OPTIONS","activeHtml","duration","ariaLabel","execCopy","onSuccess","failed","textarea","createElement","left","focus","select","execCommand","e","alert","removeChild","data","JSON","parse","error","parseData","activeLines","numbers","range","start","end","normalize","copy","copyOptions","labelClass","tools","button","map","onClick","prop","clearTimeout","setTimeout","remove","toggleClass","navigator","clipboard","writeText","then","catch","addEventListener","removeEventListener","interval","timer","gutter","GUTTER_CLASS_NAME","window","resize","row","clientHeight","height","languageName","overlay","number","lineNumbers","Math","floor","topRight","topLeft","title"],"mappings":"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"}