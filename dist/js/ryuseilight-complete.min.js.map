{"version":3,"file":"ryuseilight-complete.min.js","sources":["../../src/js/constants/characters.ts","../../src/js/constants/categories.ts","../../src/js/utils/type/type.ts","../../src/js/utils/array/toArray/toArray.ts","../../src/js/utils/dom/addClass/addClass.ts","../../src/js/utils/dom/append/append.ts","../../src/js/utils/object/forOwn/forOwn.ts","../../src/js/utils/object/assign/assign.ts","../../src/js/utils/dom/attr/attr.ts","../../src/js/utils/dom/query/query.ts","../../src/js/utils/dom/styles/styles.ts","../../src/js/utils/dom/text/text.ts","../../src/js/utils/error/assert/assert.ts","../../src/js/constants/project.ts","../../src/js/utils/map/before/before.ts","../../src/js/utils/map/find/find.ts","../../src/js/utils/string/startsWith/startsWith.ts","../../src/js/core/Lexer/Lexer.ts","../../src/js/event/EventBus.ts","../../src/js/constants/classes.ts","../../src/js/core/Renderer/Renderer.ts","../../src/js/utils/string/escapeHtml/escapeHtml.ts","../../src/js/constants/regexp.ts","../../src/js/languages/css/css.ts","../../src/js/languages/javascript/javascript.ts","../../src/js/languages/html/html.ts","../../src/js/languages/jsx/jsx.ts","../../src/js/languages/none/none.ts","../../src/js/languages/xml/xml.ts","../../src/js/languages/typescript/typescript.ts","../../src/js/languages/json/json.ts","../../src/js/languages/scss/scss.ts","../../src/js/languages/svg/svg.ts","../../src/js/languages/tsx/tsx.ts","../../src/js/languages/vue/vue.ts","../../src/js/core/RyuseiLight/RyuseiLight.ts","../../src/js/components/ActiveLines/ActiveLines.ts","../../src/js/components/Caption/Caption.ts","../../src/js/components/Copy/Copy.ts","../../src/js/utils/dom/create/create.ts","../../src/js/components/Diff/Diff.ts","../../src/js/components/Gutter/Gutter.ts","../../src/js/utils/error/error/error.ts","../../src/js/utils/function/throttle/throttle.ts","../../src/js/components/LanguageName/LanguageName.ts","../../src/js/components/LineNumbers/LineNumbers.ts","../../src/js/components/Overlay/Overlay.ts","../../src/js/build/complete.ts"],"sourcesContent":["/**\n * The line break character.\n *\n * @private\n * @since 0.0.1\n */\nexport const LINE_BREAK = '\\n';\n","export const CATEGORY_KEYWORD    = 'keyword';\nexport const CATEGORY_CONSTANT   = 'constant';\nexport const CATEGORY_COMMENT    = 'comment';\nexport const CATEGORY_TAG        = 'tag';\nexport const CATEGORY_SELECTOR   = 'selector';\nexport const CATEGORY_ATRULE     = 'atrule';\nexport const CATEGORY_ATTRIBUTE  = 'attr';\nexport const CATEGORY_PROPERTY   = 'prop';\nexport const CATEGORY_VALUE      = 'value';\nexport const CATEGORY_VARIABLE   = 'variable';\nexport const CATEGORY_ENTITY     = 'entity';\nexport const CATEGORY_CDATA      = 'cdata';\nexport const CATEGORY_PROLOG     = 'prolog';\nexport const CATEGORY_IDENTIFIER = 'identifier';\nexport const CATEGORY_STRING     = 'string';\nexport const CATEGORY_NUMBER     = 'number';\nexport const CATEGORY_BOOLEAN    = 'boolean';\nexport const CATEGORY_FUNCTION   = 'function';\nexport const CATEGORY_CLASS      = 'class';\nexport const CATEGORY_DECORATOR  = 'decorator';\nexport const CATEGORY_REGEXP     = 'regexp';\nexport const CATEGORY_OPERATOR   = 'operator';\nexport const CATEGORY_BRACKET    = 'bracket';\nexport const CATEGORY_DELIMITER  = 'delimiter';\nexport const CATEGORY_SYMBOL     = 'symbol';\nexport const CATEGORY_SPACE      = 'space';\nexport const CATEGORY_TEXT       = 'text';\n","/**\n * Checks if the given subject is an object or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an object, or otherwise `false`.\n */\nexport function isObject<T extends object>( subject: any ): subject is T {\n  return subject !== null && typeof subject === 'object';\n}\n\n/**\n * Checks if the given subject is an array or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an array, or otherwise `false`.\n */\nexport function isArray<T>( subject: any ): subject is T[] {\n  return Array.isArray( subject );\n}\n\n/**\n * Checks if the given subject is a function or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is a function, or otherwise `false`.\n */\nexport function isFunction( subject: any ): subject is ( ...args: any[] ) => any {\n  return typeof subject === 'function';\n}\n\n/**\n * Checks if the given subject is a string or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is a string, or otherwise `false`.\n */\nexport function isString( subject: any ): subject is string {\n  return typeof subject === 'string';\n}\n\n/**\n * Checks if the given subject is `undefined` or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is `undefined`, or otherwise `false`.\n */\nexport function isUndefined( subject: any ): subject is undefined {\n  return typeof subject === 'undefined';\n}\n\n/**\n * Checks if the given subject is an HTMLElement instance or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an HTMLElement instance, or otherwise `false`.\n */\nexport function isHTMLElement( subject: any ): subject is HTMLElement {\n  return subject instanceof HTMLElement;\n}\n","import { isArray } from '../../type/type';\n\n\n/**\n * Push the provided value to an array only if the value is not an array.\n *\n * @param value - A value to push.\n *\n * @return An array containing the value, or the value itself if it is already an array.\n */\nexport function toArray<T>( value: T | T[] ): T[] {\n  return isArray<T>( value ) ? value : [ value ];\n}\n","import { toArray } from '../../array';\n\n\n/**\n * Adds classes to the element.\n *\n * @param elm     - An element to add classes to.\n * @param classes - Classes to add.\n */\nexport function addClass( elm: HTMLElement, classes: string | string[] ): void {\n  toArray( classes ).forEach( name => {\n    if ( name ) {\n      elm.classList.add( name );\n    }\n  } );\n}\n","import { toArray } from '../../array';\n\n\n/**\n * Appends children to the parent element.\n *\n * @param parent   - A parent element.\n * @param children - A child or children to append to the parent.\n */\nexport function append( parent: HTMLElement, children: Node | Node[] ): void {\n  children = toArray<Node>( children );\n\n  for ( let i = 0; i < children.length; i++ ) {\n    parent.appendChild( children[ i ] );\n  }\n}\n","/**\n * Iterates over the provided object by own enumerable keys with calling the iteratee function.\n *\n * @param object   - An object to iterate over.\n * @param iteratee - An iteratee function that takes the value and key as arguments.\n *\n * @return A provided object itself.\n */\nexport function forOwn<T extends object>( object: T, iteratee: ( value: T[ keyof T ], key: string ) => void ) {\n  if ( object ) {\n    const keys = Object.keys( object );\n\n    for ( let i = 0; i < keys.length; i++ ) {\n      iteratee( object[ keys[ i ] ], keys[ i ] );\n    }\n  }\n}\n","import { isObject, isUndefined } from '../../type/type';\nimport { forOwn } from '../forOwn/forOwn';\n\n\n/**\n * Assign U to T.\n *\n * @typeParam T - An object to assign to.\n * @typeParam U - An object to assign.\n *\n * @return An assigned object type.\n */\nexport type Assign<T, U> = Omit<T, keyof U> & U;\n\nexport function assign<T extends object>( object: T ): T;\n\n// There is a way to type arguments recursively, but these fixed definitions are enough for this project.\nexport function assign<T extends object, U extends object>( object: T, source: U ): Assign<T, U>;\n\nexport function assign<T extends object, U1 extends object, U2 extends object>(\n  object: T, source1: U1, source2: U2\n): Assign<Assign<T, U1>, U2>;\n\nexport function assign<T extends object, U1 extends object, U2 extends object, U3 extends object>(\n  object: T, source1: U1, source2: U2, source3: U3\n): Assign<Assign<Assign<T, U1>, U2>, U3>;\n\n/**\n * Assigns all own enumerable properties of all source objects to the provided object.\n * `undefined` in source objects will be skipped.\n *\n * @param object  - An object to assign properties to.\n * @param sources - Objects to assign properties from.\n *\n * @return An object assigned properties of the sources to.\n */\nexport function assign<T extends object, U extends object>( object: T, ...sources: U[] ): any {\n  sources.forEach( source => {\n    if ( isObject( source ) ) {\n      forOwn( source, ( value, key ) => {\n        if ( ! isUndefined( source[ key ] ) ) {\n          object[ key ] = source[ key ];\n        }\n      } );\n    }\n  } );\n\n  return object;\n}\n","import { forOwn } from '../../object';\nimport { isObject, isString } from '../../type/type';\n\n\nexport function attr( elm: Element, attrs: string ): string;\nexport function attr( elm: Element, attrs: Record<string, string | number | boolean> ): void;\n\n/**\n * Sets new attributes to the passed element if the `attrs` is an object literal,\n * or gets an attribute value from it if the `attrs` is a string.\n *\n * @param elm   - An element to set or get an attribute.\n * @param attrs - An attribute name as a string or new attributes as an object literal.\n */\nexport function attr( elm: Element, attrs: string | Record<string, string | number | boolean> ): string | void {\n  if ( isString( attrs ) ) {\n    return elm.getAttribute( attrs ) || '';\n  }\n\n  if ( isObject( attrs ) ) {\n    forOwn( attrs, ( value, key ) => {\n      elm.setAttribute( key, String( value ) );\n    } );\n  }\n}\n","/**\n * Returns an element that matches the provided selector.\n *\n * @param selector - A selector.\n * @param parent   - Optional. A parent element to start searching elements from.\n *\n * @return A found element or `null`.\n */\nexport function query<E extends Element = HTMLElement>(\n  selector: string,\n  parent: HTMLElement | Document = document\n): E | null {\n  return parent.querySelector<E>( selector );\n}\n","import { forOwn } from '../../object';\n\n\n/**\n * Applies inline styles to the provided element by an object literal.\n *\n * @param elm    - An element to apply styles to.\n * @param styles - An object literal with styles.\n */\nexport function styles( elm: HTMLElement, styles: Record<string, string | number> ): void {\n  forOwn( styles, ( value, key ) => {\n    elm.style[ key ] = String( value );\n  } );\n}\n","import { isUndefined } from '../../type/type';\n\n\nexport function text( node: Node ): string;\nexport function text( node: Node, text: string ): void;\n\n/**\n * Sets or gets a text content of the provided node.\n *\n * @param node - A node to get or set a text.\n * @param text - Optional. A text to set.\n */\nexport function text( node: Node, text?: string ): string | void {\n  if ( isUndefined( text ) ) {\n    return node.textContent;\n  }\n\n  node.textContent = text;\n}\n","/**\n * Throws an error if the provided condition is falsy.\n *\n * @param condition - If falsy, an error is thrown.\n * @param message   - Optional. A message for the error.\n */\nexport function assert( condition: any, message = '' ): void {\n  if ( ! condition ) {\n    throw new Error( message );\n  }\n}\n","/**\n * The project code name.\n *\n * @since 0.0.1\n */\nexport const PROJECT_CODE = 'ryuseilight';\n\n/**\n * The abbreviated project code.\n *\n * @since 0.0.1\n */\nexport const PROJECT_CODE_SHORT = 'rl';\n","import { MapEntry } from '../types';\nimport { find } from '../find/find';\n\n\n/**\n * Insert entries before the reference entry specified by the `ref`.\n * If the reference is not found, a new entry is created.\n *\n * @param map     - A map to insert values to.\n * @param ref     - A reference key.\n * @param entries - entries to insert.\n */\nexport function before<T extends any>( map: MapEntry<T>[], ref: string, entries: MapEntry<T>[] ): void {\n  const index = find( map, ref );\n\n  if ( index > -1 ) {\n    map.splice( index, 0, ...entries );\n  } else {\n    map.push( ...entries );\n  }\n}\n","import { MapEntry } from '../types';\n\n\n/**\n * Finds the provided key from a map and returns its index.\n *\n * @param map - A map to search in.\n * @param key - A key to search for.\n *\n * @return An index if found, or `-1` otherwise.\n */\nexport function find<T extends any>( map: MapEntry<T>[], key: string ): number {\n  for ( let i = 0; i < map.length; i++ ) {\n    if ( map[ i ][ 0 ] === key ) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n","/**\n * Checks if the string starts with the `char` or not.\n *\n * @param string - A string to check.\n * @param char   - A character.\n *\n * @return `true` if the string starts with the `char`, or otherwise `false`.\n */\nexport function startsWith( string: string, char: string ): boolean {\n  return string.charAt( 0 ) === char;\n}\n","import { Language, Token, Tokenizer } from '../../types';\nimport { LINE_BREAK } from '../../constants/characters';\nimport { CATEGORY_TEXT } from '../../constants/categories';\nimport { assert, forOwn, isUndefined, startsWith } from '../../utils';\n\n\n/**\n * Checks if the RegExp supports the sticky flag or not.\n */\nconst isStickySupported = ! isUndefined( /x/.sticky );\n\n/**\n * The class for creating a simple lexer by a Language object.\n *\n * @since 0.0.1\n */\nexport class Lexer {\n  /**\n   * Holds the Language object.\n   */\n  readonly language: Language;\n\n  /**\n   * Stores lines.\n   */\n  protected lines: Token[][];\n\n  /**\n   * Indicates the current line index.\n   */\n  protected index: number;\n\n  /**\n   * The Lexer constructor.\n   *\n   * @param language - A Language object.\n   */\n  constructor( language: Language ) {\n    this.language = language;\n    this.init( language );\n  }\n\n  /**\n   * Initializes the language object.\n   *\n   * @param language - A Language object to initialize.\n   */\n  protected init( language: Language ): void {\n    forOwn( language.grammar, ( tokenizers, key ) => {\n      language.grammar[ key ] = this.merge( language, tokenizers );\n    } );\n\n    forOwn( language.use, this.init.bind( this ) );\n  }\n\n  /**\n   * Includes tokenizers required by `#` annotation and flatten them.\n   *\n   * @param language   - A language object.\n   * @param tokenizers - Tokenizers.\n   *\n   * @return Merged tokenizers.\n   */\n  protected merge( language: Language, tokenizers: Tokenizer[] ): Tokenizer[] {\n    return tokenizers.reduce( ( merged, tokenizer ) => {\n      const [ category, regexp ] = tokenizer;\n\n      if ( startsWith( category, '#' ) && ! regexp ) {\n        const include = language.grammar[ category.slice( 1 ) ];\n        assert( include );\n        merged.push( ...this.merge( language, include ) );\n      } else {\n        const flags = regexp.toString().match( /[gimsy]*$/ )[ 0 ].replace( /[gy]/g, '' );\n        let source = regexp.source + ( isStickySupported ? '' : '|()' );\n\n        forOwn( language.source, ( replacement, key ) => {\n          source = source.replace( new RegExp( `%${ key }`, 'g' ), replacement.source );\n        } );\n\n        tokenizer[ 1 ] = new RegExp( source, ( isStickySupported ? 'y' : 'g' ) + flags );\n        merged.push( tokenizer );\n      }\n\n      return merged;\n    }, [] );\n  }\n\n  /**\n   * Tokenizes the text by the provided language and tokenizers.\n   *\n   * @param text       - A text to tokenize.\n   * @param language   - A Grammar object.\n   * @param tokenizers - An array with tokenizers.\n   *\n   * @return An index of the text where the handling ends.\n   */\n  protected tokenizeBy( text: string, language: Language, tokenizers: Tokenizer[] ): number {\n    let index    = 0;\n    let position = 0;\n\n    main:\n    while ( index < text.length ) {\n      for ( let i = 0; i < tokenizers.length; i++ ) {\n        const tokenizer = tokenizers[ i ];\n        const regexp    = tokenizer[ 1 ];\n        const command   = tokenizer[ 2 ];\n\n        regexp.lastIndex = index;\n\n        const match = regexp.exec( text );\n\n        if ( ! match || ! match[ 0 ] ) {\n          continue;\n        }\n\n        if ( position < index ) {\n          this.push( [ CATEGORY_TEXT, text.slice( position, index ) ] );\n        }\n\n        if ( command === '@back' ) {\n          position = index;\n          break main;\n        }\n\n        const offset = this.handle( match, language, tokenizers[ i ] );\n\n        index += offset || 1;\n        position = index;\n\n        if ( command === '@break' ) {\n          break main;\n        }\n\n        continue main;\n      }\n\n      index++;\n    }\n\n    if ( position < index ) {\n      this.push( [ CATEGORY_TEXT, text.slice( position ) ] );\n    }\n\n    return index;\n  }\n\n  /**\n   * Pushes the provided token to the lines array.\n   *\n   * @param token - A token to push.\n   */\n  protected push( token: Token ): void {\n    const [ category ] = token;\n\n    let index;\n    let from = 0;\n    let text = token[ 1 ];\n\n    while ( ( index = text.indexOf( LINE_BREAK, from ) ) > -1 ) {\n      if ( from < index ) {\n        this.lines[ this.index ].push( [ category, text.slice( from, index ) ] );\n      }\n\n      from = index + 1;\n      this.lines[ ++this.index ] = [];\n    }\n\n    text = text.slice( from );\n\n    if ( text ) {\n      this.lines[ this.index ].push( [ category, text ] );\n    }\n  }\n\n  /**\n   * Handles the matched text.\n   *\n   * @param match     - A matched result.\n   * @param language  - A Language object.\n   * @param tokenizer - A tokenizer that has been matched with the text.\n   *\n   * @return An index of the text where the handling ends.\n   */\n  protected handle( match: RegExpExecArray, language: Language, tokenizer: Tokenizer ): number {\n    const [ category ] = tokenizer;\n    let offset = 0;\n\n    if ( category ) {\n      const [ text ] = match;\n\n      if ( tokenizer[ 3 ] === '@debug' ) {\n        // eslint-disable-next-line\n        console.log( text, tokenizer );\n      }\n\n      if ( startsWith( category, '@' ) ) {\n        assert( language.use );\n\n        const lang = language.use[ category.slice( 1 ) ];\n        assert( lang );\n\n        return this.tokenizeBy( text, lang, lang.grammar.main );\n      }\n\n      if ( startsWith( category, '#' ) ) {\n        const tokenizers = language.grammar[ category.slice( 1 ) ];\n        assert( tokenizers );\n\n        const value = tokenizer[ 2 ] === '@rest' ? match.input.slice( match.index ) : text;\n        return this.tokenizeBy( value, language, tokenizers );\n      }\n\n      offset = text.length;\n      this.push( [ category, text ] );\n    }\n\n    return offset;\n  }\n\n  /**\n   * Tokenizes the text by the current language.\n   *\n   * @param text  - A text to tokenize.\n   *\n   * @return An array with tokens.\n   */\n  tokenize( text: string ): Token[][] {\n    this.lines = [ [] ];\n    this.index = 0;\n\n    this.tokenizeBy( text, this.language, this.language.grammar.main );\n\n    return this.lines;\n  }\n}\n","import { AnyFunction } from '../types';\n\n\n/**\n * The class for providing the very simple event bus.\n *\n * @private\n * @since 0.0.1\n */\nexport class EventBus {\n  /**\n   * Holds handlers.\n   */\n  protected handlers = {};\n\n  /**\n   * Attaches a handler.\n   *\n   * @param event    - An event name.\n   * @param callback - A callback function to register.\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\n   */\n  on( event: string, callback: AnyFunction, priority = 10 ): void {\n    const handlers = ( this.handlers[ event ] = this.handlers[ event ] || [] );\n    handlers.push( { callback, priority } );\n    handlers.sort( ( handler1, handler2 ) => handler1.priority - handler2.priority );\n  }\n\n  /**\n   * Emits an event.\n   *\n   * @param event - An event name.\n   * @param args  - Optional. Any number of arguments to pass to callbacks.\n   */\n  emit( event, ...args ): void {\n    ( this.handlers[ event ] || [] ).forEach( handler => {\n      handler.callback( ...args );\n    } );\n  }\n\n  /**\n   * Destroys the event bus.\n   */\n  destroy(): void {\n    this.handlers = {};\n  }\n}\n","import { PROJECT_CODE, PROJECT_CODE_SHORT } from './project';\n\n\nexport const ROOT      = PROJECT_CODE;\nexport const CONTAINER = `${ PROJECT_CODE_SHORT }__container`;\nexport const BODY      = `${ PROJECT_CODE_SHORT }__body`;\nexport const CODE      = `${ PROJECT_CODE_SHORT }__code`;\nexport const LINE      = `${ PROJECT_CODE_SHORT }__line`;\nexport const TOKEN     = `${ PROJECT_CODE_SHORT }__token`;\nexport const ACTIVE    = 'is-active';\n","import { LINE_BREAK } from '../../constants/characters';\nimport { Options, LanguageInfo, Token, Component } from '../../types';\nimport { EventBus } from '../../event/EventBus';\nimport { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { BODY, CODE, CONTAINER, LINE, ROOT, TOKEN } from '../../constants/classes';\nimport { forOwn, escapeHtml } from '../../utils';\n\n\n/**\n * Stores all Component functions.\n */\nconst Components: Record<string, Component> = {};\n\n/**\n * The class for highlighting code via provided tokens.\n *\n * @since 0.0.1\n */\nexport class Renderer {\n  /**\n   * Adds components.\n   *\n   * @param components - An object literal with Component functions.\n   */\n  static compose( components: Record<string, Component> ): void {\n    forOwn( components, ( Component, name ) => {\n      Components[ name ] = Component;\n    } );\n  }\n\n  /**\n   * Holds lines with tokens.\n   */\n  readonly lines = [];\n\n  /**\n   * Holds the language info.\n   */\n  readonly info: LanguageInfo;\n\n  /**\n   * Holds the root element if provided.\n   */\n  readonly root: HTMLElement | undefined;\n\n  /**\n   * Holds options.\n   */\n  readonly options: Options;\n\n  /**\n   * Holds the EventBus instance.\n   */\n  readonly event: EventBus = new EventBus();\n\n  /**\n   * The Renderer constructor.\n   *\n   * @param lines   - Lines with tokens to render.\n   * @param info    - The language info object.\n   * @param root    - Optional. A root element to highlight.\n   * @param options - Options.\n   */\n  constructor( lines: Token[][], info: LanguageInfo, root?: HTMLElement, options: Options = {} ) {\n    this.lines   = lines;\n    this.info    = info;\n    this.root    = root;\n    this.options = options;\n\n    this.init();\n  }\n\n  /**\n   * Initializes the instance.\n   */\n  protected init(): void {\n    const { lines } = this;\n\n    if ( lines.length ) {\n      const tokens = lines[ lines.length - 1 ];\n\n      if ( ! tokens.length || ( tokens.length === 1 && ! tokens[ 0 ][ 1 ].trim() ) ) {\n        // Removes the last empty line.\n        lines.pop();\n      }\n    }\n\n    forOwn( Components, Component => {\n      Component( this );\n    } );\n\n    this.event.emit( 'mounted' );\n  }\n\n  /**\n   * Renders lines as HTML.\n   *\n   * @param append - A function to add fragments to the HTML string.\n   *\n   * @return A rendered HTML string.\n   */\n  protected renderLines( append: ( fragment: string ) => void ): void {\n    const event = this.event;\n    const tag   = this.options.span ? 'span' : 'code';\n\n    for ( let i = 0; i < this.lines.length; i++ ) {\n      const tokens  = this.lines[ i ];\n      const classes = [ LINE ];\n\n      event.emit( 'line:open', append, classes, i );\n      append( `<div class=\"${ classes.join( ' ' ) }\">` );\n\n      if ( tokens.length ) {\n        for ( let j = 0; j < tokens.length; j++ ) {\n          const token   = tokens[ j ];\n          const classes = [ `${ TOKEN } ${ PROJECT_CODE_SHORT }__${ token[ 0 ] }` ];\n\n          event.emit( 'token', token, classes );\n\n          append( `<${ tag } class=\"${ classes.join( ' ' ) }\">${ escapeHtml( token[ 1 ] ) }</${ tag }>` );\n        }\n      } else {\n        append( LINE_BREAK );\n      }\n\n      append( '</div>' );\n      event.emit( 'line:closed', append, i );\n    }\n  }\n\n  /**\n   * Returns all lines and wrapper elements.\n   *\n   * @param pre - Whether to wrap elements by `pre` or not.\n   *\n   * @return An HTML string.\n   */\n  html( pre: boolean ): string {\n    const event = this.event;\n    let html  = '';\n\n    const append = ( fragment: string ) => { html += fragment };\n\n    if ( pre ) {\n      html += `<pre class=\"${ ROOT } ${ ROOT }--${ this.info.id }\">`;\n    }\n\n    const containerClasses = [ CONTAINER ];\n    event.emit( 'open', append, containerClasses );\n\n    html += `<div class=\"${ containerClasses.join( ' ' ) }\">`;\n    event.emit( 'opened', append );\n\n    const bodyClasses = [ `${ BODY }${ this.options.wrap ? ` ${ BODY }--wrap` : '' }` ];\n    event.emit( 'body:open', append, bodyClasses );\n\n    html += `<div class=\"${ bodyClasses.join( ' ' ) }\">`;\n    event.emit( 'body:opened', append );\n\n    html += `<div class=\"${ CODE }\">`;\n    this.renderLines( append );\n    html += `</div>`; // code\n\n    event.emit( 'body:close', append );\n    html += `</div>`; // body\n\n    event.emit( 'close', append );\n    html += `</div>`; // container\n\n    event.emit( 'closed', append );\n\n    if ( pre ) {\n      html += `</pre>`;\n    }\n\n    return html;\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy(): void {\n    this.event.emit( 'destroy' );\n    this.event.destroy();\n  }\n}\n","/**\n * Converts essential HTML special characters to HTML entities.\n *\n * @param string - A string to escape.\n *\n * @return An escaped string.\n */\nexport function escapeHtml( string: string ): string {\n  return string.replace( /&/g, '&amp;' ).replace( /</g, '&lt;' );\n}\n","export const REGEXP_FLOAT = /\\d+\\.?\\d*|\\d*\\.?\\d+/;\n\nexport const REGEXP_NUMBER = /[+-]?(\\d+\\.?\\d*|\\d*\\.?\\d+)([eE][+-]?\\d+)?/;\n\nexport const REGEXP_BOOLEAN = /\\b(?:true|false)\\b/;\n\nexport const REGEXP_BRACKET = /[[\\]{}()]/;\n\nexport const REGEXP_SPACE = /[ \\t]+/;\n\nexport const REGEXP_QUOTE = /'(?:\\\\'|.)*?'/;\n\nexport const REGEXP_DOUBLE_QUOTE = /\"(?:\\\\\"|.)*?\"/;\n\nexport const REGEXP_MULTILINE_COMMENT = /\\/\\*[\\s\\S]*?\\*\\//;\n\nexport const REGEXP_SLASH_COMMENT = /\\/\\/.*/;\n\nexport const REGEXP_GENERAL_KEYWORDS = /\\b(?:break|catch|class|continue|do|else|extends|finally|for|function|if|implements|in|instanceof|interface|new|null|return|throw|try|while)\\b/;\n","import { Language } from '../../types';\nimport {\n  CATEGORY_BRACKET,\n  CATEGORY_COMMENT,\n  CATEGORY_FUNCTION,\n  CATEGORY_KEYWORD,\n  CATEGORY_NUMBER,\n  CATEGORY_OPERATOR,\n  CATEGORY_PROPERTY,\n  CATEGORY_SELECTOR,\n  CATEGORY_SPACE,\n  CATEGORY_STRING,\n  CATEGORY_DELIMITER,\n  CATEGORY_TAG,\n  CATEGORY_ATRULE,\n} from '../../constants/categories';\nimport { REGEXP_MULTILINE_COMMENT, REGEXP_SPACE } from '../../constants/regexp';\n\n\n/**\n * Returns the CSS language definition.\n *\n * @return A Language object.\n */\nexport function css(): Language {\n  return {\n    id  : 'css',\n    name: 'CSS',\n\n    grammar: {\n      main: [\n        [ '#common' ],\n\n        // An atrule without a block\n        [ '#findSingleAtrule' ],\n\n        // Blocks including atrules\n        [ '#findBlock' ],\n      ],\n\n      findBlock: [\n        [ '#block', /[^\\s;{}][^;{}]*{.*?}/s, '@rest' ],\n      ],\n\n      findSingleAtrule: [\n        [ '#atrule', /@[^{;]+?;/s ],\n      ],\n\n      // Finds atrules before { and ;\n      findAtrule: [\n        [ '#atrule', /@[^{;]*?(?=[{;])/s ],\n      ],\n\n      // May not start with digits\n      findSelector: [\n        [ '#selector', /[^\\s{};].*?(?={)/s ],\n      ],\n\n      common: [\n        [ CATEGORY_STRING, /(['\"]).*?[^\\\\]\\1/s ],\n        [ CATEGORY_COMMENT, REGEXP_MULTILINE_COMMENT ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n      ],\n\n      block: [\n        [ '#inner', /{/, '@rest' ],\n        [ CATEGORY_BRACKET, /}/, '@break' ],\n        [ '#findAtrule' ],\n        [ '#findSelector' ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n      ],\n\n      inner: [\n        [ CATEGORY_BRACKET, /{/ ],\n        [ '#common' ],\n        [ '#findBlock' ],\n        [ '#props' ],\n        [ '#findAtrule' ],\n        [ '', /}/, '@back' ],\n      ],\n\n      atrule: [\n        [ '#common' ],\n        [ '#url', /\\burl\\(/, '@rest' ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n        [ CATEGORY_ATRULE, /[^\\s();]+/ ],\n        [ CATEGORY_DELIMITER, /[:;,]/ ],\n        [ '#paren', /\\(/, '@rest' ],\n      ],\n\n      paren: [\n        [ CATEGORY_BRACKET, /^\\(/ ],\n        [ '#common' ],\n        [ '#paren', /\\(/, '@rest' ],\n        [ CATEGORY_BRACKET, /\\)/, '@break' ],\n        [ '#props' ],\n      ],\n\n      selector: [\n        [ '#common' ],\n        [ CATEGORY_OPERATOR, /[>+~]/ ],\n        [ CATEGORY_BRACKET, /[[\\]()]/ ],\n        [ CATEGORY_DELIMITER, /=/ ],\n        [ CATEGORY_SELECTOR, /::?\\S+/ ],\n        [ CATEGORY_SELECTOR, /[\\W\\d]\\S+/ ],\n        [ CATEGORY_TAG, /\\b[a-z]+|\\*/i ],\n        [ CATEGORY_SELECTOR, /\\S+/ ],\n      ],\n\n      url: [\n        [ '#common' ],\n        [ CATEGORY_FUNCTION, /^url/ ],\n        [ CATEGORY_BRACKET, /\\(/ ],\n        [ CATEGORY_STRING, /[^)]+/ ],\n        [ CATEGORY_BRACKET, /\\)/, '@break' ],\n      ],\n\n      props: [\n        [ CATEGORY_PROPERTY, /[a-z0-9-_\\xA0-\\uFFFF]+(?=:)/i ],\n        [ '#url', /\\burl\\(/, '@rest' ],\n        [ CATEGORY_FUNCTION, /\\b[\\w-]+(?=\\()\\b/ ],\n        [ CATEGORY_KEYWORD, /!important|\\b(?:initial|inherit|unset)/ ],\n        [ CATEGORY_PROPERTY, /[a-z0-9-]+(?=:)/ ],\n        [ CATEGORY_NUMBER, /#([0-9a-f]{6}|[0-9a-f]{3})/i ],\n        [ CATEGORY_NUMBER, /\\bU\\+[0-9a-f?-]+/i ],\n        [ CATEGORY_NUMBER, /[+-]?(\\d+\\.?\\d*|\\d*\\.?\\d+)/ ],\n        [ CATEGORY_DELIMITER, /[:;,]/ ],\n        [ '#paren', /\\(/, '@rest' ],\n        [ CATEGORY_BRACKET, /[[\\])]/ ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n      ],\n    },\n  };\n}\n","import {\n  REGEXP_BOOLEAN, REGEXP_BRACKET, REGEXP_DOUBLE_QUOTE, REGEXP_GENERAL_KEYWORDS, REGEXP_MULTILINE_COMMENT,\n  REGEXP_NUMBER, REGEXP_QUOTE, REGEXP_SLASH_COMMENT, REGEXP_SPACE,\n} from '../../constants/regexp';\nimport { Language } from '../../types';\nimport {\n  CATEGORY_DELIMITER, CATEGORY_DECORATOR, CATEGORY_KEYWORD, CATEGORY_REGEXP, CATEGORY_STRING,\n  CATEGORY_OPERATOR, CATEGORY_COMMENT, CATEGORY_CLASS, CATEGORY_FUNCTION, CATEGORY_BOOLEAN,\n  CATEGORY_IDENTIFIER, CATEGORY_NUMBER, CATEGORY_BRACKET, CATEGORY_SPACE,\n} from '../../constants/categories';\n\n\n/**\n * Returns the JavaScript language definition.\n *\n * @return A Language object.\n */\nexport function javascript(): Language {\n  return {\n    id   : 'javascript',\n    name : 'JavaScript',\n    alias: [ 'js' ],\n\n    source: {\n      func: /[_$a-z\\xA0-\\uFFFF][_$a-z0-9\\xA0-\\uFFFF]*/,\n    },\n\n    grammar: {\n      main: [\n        [ CATEGORY_STRING, REGEXP_QUOTE ],\n        [ CATEGORY_STRING, REGEXP_DOUBLE_QUOTE ],\n        [ '#backtick', /`/, '@rest' ],\n        [ CATEGORY_COMMENT, REGEXP_MULTILINE_COMMENT ],\n        [ CATEGORY_COMMENT, REGEXP_SLASH_COMMENT ],\n        [ CATEGORY_REGEXP, /\\/(\\[.*[^\\\\]?]|\\\\\\/|.)+?\\/[gimsuy]*/ ],\n        [ CATEGORY_KEYWORD, REGEXP_GENERAL_KEYWORDS ],\n        [ CATEGORY_KEYWORD, /\\b(?:as|async|await|case|catch|const|debugger|default|delete|enum|export|from|import|let|package|private|protected|public|super|switch|static|this|typeof|undefined|var|void|with|yield)\\b/ ],\n        [ CATEGORY_KEYWORD, /\\b((get|set)(?=\\s+%func))/i ],\n        [ CATEGORY_CLASS, /\\b[A-Z][\\w$]*\\b/ ],\n        [ CATEGORY_FUNCTION, /%func(?=\\s*\\()/i ],\n        [ CATEGORY_BOOLEAN, REGEXP_BOOLEAN ],\n        [ CATEGORY_DECORATOR, /@[^\\s(@]+/ ],\n        [ CATEGORY_IDENTIFIER, /\\b[a-z_$][\\w$]*\\b/ ],\n        [ CATEGORY_NUMBER, REGEXP_NUMBER ],\n        [ CATEGORY_OPERATOR, /=>/ ],\n        [ CATEGORY_OPERATOR, /\\+[+=]?|-[-=]?|\\*\\*?=?|[/%^]=?|&&?=?|\\|\\|?=?|\\?\\??=?|<<?=?|>>>=?|>>?=?|[!=]=?=?|[~:^]/ ],\n        [ CATEGORY_BRACKET, REGEXP_BRACKET ],\n        [ CATEGORY_DELIMITER, /[;.,]+/ ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n      ],\n\n      backtick: [\n        [ CATEGORY_STRING, /^`/ ],\n        [ CATEGORY_STRING, /(\\$[^{]|\\\\[$`]|[^`$])+/ ],\n        [ '#expression', /\\${/, '@rest' ],\n        [ CATEGORY_STRING, /`/, '@break' ],\n      ],\n\n      expression: [\n        [ CATEGORY_DELIMITER, /^\\${/ ],\n        [ CATEGORY_DELIMITER, /}/, '@break' ],\n        [ '#main' ],\n      ],\n    },\n  };\n}\n","import {\r\n  CATEGORY_ATTRIBUTE,\r\n  CATEGORY_BRACKET,\r\n  CATEGORY_CDATA,\r\n  CATEGORY_COMMENT,\r\n  CATEGORY_ENTITY,\r\n  CATEGORY_PROLOG,\r\n  CATEGORY_SPACE,\r\n  CATEGORY_DELIMITER,\r\n  CATEGORY_TAG,\r\n  CATEGORY_VALUE,\r\n} from '../../constants/categories';\r\nimport { REGEXP_SPACE } from '../../constants/regexp';\r\nimport { Language, Tokenizer } from '../../types';\r\nimport { css } from '../css/css';\r\nimport { javascript } from '../javascript/javascript';\r\n\r\n\r\n/**\r\n * The HTML language options.\r\n *\r\n * @since 0.0.12\r\n */\r\nexport interface HtmlOptions {\r\n  /**\r\n   * The language for tokenizing script blocks.\r\n   */\r\n  script?: () => Language;\r\n\r\n  /**\r\n   * The language for tokenizing style blocks.\r\n   */\r\n  style?: () => Language;\r\n}\r\n\r\n/**\r\n * Returns the HTML language definition.\r\n *\r\n * @param options - Optional. Options.\r\n *\r\n * @return A Language object.\r\n */\r\nexport function html( options: HtmlOptions = {} ): Language {\r\n  const script = ( options.script || javascript )();\r\n  const style  = ( options.style || css )();\r\n  const cdata  = [ CATEGORY_CDATA, /<!\\[CDATA\\[.*]]>/is ] as Tokenizer;\r\n\r\n  // Embedded scripts or styles may contain CDATA sections.\r\n  script.grammar.main.unshift( cdata );\r\n  style.grammar.main.unshift( cdata );\r\n\r\n  return {\r\n    id   : 'html',\r\n    alias: [ 'markup' ],\r\n    name : 'HTML',\r\n    use  : { script, style },\r\n\r\n    grammar: {\r\n      main: [\r\n        [ CATEGORY_COMMENT, /<!--.*?-->/s ],\r\n        [ CATEGORY_PROLOG, /<!DOCTYPE.*?>/is ],\r\n        cdata,\r\n        [ '#script', /<script.*?>.*?<\\/script>/s ],\r\n        [ '#style', /<style.*?>.*?<\\/style>/s ],\r\n        [ '#tag', /<.*?>/s ],\r\n        [ CATEGORY_ENTITY, /&[\\da-z]+;|&#\\d+;/i ],\r\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\r\n      ],\r\n\r\n      cdata: [\r\n        [ CATEGORY_CDATA, /<!\\[CDATA\\[.*]]>/is ],\r\n      ],\r\n\r\n      script: [\r\n        [ '#tag', /^<script.*?>/s ],\r\n        [ '#cdata' ],\r\n        [ '@script', /.+(?=<\\/script>)/s ],\r\n        [ '#tag', /<\\/script>/ ],\r\n      ],\r\n\r\n      style: [\r\n        [ '#tag', /^<style.*?>/s ],\r\n        [ '@style', /.+(?=<\\/style>)/s ],\r\n        [ '#tag', /<\\/style>/ ],\r\n      ],\r\n\r\n      tag: [\r\n        [ '#attr', /\\s+.+(?=[\\s/>])/s ],\r\n        [ CATEGORY_TAG, /[^\\s/<>\"'=]+/ ],\r\n        [ CATEGORY_BRACKET, /[<>]/ ],\r\n        [ CATEGORY_DELIMITER, /[/]/ ],\r\n      ],\r\n\r\n      attr: [\r\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\r\n        [ CATEGORY_VALUE, /(['\"])(\\\\\\1|.)*?\\1/ ],\r\n        [ CATEGORY_DELIMITER, /[/=]/ ],\r\n        [ CATEGORY_ATTRIBUTE, /[^\\s/>\"'=]+/ ],\r\n      ],\r\n    },\r\n  };\r\n}\r\n","import { Language } from '../../types';\nimport {\n  CATEGORY_ATTRIBUTE, CATEGORY_BRACKET, CATEGORY_CLASS, CATEGORY_SPACE,\n  CATEGORY_DELIMITER, CATEGORY_TAG, CATEGORY_VALUE,\n} from '../../constants/categories';\nimport { REGEXP_SPACE } from '../../constants/regexp';\nimport { assign, before } from '../../utils';\nimport { javascript } from '../javascript/javascript';\n\n\n/**\n * Options for the JSX language definition.\n *\n * @since 0.0.12\n */\ninterface JsxOptions {\n  /**\n   * The base language. The default value is `javascript()`.\n   */\n  base?: () => Language;\n}\n\n/**\n * Returns the JSX language definition.\n *\n * @return A Language object.\n */\nexport function jsx( options: JsxOptions = {} ): Language {\n  const language = assign( ( options.base || javascript )(), {\n    id   : 'jsx',\n    name : 'JSX',\n    alias: [ 'react' ],\n  } );\n\n  const { grammar } = language;\n\n  before( grammar.main, CATEGORY_CLASS, [ [ '#findPairedTag' ], [ '#findSelfClosedTag' ] ] );\n\n  assign( grammar, {\n    // This doesn't pick correct paired tags if nested, but they are incrementally searched later.\n    findPairedTag: [\n      [ '#pairedTag', /(?:<\\s*?(\\w+).*?>.*?<\\/\\1>)|<\\s*?>.*?<\\/>/s, '@rest' ],\n    ],\n\n    // Should not match the closing delimiter inside `{}`, `''` and `\"\"`.\n    findSelfClosedTag: [\n      [ '#selfClosedTag', /<(?:{.*?}|(['\"]).*?\\1|[^>])+?\\/>/s ],\n    ],\n\n    findBracket: [\n      [ '#code', /{/, '@rest' ],\n    ],\n\n    pairedTag: [\n      [ '#openTag', /^</, '@rest' ],\n      [ '#findBracket' ],\n      [ '#findPairedTag' ],\n      [ '#findSelfClosedTag' ],\n      [ '#tagName', /<\\/([\\w][^\\s]*?)?>/, '@break' ],\n      [ CATEGORY_SPACE, REGEXP_SPACE ],\n    ],\n\n    code: [\n      [ CATEGORY_BRACKET, /^{/ ],\n      [ CATEGORY_BRACKET, /}/, '@break' ],\n      [ '#findBracket' ],\n      [ '#main' ],\n    ],\n\n    selfClosedTag: [\n      [ '#openTag', /^</, '@rest' ],\n    ],\n\n    openTag: [\n      [ '#tagName', /<\\s*[^\\s/>\"'=]*/ ],\n      [ '#findBracket' ],\n      [ CATEGORY_ATTRIBUTE, /[^\\s/>\"'=]+/ ],\n      [ CATEGORY_VALUE, /(['\"])(\\\\\\1|.)*?\\1/ ],\n      [ CATEGORY_SPACE, REGEXP_SPACE ],\n      [ CATEGORY_DELIMITER, /[/=]/ ],\n      [ CATEGORY_BRACKET, />/, '@break' ],\n    ],\n\n    tagName: [\n      [ CATEGORY_BRACKET, /[<>]/ ],\n      [ CATEGORY_SPACE, REGEXP_SPACE ],\n      [ CATEGORY_DELIMITER, /\\// ],\n      [ CATEGORY_CLASS, /[A-Z][\\w$-]*/ ],\n      [ CATEGORY_TAG, /[^\\s/>\"'=]+/ ],\n    ],\n  } );\n\n  return language;\n}\n","import { Language } from '../../types';\n\n\n/**\n * Returns the None language definition.\n *\n * @return A Language object.\n */\nexport function none(): Language {\n  return {\n    id     : 'none',\n    name   : '',\n    grammar: { main: [] },\n  };\n}\n","import { Language } from '../../types';\nimport { CATEGORY_PROLOG } from '../../constants/categories';\nimport { assign } from '../../utils';\nimport { html } from '../html/html';\n\n\n/**\n * Returns the XML language definition.\n *\n * @return A Language object.\n */\nexport function xml(): Language {\n  const language = assign( html(), {\n    id   : 'xml',\n    name : 'XML',\n    alias: [],\n  } );\n\n  language.grammar.main.unshift( [ CATEGORY_PROLOG, /<\\?.*?\\?>/s ] );\n\n  return language;\n}\n","import { Language } from '../../types';\nimport { CATEGORY_FUNCTION, CATEGORY_KEYWORD } from '../../constants/categories';\nimport { assign, before } from '../../utils';\nimport { javascript } from '../javascript/javascript';\n\n\n/**\n * Returns the Typescript language definition.\n *\n * @return A Language object.\n */\nexport function typescript(): Language {\n  const language = assign( javascript(), {\n    id   : 'typescript',\n    name : 'TypeScript',\n    alias: [ 'ts' ],\n  } );\n\n  const { grammar } = language;\n  const { main }    = grammar;\n\n  before( main, CATEGORY_KEYWORD, [\n    [\n      CATEGORY_KEYWORD,\n      /\\b(?:declare|keyof|namespace|readonly|type|string|number|boolean|bigint|symbol|object|any|never|unknown|infer|is)\\b/,\n    ],\n  ] );\n\n  before( main, CATEGORY_FUNCTION, [\n    [ '#functions', /([_$a-z\\xA0-\\uFFFF][_$a-z0-9\\xA0-\\uFFFF]*)?(?:<[^>]+?>)?\\s*?\\(/ ],\n  ] );\n\n  assign( grammar, {\n    functions: [\n      [ CATEGORY_FUNCTION, /^[\\w$]+/ ],\n      // Avoid circular references(\"main\" has #functions).\n      ...main.filter( tokenizer => tokenizer[ 0 ] !== '#functions' ),\n    ],\n  } );\n\n  return language;\n}\n","import { REGEXP_BOOLEAN, REGEXP_DOUBLE_QUOTE, REGEXP_SPACE } from '../../constants/regexp';\nimport { Language } from '../../types';\nimport {\n  CATEGORY_BOOLEAN, CATEGORY_BRACKET, CATEGORY_KEYWORD, CATEGORY_NUMBER, CATEGORY_OPERATOR,\n  CATEGORY_PROPERTY, CATEGORY_SPACE, CATEGORY_STRING, CATEGORY_DELIMITER,\n} from '../../constants/categories';\n\n\n/**\n * Returns the JSON language definition.\n *\n * @link https://www.json.org/json-en.html\n *\n * @return A Language object.\n */\nexport function json(): Language {\n  return {\n    id  : 'json',\n    name: 'JSON',\n\n    grammar: {\n      main: [\n        [ CATEGORY_PROPERTY, /\".*?[^\\\\]\"(?=:)/ ],\n        [ CATEGORY_STRING, REGEXP_DOUBLE_QUOTE ],\n        [ CATEGORY_KEYWORD, /\\bnull\\b/ ],\n        [ CATEGORY_NUMBER, /[+-]?(\\d+\\.?\\d*)([eE][+-]?\\d+)?/ ],\n        [ CATEGORY_BRACKET, /[{}[\\]]/ ],\n        [ CATEGORY_BOOLEAN, REGEXP_BOOLEAN ],\n        [ CATEGORY_OPERATOR, /:/ ],\n        [ CATEGORY_DELIMITER, /,/ ],\n        [ CATEGORY_SPACE, REGEXP_SPACE ],\n      ],\n    },\n  };\n}\n","import { Language } from '../../types';\nimport {\n  CATEGORY_BRACKET, CATEGORY_COMMENT, CATEGORY_FUNCTION, CATEGORY_OPERATOR, CATEGORY_PROPERTY,\n  CATEGORY_SELECTOR, CATEGORY_SPACE, CATEGORY_STRING, CATEGORY_DELIMITER,\n  CATEGORY_TAG, CATEGORY_VARIABLE,\n} from '../../constants/categories';\nimport { REGEXP_MULTILINE_COMMENT, REGEXP_SLASH_COMMENT, REGEXP_SPACE } from '../../constants/regexp';\nimport { assign, before } from '../../utils';\nimport { css } from '../css/css';\n\n\n/**\n * Returns the SCSS language definition.\n *\n * @return A Language object.\n */\nexport function scss(): Language {\n  const language = assign( css(), {\n    id  : 'scss',\n    name: 'SCSS',\n  } );\n\n  const { grammar } = language;\n\n  assign( grammar, {\n    findBlock: [\n      /**\n       * Include: div {}, .class {}, #id {}, * {}, *{}, #{ $variable } {}, .something__#{ $variable } {}\n       * Exclude: #{ variable }: value\n       */\n      [ '#block', /([a-z*-_]|#{[^;]*?}|((#{[^;]*?}|[^\\s{};])(#{[^;]*?}|[^{};#]|#[^{])+?))(?!#){.*?}/si, '@rest' ],\n    ],\n\n    // May contain #{} interpolation\n    findSingleAtrule: [\n      [ '#atrule', /@(#{|[^{;])+?;/s ],\n    ],\n\n    findAtrule: [\n      [ '#atrule', /@(#{|[^{;])*?(?=[{;])/s ],\n    ],\n\n    // May contain #{} interpolation\n    findSelector: [\n      [ '#selector', /[^;]*?[^#](?={)/s, '' ],\n    ],\n\n    findInterp: [\n      [ '#interp', /#{/, '@rest' ],\n    ],\n\n    common: [\n      [ '#string' ],\n      [ CATEGORY_COMMENT, REGEXP_MULTILINE_COMMENT ],\n      [ CATEGORY_COMMENT, REGEXP_SLASH_COMMENT ],\n      [ CATEGORY_DELIMITER, /;/ ],\n      [ CATEGORY_SPACE, REGEXP_SPACE ],\n    ],\n\n    string: [\n      [ '#singleQuote', /'/, '@rest' ],\n      [ '#doubleQuote', /\"/, '@rest' ],\n    ],\n\n    singleQuote: [\n      [ CATEGORY_STRING, /^'/ ],\n      [ '#findInterp' ],\n      [ CATEGORY_STRING, /(\\\\'|#[^{]|[^'#])+/ ],\n      [ CATEGORY_STRING, /'/, '@break' ],\n    ],\n\n    doubleQuote: [\n      [ CATEGORY_STRING, /^\"/ ],\n      [ '#findInterp' ],\n      [ CATEGORY_STRING, /(\\\\\"|#[^{]|[^\"#])+/ ],\n      [ CATEGORY_STRING, /\"/, '@break' ],\n    ],\n\n    selector: [\n      [ '#common' ],\n      [ '#findInterp' ],\n      [ CATEGORY_OPERATOR, /[>+~]/ ],\n      [ CATEGORY_BRACKET, /[[\\]()]/ ],\n      [ CATEGORY_DELIMITER, /=/ ],\n      [ CATEGORY_SELECTOR, /::?\\S+(?=#{)/ ],\n      [ CATEGORY_SELECTOR, /[\\W\\d]\\S+(?=#{)/ ],\n      [ CATEGORY_TAG, /\\b[a-zA-Z]+\\b|\\*/ ],\n      [ CATEGORY_SELECTOR, /([^#\\s]|#[^{\\s])+/ ],\n    ],\n\n    url: [\n      [ '#common' ],\n      [ '#findInterp' ],\n      [ CATEGORY_FUNCTION, /^url/ ],\n      [ CATEGORY_BRACKET, /\\(/ ],\n      [ CATEGORY_STRING, /[^)]+(?=#{)/ ],\n      [ CATEGORY_STRING, /[^)]+/ ],\n      [ CATEGORY_BRACKET, /\\)/, '@break' ],\n    ],\n\n    interp: [\n      [ CATEGORY_DELIMITER, /#{/ ],\n      [ CATEGORY_DELIMITER, /}/, '@break' ],\n      [ '#common' ],\n      [ '#props' ],\n    ],\n  } );\n\n  grammar.inner.unshift( [ '#findInterp' ] );\n\n  before( grammar.atrule, '#url', [ [ '#findInterp' ] ] );\n  before( grammar.props, CATEGORY_PROPERTY, [\n    [ '#findInterp' ],\n    [ CATEGORY_VARIABLE, /\\$[\\w-_]+/ ],\n  ] );\n\n  return language;\n}\n","import { Language } from '../../types';\nimport { assign } from '../../utils';\nimport { xml } from '../xml/xml';\n\n\n/**\n * Returns the XML language definition.\n *\n * @return A Language object.\n */\nexport function svg(): Language {\n  return assign( xml(), {\n    id   : 'svg',\n    name : 'SVG',\n    alias: [],\n  } );\n}\n","import { Language } from '../../types';\nimport { assign } from '../../utils';\nimport { jsx } from '../jsx/jsx';\nimport { typescript } from '../typescript/typescript';\n\n\n/**\n * Returns the TSX language definition.\n *\n * @return A Language object.\n */\nexport function tsx(): Language {\n  return assign( jsx( { base: typescript } ), {\n    id   : 'tsx',\n    name : 'TSX',\n  } );\n}\n","import { Language } from '../../types';\nimport { assign } from '../../utils';\nimport { html, HtmlOptions } from '../html/html';\n\n\n/**\n * The Vue language options.\n *\n * @since 0.0.12\n */\ninterface VueOptions extends HtmlOptions {}\n\n/**\n * Returns the VUE language definition.\n *\n * @return A Language object.\n */\nexport function vue( options: VueOptions = {} ): Language {\n  const language = assign( html( options ), { id: 'vue', name: 'Vue', alias: [] } );\n\n  // Vue uses Mustache syntax for writing code inside tags.\n  language.grammar.main.push( [ '@script', /{{[\\s\\S]*?}}/ ] );\n\n  return language;\n}\n","import { Language, Options, Token } from '../../types';\nimport { Lexer } from '../Lexer/Lexer';\nimport { Renderer } from '../Renderer/Renderer';\nimport { ROOT } from '../../constants/classes';\nimport { ATTRIBUTE_LANGUAGE } from '../../constants/attributes';\nimport { attr, isHTMLElement, text, assert, isString, assign, addClass, toArray } from '../../utils';\nimport { none } from '../../languages';\n\n\n/**\n * Stores all Lexer instances.\n */\nconst lexers: Record<string, Lexer> = {};\n\n/**\n * The class that tokenizes code for syntax highlighting.\n *\n * @since 0.0.1\n */\nexport class RyuseiLight {\n  /**\n   * Registers languages.\n   *\n   * @param languages - A Language object or objects.\n   */\n  static register( languages: Language | Language[] ): void {\n    toArray( languages ).forEach( language => {\n      const { id } = language;\n\n      if ( id && ! lexers[ id ] ) {\n        ( language.alias || [] ).concat( id ).forEach( id => {\n          lexers[ id ] = new Lexer( language );\n        } );\n      }\n    } );\n  }\n\n  /**\n   * Adds components.\n   *\n   * @param components - An object literal with Component functions.\n   */\n  static compose = Renderer.compose;\n\n  /**\n   * Tokenizes the provided string.\n   *\n   * @param code     - A string to tokenize.\n   * @param language - A language ID.\n   *\n   * @return An array of arrays with tokens as [ string, string ].\n   */\n  static tokenize( code: string, language: string ): Token[][] {\n    return RyuseiLight.getLexer( language ).tokenize( code );\n  }\n\n  /**\n   * Checks if the given language has been already registered or not.\n   *\n   * @param language - A language to check.\n   */\n  static has( language: string ): boolean {\n    return !! lexers[ language ];\n  }\n\n  /**\n   * Returns a registered Lexer instance.\n   * If it's not found, the `none` lexer will be returned.\n   *\n   * @param language - A language name.\n   */\n  protected static getLexer( language: string ) {\n    if ( ! lexers.none ) {\n      RyuseiLight.register( none() );\n    }\n\n    return lexers[ language ] || lexers.none;\n  }\n\n  /**\n   * Holds all renderers.\n   */\n  protected readonly renderers: Renderer[] = [];\n\n  /**\n   * Holds options.\n   */\n  protected readonly options: Options;\n\n  /**\n   * The RyuseiLight constructor.\n   *\n   * @param options  - Optional. Options.\n   */\n  constructor( options?: Options ) {\n    this.options = assign( {}, options );\n  }\n\n  /**\n   * Returns a new Renderer instance.\n   *\n   * @param code    - A code to highlight.\n   * @param elm     - Optional. An element to highlight.\n   * @param options - Optional. Options.\n   */\n  protected getRenderer( code: string, elm?: HTMLElement, options?: Options ) {\n    options = assign( {}, this.options, options );\n\n    const language     = options.language;\n    const { name, id } = RyuseiLight.getLexer( language ).language;\n    return new Renderer( RyuseiLight.tokenize( code, language ), { name, id }, elm, options );\n  }\n\n  /**\n   * Applies the highlighter to elements that matches the selector or the provided element.\n   *\n   * @param target  - A selector or an element.\n   * @param options - Optional. Options.\n   */\n  apply( target: string | Element, options?: Options ): void {\n    const elms = isString( target ) ? document.querySelectorAll( target ) : [ target ];\n\n    for ( let i = 0; i < elms.length; i++ ) {\n      const elm = elms[ i ];\n\n      if ( isHTMLElement( elm ) ) {\n        const elmOptions = assign( {}, options, { language: attr( elm, ATTRIBUTE_LANGUAGE ) || undefined } );\n        const renderer   = this.getRenderer( text( elm ), elm, elmOptions );\n        const isPre      = elm instanceof HTMLPreElement;\n\n        if ( isPre ) {\n          addClass( elm, [ ROOT, `${ ROOT }--${ renderer.info.id }` ] );\n        }\n\n        elm.innerHTML = renderer.html( ! isPre );\n\n        renderer.event.emit( 'applied', elm );\n        this.renderers.push( renderer );\n      }\n    }\n  }\n\n  /**\n   * Returns highlighted HTML by tokenizing the provided code.\n   *\n   * @param code    - Code to highlight.\n   * @param options - Optional. Options.\n   *\n   * @return Highlighted HTML string.\n   */\n  html( code: string, options?: Options ): string {\n    assert( isString( code ), 'Invalid code.' );\n    return this.getRenderer( code, null, options ).html( true );\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy(): void {\n    this.renderers.forEach( renderer => {\n      renderer.destroy();\n    } );\n  }\n}\n","import { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { Renderer } from '../../core/Renderer/Renderer';\nimport { ACTIVE } from '../../constants/classes';\nimport { attr, error, isArray } from '../../utils';\n\n\n/**\n * The data attribute name for active lines.\n * The value must be an array in JSON format, such as \"[ 2, [ 5, 10 ] ]\"\n *\n * @private\n * @since 0.0.1\n */\nexport const ATTRIBUTE_ACTIVE_LINES = `data-${ PROJECT_CODE_SHORT }-active-lines`;\n\n/**\n * The component for highlighting lines.\n *\n * @since 0.0.1\n */\nexport function ActiveLines( { event, root, options }: Renderer ): void {\n  const lines = ( root && parseData( root ) ) || options.activeLines;\n\n  if ( isArray( lines ) ) {\n    const activeLines = normalize( lines );\n\n    event.on( 'gutter:row:open', ( html, classes, index ) => {\n      if ( activeLines[ index ] ) {\n        classes.push( activeLines[ index ] );\n      }\n    } );\n\n    event.on( 'line:open', ( html, classes, index ) => {\n      if ( activeLines[ index ] ) {\n        classes.push( activeLines[ index ] );\n      }\n    } );\n  }\n}\n\n/**\n * Attempts to get definition of active lines from a data attribute.\n *\n * @param elm - A root element.\n *\n * @return An array with line numbers if available, or otherwise `undefined`.\n */\nfunction parseData( elm: HTMLElement ): Array<number | [ number, number ]> | void {\n  const data = attr( elm, ATTRIBUTE_ACTIVE_LINES );\n\n  if ( data ) {\n    try {\n      return JSON.parse( data );\n    } catch ( e ) {\n      error( e.message );\n    }\n  }\n}\n\n/**\n * Normalizes the definition of lines to activate.\n *\n * @param lines - An array with line numbers.\n *\n * @return An array with normalized line numbers.\n */\nfunction normalize( lines: Array<number | [ number, number ]> ): string[] {\n  const numbers = [];\n\n  lines.forEach( range => {\n    if ( ! isArray( range ) ) {\n      range = [ range, range ];\n    }\n\n    const start = ( +range[ 0 ] || 1 ) - 1;\n    const end   = ( +range[ 1 ] || 1 ) - 1;\n\n    for ( let i = start; i <= end; i++ ) {\n      numbers[ i ] = ACTIVE;\n    }\n  } );\n\n  return numbers;\n}\n","import { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { Renderer } from '../../core/Renderer/Renderer';\nimport { assign, attr, isObject, isString } from '../../utils';\n\n\n/**\n * The data attribute name for a caption.\n *\n * @since 0.0.22\n */\nexport const ATTRIBUTE_CAPTION = `data-${ PROJECT_CODE_SHORT }-caption`;\n\n/**\n * The component for wrapping a code snipped by a figure tag and appending a figcaption.\n *\n * @since 0.0.22\n */\nexport function Caption( { event, root, options }: Renderer ) {\n  const attrCaption = root && attr( root, ATTRIBUTE_CAPTION );\n\n  if ( ! attrCaption && ! options.caption ) {\n    return;\n  }\n\n  const captionOptions = options.caption;\n  const { position, html } = assign( {}, isObject( captionOptions ) ? captionOptions : null );\n  const caption = attrCaption || html || ( isString( captionOptions ) ? captionOptions : '' );\n\n  if ( caption ) {\n    const bottom = position === 'bottom';\n\n    event.on( 'open', append => {\n      append( `<figure class=\"${ PROJECT_CODE_SHORT }__figure\">` );\n\n      if ( ! bottom ) {\n        appendCaption( append, caption );\n      }\n    } );\n\n    event.on( 'closed', append => {\n      if ( bottom ) {\n        appendCaption( append, caption, true );\n      }\n\n      append( '</figure>' );\n    } );\n  }\n}\n\n/**\n * Appends a figcaption element with a provided caption.\n *\n * @param append  - The append function.\n * @param caption - A caption.\n * @param bottom  - Optional. Set `true` for a bottom caption.\n */\nfunction appendCaption( append: ( html: string ) => void, caption: string, bottom?: boolean ): void {\n  const className = `${ PROJECT_CODE_SHORT }__figcaption`;\n\n  append( `<figcaption class=\"${ className } ${ className + ( bottom ? '--bottom' : '--top' ) }\">` );\n  append( `<span>${ caption }</span>` );\n  append( `</figcaption>` );\n}\n","import { Renderer } from '../../core/Renderer/Renderer';\nimport { LINE_BREAK } from '../../constants/characters';\nimport { ACTIVE } from '../../constants/classes';\nimport { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { addClass, append, assign, create, isObject, query, styles } from '../../utils';\n\n\n/**\n * Default options for the Copy component.\n *\n * @private\n *\n * @since 0.0.1\n */\nexport const DEFAULT_OPTIONS = {\n  html      : 'Copy',\n  activeHtml: 'Done',\n  duration  : 1000,\n  ariaLabel : 'Copy code to clipboard',\n  position  : 'topRight',\n};\n\n/**\n * The component for creating a copy button and handling click.\n *\n * @since 0.0.1\n */\nexport function Copy( { lines, event, options }: Renderer ): void {\n  if ( options.copy ) {\n    const copyOptions = assign( {}, DEFAULT_OPTIONS, isObject( options.copy ) ? options.copy : {} );\n    const buttonClass = `${ PROJECT_CODE_SHORT }__copy`;\n    const labelClass  = `${ PROJECT_CODE_SHORT }__button__label`;\n\n    options.tools = copyOptions.position;\n\n    event.on( `tools:${ copyOptions.position }`, append => {\n      append( `<button type=\"button\" class=\"rl__button ${ buttonClass }\" aria-label=\"${ copyOptions.ariaLabel }\">` );\n      append( `<span class=\"${ labelClass } ${ labelClass }--inactive\">${ copyOptions.html }</span>` );\n      append( `<span class=\"${ labelClass } ${ labelClass }--active\">${ copyOptions.activeHtml }</span>` );\n      append( `</button>` );\n    } );\n\n    event.on( 'applied', root => {\n      const button = query<HTMLButtonElement>( `.${ buttonClass }`, root );\n      const code   = lines.map( line => line.map( token => token[ 1 ] ).join( '' ) ).join( LINE_BREAK );\n\n      if ( button ) {\n        const onClick = () => { copy( code, button, copyOptions.duration ) };\n        button.addEventListener( 'click', onClick );\n\n        event.on( 'destroy', () => {\n          button.removeEventListener( 'click', onClick );\n        } );\n      }\n    } );\n  }\n}\n\n/**\n * Attempts to copy the provided code by the Clipboard API.\n *\n * @param code     - A code to copy.\n * @param button   - A button element.\n * @param duration - Duration for the button activation.\n */\nfunction copy( code: string, button: HTMLButtonElement, duration: number ): void {\n  const onSuccess = () => {\n    if ( duration ) {\n      toggleClass( button, duration );\n    }\n  };\n\n  if ( navigator.clipboard ) {\n    navigator.clipboard.writeText( code )\n      .then( onSuccess )\n      .catch( () => execCopy( code, onSuccess ) );\n  } else {\n    execCopy( code, onSuccess );\n  }\n}\n\n/**\n * Attempts to copy the provided code by the `document.execCommand()` for old browsers.\n * Note that this method is deprecated.\n *\n * @param code      - Code to copy.\n * @param onSuccess - Called after the copy is done.\n */\nfunction execCopy( code: string, onSuccess: () => void ): void {\n  const textarea = create( 'textarea' );\n  textarea.textContent = code;\n\n  styles( textarea, { position: 'absolute', left: '-99999px' } );\n  append( document.body, textarea );\n\n  textarea.focus();\n  textarea.select();\n\n  let failed;\n\n  try {\n    document.execCommand( 'copy' );\n  } catch ( e ) {\n    alert( 'Failed to copy.' );\n    failed = true;\n  }\n\n  document.body.removeChild( textarea );\n\n  if ( ! failed ) {\n    onSuccess();\n  }\n}\n\n/**\n * Toggles the active class of the button.\n *\n * @param button   - A button element.\n * @param duration - Duration for the button activation.\n */\nfunction toggleClass( button: HTMLButtonElement, duration: number ): void {\n  addClass( button, ACTIVE );\n\n  const prop = '_rlTimer';\n\n  if ( button[ prop ] ) {\n    clearTimeout( button[ prop ] );\n  }\n\n  button[ prop ] = setTimeout( () => {\n    button.classList.remove( ACTIVE );\n  }, duration );\n}\n","import { append }   from '../append/append';\nimport { addClass } from '../addClass/addClass';\n\n\n/**\n * Creates an HTML element.\n *\n * @param tag     - A tag name.\n * @param classes - Optional. Classes to add.\n * @param parent  - Optional. A parent element where the created element is appended.\n */\nexport function create<K extends keyof HTMLElementTagNameMap>(\n  tag: K,\n  classes?: string | string[],\n  parent?: HTMLElement\n): HTMLElementTagNameMap[ K ] {\n  const elm = document.createElement( tag );\n\n  if ( classes ) {\n    addClass( elm, classes );\n  }\n\n  if ( parent ) {\n    append( parent, elm );\n  }\n\n  return elm;\n}\n","import { CATEGORY_SPACE } from '../../constants/categories';\nimport { LINE_BREAK } from '../../constants/characters';\nimport { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { Renderer } from '../../core/Renderer/Renderer';\nimport { Token } from '../../types';\nimport { assign, isObject, startsWith } from '../../utils';\n\n\n/**\n * The class name for added lines.\n *\n * @private\n * @since 0.0.17\n */\nexport const CLASS_ADDED = 'is-added';\n\n/**\n * The class name for deleted lines.\n *\n * @private\n * @since 0.0.17\n */\nexport const CLASS_DELETED = 'is-deleted';\n\n/**\n * The class name for deleted lines.\n *\n * @private\n * @since 0.0.17\n */\nexport const CLASS_DIFF = `${ PROJECT_CODE_SHORT }__diff`;\n\n/**\n * Default options for the Diff component.\n *\n * @since 0.0.17\n */\nconst DEFAULT_OPTIONS = {\n  addedSymbol  : '+',\n  deletedSymbol: '-',\n};\n\n/**\n * The component for highlighting added/deleted lines.\n *\n * @since 0.0.17\n */\nexport function Diff( { event, lines, options }: Renderer ): void {\n  if ( ! options.diff ) {\n    return;\n  }\n\n  options.gutter = true;\n\n  const diffOptions = assign( {}, DEFAULT_OPTIONS, isObject( options.diff ) ? options.diff : null );\n  const added       = [];\n  const deleted     = [];\n\n  lines.forEach( ( tokens, index ) => {\n    if ( tokens.length ) {\n      const text = tokens[ 0 ][ 1 ];\n\n      let processed;\n\n      if ( startsWith( text, diffOptions.addedSymbol ) ) {\n        added.push( index );\n        processed = true;\n      } else if ( startsWith( text, diffOptions.deletedSymbol ) ) {\n        deleted.push( index );\n        processed = true;\n      }\n\n      if ( processed ) {\n        convertSymbols( diffOptions.removeSymbols, tokens );\n      }\n    }\n  } );\n\n  if ( ! added.length && ! deleted.length ) {\n    return;\n  }\n\n  event.on( 'line:open', ( append, classes, i ) => {\n    addClass( added, deleted, i, classes );\n  } );\n\n  event.on( 'gutter:row:open', ( append, classes, i ) => {\n    addClass( added, deleted, i, classes );\n  } );\n\n  event.on( 'gutter:row:opened', ( append, i ) => {\n    let content = LINE_BREAK;\n\n    if ( added.indexOf( i ) > -1 ) {\n      content = diffOptions.addedSymbol;\n    } else if ( deleted.indexOf( i ) > -1 ) {\n      content = diffOptions.deletedSymbol;\n    }\n\n    append( `<span class=\"${ CLASS_DIFF }\">${ content }</span>` );\n  }, 20 );\n\n  event.on( 'lineNumber:open', ( append, classes, i, data ) => {\n    data.skip = deleted.indexOf( i ) > -1;\n  } );\n}\n\n/**\n * Adds a status class according to the added or deleted lines.\n *\n * @param added   - An array with added line indices.\n * @param deleted - An array with deleted line indices.\n * @param index   - A line index.\n * @param classes - An array with line classes.\n */\nfunction addClass( added: number[], deleted: number[], index: number, classes: string[] ): void {\n  if ( added.indexOf( index ) > -1 ) {\n    classes.push( CLASS_ADDED );\n  } else if ( deleted.indexOf( index ) > -1 ) {\n    classes.push( CLASS_DELETED );\n  }\n}\n\n/**\n * Converts +/- symbols to spaces or removes them.\n *\n * @param remove - Whether to remove symbols or not.\n * @param tokens - Target tokens.\n */\nfunction convertSymbols( remove: boolean, tokens: Token[] ): void {\n  const [ category, text ] = tokens[ 0 ];\n\n  if ( remove ) {\n    if ( text.length === 1 ) {\n      tokens.shift();\n    } else {\n      tokens[ 0 ] = [ category, text.slice( 1 ) ];\n    }\n  } else {\n    const spaceToken: Token = [ CATEGORY_SPACE, ' ' ];\n\n    if ( text.length === 1 ) {\n      tokens[ 0 ] = spaceToken;\n    } else {\n      tokens[ 0 ] = [ category, text.slice( 1 ) ];\n      tokens.unshift( spaceToken );\n    }\n  }\n}\n","import { Renderer } from '../../core/Renderer/Renderer';\nimport { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { CODE } from '../../constants/classes';\nimport { styles, throttle, isHTMLElement, query } from '../../utils';\n\n\n/**\n * The throttle duration in milliseconds for resizing gutter rows.\n *\n * @since 0.0.1\n */\nconst THROTTLE_DURATION = 100;\n\n/**\n * The class name for a gutter element.\n *\n * @since 0.0.1\n */\nexport const GUTTER_CLASS_NAME = `${ PROJECT_CODE_SHORT }__gutter`;\n\n/**\n * The class name for row element in a gutter.\n *\n * @since 0.0.1\n */\nexport const GUTTER_ROW_CLASS_NAME = `${ GUTTER_CLASS_NAME }__row`;\n\n/**\n * The component for creating a gutter and its rows.\n * This is usually activated by other components through the `gutter` option.\n *\n * @since 0.0.1\n */\nexport function Gutter( { lines, event, root, options }: Renderer ): void {\n  // Wait for initialization of other components.\n  event.on( 'mounted', () => {\n    if ( ! options.gutter ) {\n      return;\n    }\n\n    event.on( 'open', ( append, classes ) => {\n      classes.push( 'has-gutter' );\n    } );\n\n    event.on( 'body:opened', append => {\n      append( `<div class=\"${ GUTTER_CLASS_NAME }\" aria-hidden=\"true\">` );\n\n      for ( let i = 0; i < lines.length; i++ ) {\n        const classes = [ GUTTER_ROW_CLASS_NAME ];\n        event.emit( 'gutter:row:open', append, classes, i );\n\n        append( `<div class=\"${ classes.join( ' ' ) }\">` );\n        event.emit( 'gutter:row:opened', append, i );\n        append( `</div>` );\n      }\n\n      append( `</div>` );\n    } );\n\n    if ( ! root || typeof window === 'undefined' ) {\n      return;\n    }\n\n    window.addEventListener( 'resize', throttle( resize, THROTTLE_DURATION ) );\n    resize();\n\n    event.on( 'destroy', () => {\n      window.removeEventListener( 'resize', resize );\n    } );\n\n    /**\n     * Resizes rows according to line height.\n     */\n    function resize() {\n      const rows = root.getElementsByClassName( GUTTER_ROW_CLASS_NAME );\n      const code = query( `.${ CODE }`, root );\n\n      if ( rows.length && code ) {\n        for ( let i = 0; i < code.children.length; i++ ) {\n          const row  = rows[ i ];\n          const line = code.children[ i ];\n\n          if ( isHTMLElement( row ) && row.clientHeight !== line.clientHeight ) {\n            styles( row, { height: `${ line.clientHeight }px` } );\n          }\n        }\n      }\n    }\n  } );\n}\n","import { PROJECT_CODE } from '../../../constants/project';\n\n\n/**\n * Displays an error message on the console.\n *\n * @param message - An error message.\n */\nexport function error( message: string ): void {\n  console.error( `[${ PROJECT_CODE }] ${ message }` );\n}\n","import { AnyFunction } from '../../../types';\n\n\n/**\n * Returns a function that invokes the provided function at most once in the specified duration.\n *\n * @since 0.0.1\n *\n * @param callback - A function to throttle.\n * @param interval - A throttle duration in milliseconds.\n *\n * @return A throttled function.\n */\nexport function throttle( callback: AnyFunction, interval: number ): () => void {\n  let timer;\n\n  return function () {\n    if ( ! timer ) {\n      timer = setTimeout( () => {\n        callback();\n        timer = null;\n      }, interval );\n    }\n  };\n}\n","import { Renderer } from '../../core/Renderer/Renderer';\nimport { PROJECT_CODE_SHORT } from '../../constants/project';\n\n\n/**\n * The component for rendering a language name.\n *\n * @since 0.0.1\n */\nexport function LanguageName( { event, info, options }: Renderer ) {\n  const { name } = info;\n\n  if ( options.languageName && name ) {\n    const position = options.languageName === 'topLeft' ? 'topLeft' : 'topRight';\n    options.overlay = options.overlay || {};\n    options.overlay[ position ] = true;\n\n    event.on( `overlay:${ position }`, append => {\n      append( `<span class=\"${ PROJECT_CODE_SHORT }__name\">${ info.name }</span>` );\n    } );\n  }\n}\n","import { LINE_BREAK } from '../../constants/characters';\nimport { Renderer } from '../../core/Renderer/Renderer';\nimport { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { attr } from '../../utils';\n\n\n/**\n * The data attribute name for line numbers.\n * This accepts boolean or number as a value.\n *\n * @private\n * @since 0.0.1\n */\nexport const ATTRIBUTE_LINE_NUMBERS = `data-${ PROJECT_CODE_SHORT }-line-numbers`;\n\n/**\n * The class name for each line number element.\n *\n * @private\n * @since 0.0.23\n */\nexport const LINE_NUMBER_CLASS_NAME = `${ PROJECT_CODE_SHORT }__line-number`;\n\n/**\n * The component for displaying line numbers in a gutter.\n *\n * @since 0.0.1\n */\nexport function LineNumbers( { root, event, options }: Renderer ): void {\n  const data   = root ? attr( root, ATTRIBUTE_LINE_NUMBERS ) : '';\n  const number = data === '' ? +options.lineNumbers : +data;\n\n  if ( number || number === 0 ) {\n    options.gutter = true;\n    let offset = Math.floor( number ) - 1;\n\n    event.on( 'gutter:row:opened', ( append, i ) => {\n      const classes = [ LINE_NUMBER_CLASS_NAME ];\n      const data    = { skip: false, content: i + 1 + offset };\n\n      event.emit( 'lineNumber:open', append, classes, i, data );\n\n      if ( data.skip ) {\n        data.content = LINE_BREAK;\n        offset--;\n      }\n\n      append( `<span class=\"${ classes.join( ' ' ) }\">${ data.content }</span>` );\n    } );\n  }\n}\n","import { PROJECT_CODE_SHORT } from '../../constants/project';\nimport { Renderer } from '../../core/Renderer/Renderer';\nimport { EventBus } from '../../event/EventBus';\n\n\n/**\n * The component for rendering overlay and tools elements.\n *\n * @since 0.0.1\n */\nexport function Overlay( { event, options }: Renderer ) {\n  event.on( 'mounted', () => {\n    const { overlay = {} } = options;\n    const { tools } = options;\n    let { topRight, topLeft } = overlay;\n\n    topRight = topRight || tools === 'topRight';\n    topLeft  = topLeft || tools === 'topLeft';\n\n    [ topRight, topLeft ].forEach( ( active, index ) => {\n      if ( active ) {\n        if ( tools ) {\n          appendTools( event, index === 1 );\n        }\n\n        appendOverlay( event, index === 1 );\n      }\n    } );\n\n    if ( topRight || topLeft ) {\n      event.on( 'open', ( append, classes ) => {\n        classes.push( 'has-top-overlay' );\n      } );\n    }\n  } );\n}\n\n/**\n * Appends HTML for the overlay.\n *\n * @private\n *\n * @param event - The EventBus object.\n * @param left  - Optional. Set `true` for the left overlay.\n */\nfunction appendOverlay( event: EventBus, left?: boolean ) {\n  const className = `${ PROJECT_CODE_SHORT }__overlay`;\n\n  event.on( 'close', append => {\n    append( `<div class=\"${ className } ${ className }--top-${ left ? 'left' : 'right' }\">` );\n    event.emit( `overlay:top${ left ? 'Left' : 'Right' }`, append );\n    append( `</div>` );\n  } );\n}\n\n/**\n * Appends HTML for tools.\n *\n * @private\n *\n * @param event - The EventBus object.\n * @param left  - Optional. Set `true` for the left tools.\n */\nfunction appendTools( event: EventBus, left?: boolean ): void {\n  const position = left ? 'Left' : 'Right';\n\n  event.on( `overlay:top${ position }`, append => {\n    append( `<span class=\"${ PROJECT_CODE_SHORT }__tools\">` );\n    event.emit( `tools:top${ position }`, append );\n    append( `</span>` );\n  } );\n}\n","import { RyuseiLight } from '../core/RyuseiLight/RyuseiLight';\nimport * as languages  from '../languages';\nimport * as components from '../components';\nimport { forOwn } from '../utils';\n\nforOwn( languages, language => {\n  RyuseiLight.register( language() );\n} );\n\nRyuseiLight.compose( components );\n\nexport { RyuseiLight as default } from '../core/RyuseiLight/RyuseiLight';\n"],"names":["LINE_BREAK","CATEGORY_KEYWORD","CATEGORY_COMMENT","CATEGORY_TAG","CATEGORY_SELECTOR","CATEGORY_ATTRIBUTE","CATEGORY_PROPERTY","CATEGORY_VALUE","CATEGORY_CDATA","CATEGORY_PROLOG","CATEGORY_STRING","CATEGORY_NUMBER","CATEGORY_BOOLEAN","CATEGORY_FUNCTION","CATEGORY_CLASS","CATEGORY_OPERATOR","CATEGORY_BRACKET","CATEGORY_DELIMITER","CATEGORY_SPACE","CATEGORY_TEXT","isObject","subject","isArray","Array","isString","isUndefined","isHTMLElement","HTMLElement","toArray","value","addClass","elm","classes","forEach","name","classList","add","append","parent","children","i","length","appendChild","forOwn","object","iteratee","keys","Object","assign","sources","source","key","attr","attrs","getAttribute","setAttribute","String","query","selector","document","querySelector","styles","style","text","node","textContent","assert","condition","message","Error","PROJECT_CODE","before","map","ref","entries","index","find","splice","push","startsWith","string","char","charAt","isStickySupported","sticky","Lexer","language","init","grammar","tokenizers","_this","merge","use","this","bind","reduce","merged","tokenizer","category","regexp","include","slice","_this2","flags","toString","match","replace","replacement","RegExp","tokenizeBy","position","main","command","lastIndex","exec","handle","token","from","indexOf","lines","offset","console","log","lang","input","tokenize","EventBus","on","event","callback","priority","handlers","sort","handler1","handler2","emit","args","handler","destroy","ROOT","BODY","PROJECT_CODE_SHORT","CODE","ACTIVE","Components","Renderer","info","root","options","compose","components","Component","tokens","trim","pop","_this3","renderLines","tag","span","join","j","TOKEN","html","pre","fragment","id","containerClasses","bodyClasses","wrap","REGEXP_NUMBER","REGEXP_BOOLEAN","REGEXP_BRACKET","REGEXP_SPACE","REGEXP_QUOTE","REGEXP_DOUBLE_QUOTE","REGEXP_MULTILINE_COMMENT","REGEXP_SLASH_COMMENT","REGEXP_GENERAL_KEYWORDS","css","findBlock","findSingleAtrule","findAtrule","findSelector","common","block","inner","atrule","paren","url","props","javascript","alias","func","backtick","expression","script","cdata","unshift","jsx","base","findPairedTag","findSelfClosedTag","findBracket","pairedTag","code","selfClosedTag","openTag","tagName","none","xml","typescript","functions","filter","findInterp","singleQuote","doubleQuote","interp","lexers","RyuseiLight","register","languages","concat","getLexer","has","getRenderer","apply","target","elms","querySelectorAll","elmOptions","undefined","renderer","isPre","HTMLPreElement","innerHTML","renderers","ATTRIBUTE_ACTIVE_LINES","appendCaption","caption","bottom","className","DEFAULT_OPTIONS","activeHtml","duration","ariaLabel","execCopy","onSuccess","failed","textarea","createElement","left","body","focus","select","execCommand","e","alert","removeChild","addedSymbol","deletedSymbol","added","deleted","GUTTER_ROW_CLASS_NAME","GUTTER_CLASS_NAME","data","JSON","parse","error","parseData","activeLines","numbers","range","start","end","normalize","attrCaption","captionOptions","copy","copyOptions","labelClass","tools","button","line","onClick","prop","clearTimeout","setTimeout","remove","toggleClass","navigator","clipboard","writeText","then","catch","addEventListener","removeEventListener","diff","gutter","diffOptions","processed","shift","spaceToken","convertSymbols","removeSymbols","content","skip","interval","timer","window","resize","rows","getElementsByClassName","row","clientHeight","height","languageName","overlay","number","lineNumbers","Math","floor","topRight","topLeft","active","appendTools","appendOverlay"],"mappings":";;;;;;gPAMaA,EAAa,KCNbC,EAAsB,UAEtBC,EAAsB,UACtBC,EAAsB,MACtBC,EAAsB,WAEtBC,EAAsB,OACtBC,EAAsB,OACtBC,EAAsB,QAGtBC,EAAsB,QACtBC,EAAsB,SAEtBC,EAAsB,SACtBC,EAAsB,SACtBC,EAAsB,UACtBC,EAAsB,WACtBC,EAAsB,QAGtBC,EAAsB,WACtBC,EAAsB,UACtBC,EAAsB,YAEtBC,EAAsB,QACtBC,EAAsB,gBCnBnBC,EAA4BC,UACvB,OAAZA,GAAuC,iBAAZA,WAUpBC,EAAYD,UACnBE,MAAMD,QAASD,YAqBRG,EAAUH,SACE,iBAAZA,WAUAI,EAAaJ,eACD,IAAZA,WAUAK,EAAeL,UACtBA,aAAmBM,qBCrDZC,EAAYC,UACnBP,EAAYO,GAAUA,EAAQ,CAAEA,YCFzBC,EAAUC,EAAkBC,GAC1CJ,EAASI,GAAUC,SAAS,SAAAC,GACrBA,GACHH,EAAII,UAAUC,IAAKF,eCHTG,EAAQC,EAAqBC,GAC3CA,EAAWX,EAAeW,OAEpB,IAAIC,EAAI,EAAGA,EAAID,EAASE,OAAQD,IACpCF,EAAOI,YAAaH,EAAUC,aCLlBG,EAA0BC,EAAWC,MAC9CD,UACGE,EAAOC,OAAOD,KAAMF,GAEhBJ,EAAI,EAAGA,EAAIM,EAAKL,OAAQD,IAChCK,EAAUD,EAAQE,EAAMN,IAAOM,EAAMN,aCuB3BQ,EAA4CJ,8BAAcK,mCAAAA,2BACxEA,EAAQhB,SAAS,SAAAiB,GACV9B,EAAU8B,IACbP,EAAQO,GAAQ,SAAErB,EAAOsB,GAChB1B,EAAayB,EAAQC,MAC1BP,EAAQO,GAAQD,EAAQC,UAMzBP,WCjCOQ,EAAMrB,EAAcsB,MAC7B7B,EAAU6B,UACNtB,EAAIuB,aAAcD,IAAW,GAGjCjC,EAAUiC,IACbV,EAAQU,GAAO,SAAExB,EAAOsB,GACtBpB,EAAIwB,aAAcJ,EAAKK,OAAQ3B,gBCbrB4B,EACdC,EACApB,mBAAAA,IAAAA,EAAiCqB,UAE1BrB,EAAOsB,cAAkBF,YCHlBG,EAAQ9B,EAAkB8B,GACxClB,EAAQkB,GAAQ,SAAEhC,EAAOsB,GACvBpB,EAAI+B,MAAOX,GAAQK,OAAQ3B,eCCfkC,EAAMC,EAAYD,MAC3BtC,EAAasC,UACTC,EAAKC,YAGdD,EAAKC,YAAcF,WCXLG,EAAQC,EAAgBC,eAAAA,IAAAA,EAAU,KACzCD,QACC,IAAIE,MAAOD,OCHRE,EAAe,uBCOZC,EAAuBC,EAAoBC,EAAaC,OAChEC,WCF6BH,EAAoBrB,OACjD,IAAIX,EAAI,EAAGA,EAAIgC,EAAI/B,OAAQD,OAC1BgC,EAAKhC,GAAK,KAAQW,SACdX,SAIH,EDLMoC,CAAMJ,EAAKC,GAEpBE,GAAS,EACZH,EAAIK,aAAJL,GAAYG,EAAO,UAAMD,IAEzBF,EAAIM,WAAJN,EAAaE,YEVDK,EAAYC,EAAgBC,UACnCD,EAAOE,OAAQ,KAAQD,MCA1BE,GAAsB1D,EAAa,IAAI2D,QAOhCC,wBAqBEC,QACNA,SAAWA,OACXC,KAAMD,8BAQHC,KAAA,SAAMD,cACd3C,EAAQ2C,EAASE,SAAS,SAAEC,EAAYtC,GACtCmC,EAASE,QAASrC,GAAQuC,EAAKC,MAAOL,EAAUG,MAGlD9C,EAAQ2C,EAASM,IAAKC,KAAKN,KAAKO,KAAMD,UAW9BF,MAAA,SAAOL,EAAoBG,qBAC5BA,EAAWM,QAAQ,SAAEC,EAAQC,OAC1BC,EAAqBD,KAAXE,EAAWF,QAExBlB,EAAYmB,EAAU,OAAWC,EAAS,KACvCC,EAAUd,EAASE,QAASU,EAASG,MAAO,IAClDnC,EAAQkC,GACRJ,EAAOlB,WAAPkB,EAAgBM,EAAKX,MAAOL,EAAUc,QACjC,KACCG,EAAQJ,EAAOK,WAAWC,MAAO,aAAe,GAAIC,QAAS,QAAS,IACxExD,EAASiD,EAAOjD,QAAWiC,EAAoB,GAAK,OAExDxC,EAAQ2C,EAASpC,QAAQ,SAAEyD,EAAaxD,GACtCD,EAASA,EAAOwD,QAAS,IAAIE,WAAazD,EAAQ,KAAOwD,EAAYzD,WAGvE+C,EAAW,GAAM,IAAIW,OAAQ1D,GAAUiC,EAAoB,IAAM,KAAQoB,GACzEP,EAAOlB,KAAMmB,UAGRD,IACN,OAYKa,WAAA,SAAY9C,EAAcuB,EAAoBG,OAClDd,EAAW,EACXmC,EAAW,EAEfC,EACA,KAAQpC,EAAQZ,EAAKtB,QAAS,KACtB,IAAID,EAAI,EAAGA,EAAIiD,EAAWhD,OAAQD,IAAM,KACtCyD,EAAYR,EAAYjD,GACxB2D,EAAYF,EAAW,GACvBe,EAAYf,EAAW,GAE7BE,EAAOc,UAAYtC,MAEb8B,EAAQN,EAAOe,KAAMnD,MAEpB0C,GAAWA,EAAO,OAIpBK,EAAWnC,QACTG,KAAM,CAAE3D,EAAe4C,EAAKsC,MAAOS,EAAUnC,KAGnC,UAAZqC,EAAsB,CACzBF,EAAWnC,QACLoC,KAMRD,EADAnC,GAFekB,KAAKsB,OAAQV,EAAOnB,EAAUG,EAAYjD,KAEtC,EAGF,WAAZwE,QACGD,WAGCA,GAGXpC,WAGGmC,EAAWnC,QACTG,KAAM,CAAE3D,EAAe4C,EAAKsC,MAAOS,KAGnCnC,KAQCG,KAAA,SAAMsC,WAGVzC,EAFIuB,EAAakB,KAGjBC,EAAO,EACPtD,EAAOqD,EAAO,IAERzC,EAAQZ,EAAKuD,QAAStH,EAAYqH,KAAY,GACjDA,EAAO1C,QACL4C,MAAO1B,KAAKlB,OAAQG,KAAM,CAAEoB,EAAUnC,EAAKsC,MAAOgB,EAAM1C,KAG/D0C,EAAO1C,EAAQ,OACV4C,QAAS1B,KAAKlB,OAAU,IAG/BZ,EAAOA,EAAKsC,MAAOgB,UAGZE,MAAO1B,KAAKlB,OAAQG,KAAM,CAAEoB,EAAUnC,OAarCoD,OAAA,SAAQV,EAAwBnB,EAAoBW,OACpDC,EAAaD,KACjBuB,EAAS,KAERtB,EAAW,KACNnC,EAAS0C,QAEO,WAAnBR,EAAW,IAEdwB,QAAQC,IAAK3D,EAAMkC,GAGhBlB,EAAYmB,EAAU,KAAQ,CACjChC,EAAQoB,EAASM,SAEX+B,EAAOrC,EAASM,IAAKM,EAASG,MAAO,WAC3CnC,EAAQyD,GAED9B,KAAKgB,WAAY9C,EAAM4D,EAAMA,EAAKnC,QAAQuB,SAG9ChC,EAAYmB,EAAU,KAAQ,KAC3BT,EAAaH,EAASE,QAASU,EAASG,MAAO,IACrDnC,EAAQuB,OAEF5D,EAA2B,UAAnBoE,EAAW,GAAkBQ,EAAMmB,MAAMvB,MAAOI,EAAM9B,OAAUZ,SACvE8B,KAAKgB,WAAYhF,EAAOyD,EAAUG,GAG3C+B,EAASzD,EAAKtB,YACTqC,KAAM,CAAEoB,EAAUnC,WAGlByD,KAUTK,SAAA,SAAU9D,eACHwD,MAAQ,CAAE,SACV5C,MAAQ,OAERkC,WAAY9C,EAAM8B,KAAKP,SAAUO,KAAKP,SAASE,QAAQuB,MAErDlB,KAAK0B,YC/NHO,wCAIU,8BASrBC,GAAA,SAAIC,EAAeC,EAAuBC,YAAAA,IAAAA,EAAW,QAC7CC,EAAatC,KAAKsC,SAAUH,GAAUnC,KAAKsC,SAAUH,IAAW,GACtEG,EAASrD,KAAM,CAAEmD,SAAAA,EAAUC,SAAAA,IAC3BC,EAASC,MAAM,SAAEC,EAAUC,UAAcD,EAASH,SAAWI,EAASJ,eASxEK,KAAA,SAAMP,8BAAUQ,mCAAAA,qBACZ3C,KAAKsC,SAAUH,IAAW,IAAK/F,SAAS,SAAAwG,GACxCA,EAAQR,eAARQ,EAAqBD,SAOzBE,QAAA,gBACOP,SAAW,SCzCPQ,EAAYrE,EAEZsE,EAAgBC,WAChBC,EAAgBD,WAGhBE,EAAY,YCEnBC,EAAwC,GAOjCC,wBA6CE1B,EAAkB2B,EAAoBC,EAAoBC,YAAAA,IAAAA,EAAmB,eA9BzE,cAoBU,IAAItB,OAWxBP,MAAUA,OACV2B,KAAUA,OACVC,KAAUA,OACVC,QAAUA,OAEV7D,SA7CA8D,QAAP,SAAgBC,GACd3G,EAAQ2G,GAAY,SAAEC,EAAWrH,GAC/B8G,EAAY9G,GAASqH,iCAiDfhE,KAAA,sBACAgC,EAAU1B,KAAV0B,SAEHA,EAAM9E,OAAS,KACZ+G,EAASjC,EAAOA,EAAM9E,OAAS,GAE9B+G,EAAO/G,SAA8B,IAAlB+G,EAAO/G,QAAkB+G,EAAQ,GAAK,GAAIC,SAElElC,EAAMmC,MAIV/G,EAAQqG,GAAY,SAAAO,GAClBA,EAAWI,WAGR3B,MAAMO,KAAM,cAUTqB,YAAA,SAAavH,WACf2F,EAAQnC,KAAKmC,MACb6B,EAAQhE,KAAKuD,QAAQU,KAAO,OAAS,OAEjCtH,EAAI,EAAGA,EAAIqD,KAAK0B,MAAM9E,OAAQD,IAAM,KACtCgH,EAAU3D,KAAK0B,MAAO/E,GACtBR,EAAU,CDpGO6G,eCsGvBb,EAAMO,KAAM,YAAalG,EAAQL,EAASQ,GAC1CH,iBAAwBL,EAAQ+H,KAAM,WAEjCP,EAAO/G,WACJ,IAAIuH,EAAI,EAAGA,EAAIR,EAAO/G,OAAQuH,IAAM,KAClC5C,EAAUoC,EAAQQ,GAClBhI,EAAU,CAAMiI,iBAAoC7C,EAAO,IAEjEY,EAAMO,KAAM,QAASnB,EAAOpF,GAE5BK,MAAawH,aAAgB7H,EAAQ+H,KAAM,WAAwB3C,EAAO,GC/GpEV,QAAS,KAAM,SAAUA,QAAS,KAAM,cD+GwCmD,YAGxFxH,EAAQrC,GAGVqC,EAAQ,UACR2F,EAAMO,KAAM,cAAelG,EAAQG,OAWvC0H,KAAA,SAAMC,OACEnC,EAAQnC,KAAKmC,MACfkC,EAAQ,GAEN7H,EAAS,SAAE+H,GAAwBF,GAAQE,GAE5CD,IACHD,kBAAwBvB,MAAUA,OAAW9C,KAAKqD,KAAKmB,aAGnDC,EAAmB,CD/IAzB,iBCgJzBb,EAAMO,KAAM,OAAQlG,EAAQiI,GAE5BJ,kBAAwBI,EAAiBP,KAAM,UAC/C/B,EAAMO,KAAM,SAAUlG,OAEhBkI,EAAc,CAAM3B,GAAS/C,KAAKuD,QAAQoB,uBAA4B,YAC5ExC,EAAMO,KAAM,YAAalG,EAAQkI,GAEjCL,kBAAwBK,EAAYR,KAAM,UAC1C/B,EAAMO,KAAM,cAAelG,GAE3B6H,iCACKN,YAAavH,GAClB6H,YAEAlC,EAAMO,KAAM,aAAclG,GAC1B6H,YAEAlC,EAAMO,KAAM,QAASlG,GACrB6H,YAEAlC,EAAMO,KAAM,SAAUlG,GAEjB8H,IACHD,aAGKA,KAMTxB,QAAA,gBACOV,MAAMO,KAAM,gBACZP,MAAMU,gBErLF+B,EAAgB,4CAEhBC,EAAiB,qBAEjBC,EAAiB,YAEjBC,EAAe,SAEfC,EAAe,gBAEfC,EAAsB,gBAEtBC,EAA2B,mBAE3BC,GAAuB,SAEvBC,GAA0B,yJCMvBC,WACP,CACLb,GAAM,MACNnI,KAAM,MAENsD,QAAS,CACPuB,KAAM,CACJ,CAAE,YAGA,sBAGA,eAGJoE,UAAW,CACT,CAAE,SAAU,2HAAyB,UAGvCC,iBAAkB,CAChB,CAAE,UAAW,4BAIfC,WAAY,CACV,CAAE,UAAW,oCAIfC,aAAc,CACZ,CAAE,YAAa,yGAGjBC,OAAQ,CACN,CAAE7K,EAAiB,oCACnB,CAAER,EAAkB6K,GACpB,CAAE7J,EAAgB0J,IAGpBY,MAAO,CACL,CAAE,SAAU,IAAK,SACjB,CAAExK,EAAkB,IAAK,UACzB,CAAE,eACF,CAAE,iBACF,CAAEE,EAAgB0J,IAGpBa,MAAO,CACL,CAAEzK,EAAkB,KACpB,CAAE,WACF,CAAE,cACF,CAAE,UACF,CAAE,eACF,CAAE,GAAI,IAAK,UAGb0K,OAAQ,CACN,CAAE,WACF,CAAE,OAAQ,UAAW,SACrB,CAAExK,EAAgB0J,GAClB,CtBhF2B,SsBgFR,aACnB,CAAE3J,EAAoB,SACtB,CAAE,SAAU,KAAM,UAGpB0K,MAAO,CACL,CAAE3K,EAAkB,OACpB,CAAE,WACF,CAAE,SAAU,KAAM,SAClB,CAAEA,EAAkB,KAAM,UAC1B,CAAE,WAGJ0C,SAAU,CACR,CAAE,WACF,CAAE3C,EAAmB,SACrB,CAAEC,EAAkB,WACpB,CAAEC,EAAoB,KACtB,CAAEb,EAAmB,UACrB,CAAEA,EAAmB,aACrB,CAAED,EAAc,gBAChB,CAAEC,EAAmB,QAGvBwL,IAAK,CACH,CAAE,WACF,CAAE/K,EAAmB,QACrB,CAAEG,EAAkB,MACpB,CAAEN,EAAiB,SACnB,CAAEM,EAAkB,KAAM,WAG5B6K,MAAO,CACL,CAAEvL,EAAmB,gCACrB,CAAE,OAAQ,UAAW,SACrB,CAAEO,EAAmB,oBACrB,CAAEZ,EAAkB,0CACpB,CAAEK,EAAmB,mBACrB,CAAEK,EAAiB,+BACnB,CAAEA,EAAiB,qBACnB,CAAEA,EAAiB,8BACnB,CAAEM,EAAoB,SACtB,CAAE,SAAU,KAAM,SAClB,CAAED,EAAkB,UACpB,CAAEE,EAAgB0J,eChHVkB,WACP,CACLzB,GAAO,aACPnI,KAAO,aACP6J,MAAO,CAAE,MAET7I,OAAQ,CACN8I,KAAM,4CAGRxG,QAAS,CACPuB,KAAM,CACJ,CAAErG,EAAiBmK,GACnB,CAAEnK,EAAiBoK,GACnB,CAAE,YAAa,IAAK,SACpB,CAAE5K,EAAkB6K,GACpB,CAAE7K,EAAkB8K,IACpB,CvBd2B,SuBcR,uCACnB,CAAE/K,EAAkBgL,IACpB,CAAEhL,EAAkB,8LACpB,CAAEA,EAAkB,8BACpB,CAAEa,EAAgB,mBAClB,CAAED,EAAmB,mBACrB,CAAED,EAAkB8J,GACpB,CvBtB2B,YuBsBL,aACtB,CvB7B2B,auB6BJ,qBACvB,CAAE/J,EAAiB8J,GACnB,CAAE1J,EAAmB,MACrB,CAAEA,EAAmB,yFACrB,CAAEC,EAAkB2J,GACpB,CAAE1J,EAAoB,UACtB,CAAEC,EAAgB0J,IAGpBqB,SAAU,CACR,CAAEvL,EAAiB,MACnB,CAAEA,EAAiB,0BACnB,CAAE,cAAe,MAAO,SACxB,CAAEA,EAAiB,IAAK,WAG1BwL,WAAY,CACV,CAAEjL,EAAoB,QACtB,CAAEA,EAAoB,IAAK,UAC3B,CAAE,qBCnBMiJ,GAAMd,YAAAA,IAAAA,EAAuB,QACrC+C,GAAW/C,EAAQ+C,QAAUL,MAC7BhI,GAAWsF,EAAQtF,OAASoH,MAC5BkB,EAAS,CAAE5L,EAAgB,mCAGjC2L,EAAO3G,QAAQuB,KAAKsF,QAASD,GAC7BtI,EAAM0B,QAAQuB,KAAKsF,QAASD,GAErB,CACL/B,GAAO,OACP0B,MAAO,CAAE,UACT7J,KAAO,OACP0D,IAAO,CAAEuG,OAAAA,EAAQrI,MAAAA,GAEjB0B,QAAS,CACPuB,KAAM,CACJ,CAAE7G,EAAkB,+BACpB,CAAEO,EAAiB,uBACnB2L,EACA,CAAE,UAAW,sCACb,CAAE,SAAU,oCACZ,CAAE,OAAQ,cACV,CxBvD2B,SwBuDR,sBACnB,CAAElL,EAAgB0J,IAGpBwB,MAAO,CACL,CAAE5L,EAAgB,6BAGpB2L,OAAQ,CACN,CAAE,OAAQ,qBACV,CAAE,UACF,CAAE,UAAW,yBACb,CAAE,OAAQ,eAGZrI,MAAO,CACL,CAAE,OAAQ,oBACV,CAAE,SAAU,wBACZ,CAAE,OAAQ,cAGZ+F,IAAK,CACH,CAAE,QAAS,yJACX,CAAE1J,EAAc,gBAChB,CAAEa,EAAkB,QACpB,CAAEC,EAAoB,QAGxBmC,KAAM,CACJ,CAAElC,EAAgB0J,GAClB,CAAErK,EAAgB,sBAClB,CAAEU,EAAoB,QACtB,CAAEZ,EAAoB,2BCtEdiM,GAAKlD,YAAAA,IAAAA,EAAsB,QACnC9D,EAAWtC,GAAUoG,EAAQmD,MAAQT,MAAgB,CACzDzB,GAAO,MACPnI,KAAO,MACP6J,MAAO,CAAE,WAGHvG,EAAYF,EAAZE,eAERjB,EAAQiB,EAAQuB,KAAMjG,EAAgB,CAAE,CAAE,kBAAoB,CAAE,wBAEhEkC,EAAQwC,EAAS,CAEfgH,cAAe,CACb,CAAE,aAAc,uMAA8C,UAIhEC,kBAAmB,CACjB,CAAE,iBAAkB,4DAGtBC,YAAa,CACX,CAAE,QAAS,IAAK,UAGlBC,UAAW,CACT,CAAE,WAAY,KAAM,SACpB,CAAE,gBACF,CAAE,kBACF,CAAE,sBACF,CAAE,WAAY,qBAAsB,UACpC,CAAEzL,EAAgB0J,IAGpBgC,KAAM,CACJ,CAAE5L,EAAkB,MACpB,CAAEA,EAAkB,IAAK,UACzB,CAAE,gBACF,CAAE,UAGJ6L,cAAe,CACb,CAAE,WAAY,KAAM,UAGtBC,QAAS,CACP,CAAE,WAAY,mBACd,CAAE,gBACF,CAAEzM,EAAoB,eACtB,CAAEE,EAAgB,sBAClB,CAAEW,EAAgB0J,GAClB,CAAE3J,EAAoB,QACtB,CAAED,EAAkB,IAAK,WAG3B+L,QAAS,CACP,CAAE/L,EAAkB,QACpB,CAAEE,EAAgB0J,GAClB,CAAE3J,EAAoB,MACtB,CAAEH,EAAgB,gBAClB,CAAEX,EAAc,kBAIbmF,WCpFO0H,WACP,CACL3C,GAAS,OACTnI,KAAS,GACTsD,QAAS,CAAEuB,KAAM,cCDLkG,SACR3H,EAAWtC,EAAQkH,KAAQ,CAC/BG,GAAO,MACPnI,KAAO,MACP6J,MAAO,YAGTzG,EAASE,QAAQuB,KAAKsF,QAAS,CAAE5L,EAAiB,mBAE3C6E,WCTO4H,SACR5H,EAAWtC,EAAQ8I,KAAc,CACrCzB,GAAO,aACPnI,KAAO,aACP6J,MAAO,CAAE,QAGHvG,EAAYF,EAAZE,QACAuB,EAAYvB,EAAZuB,YAERxC,EAAQwC,EAAM9G,EAAkB,CAC9B,CACEA,EACA,yHAIJsE,EAAQwC,EAAMlG,EAAmB,CAC/B,CAAE,aAAc,oEAGlBmC,EAAQwC,EAAS,CACf2H,WACE,CAAEtM,EAAmB,mBAElBkG,EAAKqG,QAAQ,SAAAnH,SAAgC,eAAnBA,EAAW,SAIrCX,0FCxBA,CACL+E,GAAM,OACNnI,KAAM,OAENsD,QAAS,CACPuB,KAAM,CACJ,CAAEzG,EAAmB,mBACrB,CAAEI,EAAiBoK,GACnB,CAAE7K,EAAkB,YACpB,CAAEU,EAAiB,mCACnB,CAAEK,EAAkB,WACpB,CAAEJ,EAAkB8J,GACpB,CAAE3J,EAAmB,KACrB,CAAEE,EAAoB,KACtB,CAAEC,EAAgB0J,0CCblBtF,EAAWtC,EAAQkI,KAAO,CAC9Bb,GAAM,OACNnI,KAAM,SAGAsD,EAAYF,EAAZE,eAERxC,EAAQwC,EAAS,CACf2F,UAAW,EAKP,SAAU,4OAAsF,UAIpGC,iBAAkB,CAChB,CAAE,UAAW,kCAGfC,WAAY,CACV,CAAE,UAAW,0CAIfC,aAAc,CACZ,CAAE,YAAa,yCAAoB,KAGrC+B,WAAY,CACV,CAAE,UAAW,KAAM,UAGrB9B,OAAQ,CACN,CAAE,WACF,CAAErL,EAAkB6K,GACpB,CAAE7K,EAAkB8K,IACpB,CAAE/J,EAAoB,KACtB,CAAEC,EAAgB0J,IAGpB5F,OAAQ,CACN,CAAE,eAAgB,IAAK,SACvB,CAAE,eAAgB,IAAK,UAGzBsI,YAAa,CACX,CAAE5M,EAAiB,MACnB,CAAE,eACF,CAAEA,EAAiB,sBACnB,CAAEA,EAAiB,IAAK,WAG1B6M,YAAa,CACX,CAAE7M,EAAiB,MACnB,CAAE,eACF,CAAEA,EAAiB,sBACnB,CAAEA,EAAiB,IAAK,WAG1BgD,SAAU,CACR,CAAE,WACF,CAAE,eACF,CAAE3C,EAAmB,SACrB,CAAEC,EAAkB,WACpB,CAAEC,EAAoB,KACtB,CAAEb,EAAmB,gBACrB,CAAEA,EAAmB,mBACrB,CAAED,EAAc,oBAChB,CAAEC,EAAmB,sBAGvBwL,IAAK,CACH,CAAE,WACF,CAAE,eACF,CAAE/K,EAAmB,QACrB,CAAEG,EAAkB,MACpB,CAAEN,EAAiB,eACnB,CAAEA,EAAiB,SACnB,CAAEM,EAAkB,KAAM,WAG5BwM,OAAQ,CACN,CAAEvM,EAAoB,MACtB,CAAEA,EAAoB,IAAK,UAC3B,CAAE,WACF,CAAE,aAINuE,EAAQiG,MAAMY,QAAS,CAAE,gBAEzB9H,EAAQiB,EAAQkG,OAAQ,OAAQ,CAAE,CAAE,iBACpCnH,EAAQiB,EAAQqG,MAAOvL,EAAmB,CACxC,CAAE,eACF,C9BxG+B,W8BwGV,eAGhBgF,yBCzGAtC,EAAQiK,KAAO,CACpB5C,GAAO,MACPnI,KAAO,MACP6J,MAAO,4BCFF/I,EAAQsJ,GAAK,CAAEC,KAAMW,KAAgB,CAC1C7C,GAAO,MACPnI,KAAO,oCCGUkH,YAAAA,IAAAA,EAAsB,QACnC9D,EAAWtC,EAAQkH,GAAMd,GAAW,CAAEiB,GAAI,MAAOnI,KAAM,MAAO6J,MAAO,YAG3EzG,EAASE,QAAQuB,KAAKjC,KAAM,CAAE,UAAW,iBAElCQ,YCXHmI,GAAgC,GAOzBC,yBA2EEtE,kBAZ8B,QAapCA,QAAUpG,EAAQ,GAAIoG,KAtEtBuE,SAAP,SAAiBC,GACfhM,EAASgM,GAAY3L,SAAS,SAAAqD,OACpB+E,EAAO/E,EAAP+E,GAEHA,IAAQoD,GAAQpD,KACjB/E,EAASyG,OAAS,IAAK8B,OAAQxD,GAAKpI,SAAS,SAAAoI,GAC7CoD,GAAQpD,GAAO,IAAIhF,EAAOC,YAqB3BuC,SAAP,SAAiB+E,EAActH,UACtBoI,EAAYI,SAAUxI,GAAWuC,SAAU+E,MAQ7CmB,IAAP,SAAYzI,WACAmI,GAAQnI,MASHwI,SAAP,SAAiBxI,UAClBmI,GAAOT,MACZU,EAAYC,SRhET,CACLtD,GAAS,OACTnI,KAAS,GACTsD,QAAS,CAAEuB,KAAM,MQgEV0G,GAAQnI,IAAcmI,GAAOT,iCA6B5BgB,YAAA,SAAapB,EAAc7K,EAAmBqH,OAGhD9D,GAFN8D,EAAUpG,EAAQ,GAAI6C,KAAKuD,QAASA,IAEP9D,WACRoI,EAAYI,SAAUxI,GAAWA,SAA9CpD,IAAAA,KAAMmI,IAAAA,UACP,IAAIpB,EAAUyE,EAAY7F,SAAU+E,EAAMtH,GAAY,CAAEpD,KAAAA,EAAMmI,GAAAA,GAAMtI,EAAKqH,MASlF6E,MAAA,SAAOC,EAA0B9E,WACzB+E,EAAO3M,EAAU0M,GAAWvK,SAASyK,iBAAkBF,GAAW,CAAEA,GAEhE1L,EAAI,EAAGA,EAAI2L,EAAK1L,OAAQD,IAAM,KAChCT,EAAMoM,EAAM3L,MAEbd,EAAeK,GAAQ,KACpBsM,EAAarL,EAAQ,GAAIoG,EAAS,CAAE9D,SAAUlC,EAAMrB,4BAA6BuM,IACjFC,EAAa1I,KAAKmI,YAAajK,EAAMhC,GAAOA,EAAKsM,GACjDG,EAAazM,aAAe0M,eAE7BD,GACH1M,EAAUC,EAAK,CAAE4G,EAAUA,OAAW4F,EAASrF,KAAKmB,KAGtDtI,EAAI2M,UAAYH,EAASrE,MAAQsE,GAEjCD,EAASvG,MAAMO,KAAM,UAAWxG,QAC3B4M,UAAU7J,KAAMyJ,QAa3BrE,KAAA,SAAM0C,EAAcxD,UAClBlF,EAAQ1C,EAAUoL,GAAQ,iBACnB/G,KAAKmI,YAAapB,EAAM,KAAMxD,GAAUc,MAAM,MAMvDxB,QAAA,gBACOiG,UAAU1M,SAAS,SAAAsM,GACtBA,EAAS7F,mBAtHNgF,WAAUzE,EAASI,YC7BfuF,mCC2CJC,GAAexM,EAAkCyM,EAAiBC,OACnEC,EAAgBnG,iBAEtBxG,wBAA+B2M,MAAeA,GAAcD,EAAS,WAAa,eAClF1M,WAAkByM,aAClBzM,uBC/CW4M,GAAkB,CAC7B/E,KAAY,OACZgF,WAAY,OACZC,SAAY,IACZC,UAAY,yBACZtI,SAAY,qBAqELuI,GAAUzC,EAAc0C,OC5E/BzF,EACA7H,EACAM,EAEMP,EDkFFwN,EATEC,GC7EN3F,ED6EyB,WCzEnB9H,EAAM4B,SAAS8L,cAAe5F,GAE/B7H,GACHF,EAAUC,EAAKC,GAGZM,GACHD,EAAQC,EAAQP,GAGXA,GDgEPyN,EAASvL,YAAc2I,EAEvB/I,EAAQ2L,EAAU,CAAE1I,SAAU,WAAY4I,KAAM,aAChDrN,EAAQsB,SAASgM,KAAMH,GAEvBA,EAASI,QACTJ,EAASK,aAKPlM,SAASmM,YAAa,QACtB,MAAQC,GACRC,MAAO,mBACPT,GAAS,EAGX5L,SAASgM,KAAKM,YAAaT,GAEpBD,GACLD,QEzEEL,GAAkB,CACtBiB,YAAe,IACfC,cAAe,cA4ERrO,GAAUsO,EAAiBC,EAAmB1L,EAAe3C,GAC/DoO,EAAM9I,QAAS3C,IAAW,EAC7B3C,EAAQ8C,KAvGe,YAwGbuL,EAAQ/I,QAAS3C,IAAW,GACtC3C,EAAQ8C,KAjGiB,kBCGhBwL,GAA4BC,mFLLVvI,IAAAA,MAAOmB,IAAAA,KAAMC,IAAAA,QACpC7B,EAAU4B,YA0BEpH,OACZyO,EAAOpN,EAAMrB,EAAK6M,OAEnB4B,aAEMC,KAAKC,MAAOF,GACnB,MAAQT,GM7CS3L,EN8CV2L,EAAE3L,QM7CbqD,QAAQkJ,uBAA+BvM,OADlBA,ENaGwM,CAAWzH,IAAYC,EAAQyH,eAElDvP,EAASiG,GAAU,KAChBsJ,WA0CUtJ,OACZuJ,EAAU,UAEhBvJ,EAAMtF,SAAS,SAAA8O,GACNzP,EAASyP,KACdA,EAAQ,CAAEA,EAAOA,YAGbC,IAAWD,EAAO,IAAO,GAAM,EAC/BE,IAAWF,EAAO,IAAO,GAAM,EAE3BvO,EAAIwO,EAAOxO,GAAKyO,EAAKzO,IAC7BsO,EAAStO,GAAMuG,KAIZ+H,EA1DeI,CAAW3J,GAE/BS,EAAMD,GAAI,mBAAmB,SAAEmC,EAAMlI,EAAS2C,GACvCkM,EAAalM,IAChB3C,EAAQ8C,KAAM+L,EAAalM,OAI/BqD,EAAMD,GAAI,aAAa,SAAEmC,EAAMlI,EAAS2C,GACjCkM,EAAalM,IAChB3C,EAAQ8C,KAAM+L,EAAalM,iCCjBRqD,IAAAA,MAAOmB,IAAAA,KAAMC,IAAAA,QAChC+H,EAAchI,GAAQ/F,EAAM+F,wBAE3BgI,GAAiB/H,EAAQ0F,aAI1BsC,EAAiBhI,EAAQ0F,UACJ9L,EAAQ,GAAI5B,EAAUgQ,GAAmBA,EAAiB,MAA7EtK,IAAAA,SAAUoD,IAAAA,KACZ4E,EAAUqC,GAAejH,IAAU1I,EAAU4P,GAAmBA,EAAiB,OAElFtC,EAAU,KACPC,EAAsB,WAAbjI,EAEfkB,EAAMD,GAAI,QAAQ,SAAA1F,GAChBA,iCAEO0M,GACLF,GAAexM,EAAQyM,MAI3B9G,EAAMD,GAAI,UAAU,SAAA1F,GACb0M,GACHF,GAAexM,EAAQyM,GAAS,GAGlCzM,EAAQ,wCCjBUkF,IAAAA,MAAOS,IAAAA,MAAOoB,IAAAA,WAC/BA,EAAQiI,KAAO,KACZC,EAActO,EAAQ,GAAIiM,GAAiB7N,EAAUgI,EAAQiI,MAASjI,EAAQiI,KAAO,IAErFE,EAAkB1I,oBAExBO,EAAQoI,MAAQF,EAAYxK,SAE5BkB,EAAMD,YAAcuJ,EAAYxK,UAAa,SAAAzE,GAC3CA,mEAAkFiP,EAAYlC,gBAC9F/M,kBAAyBkP,MAAgBA,iBAA2BD,EAAYpH,gBAChF7H,kBAAyBkP,MAAgBA,eAAyBD,EAAYpC,sBAC9E7M,kBAGF2F,EAAMD,GAAI,WAAW,SAAAoB,OACbsI,EAAShO,cAA+C0F,GACxDyD,EAASrF,EAAM/C,KAAK,SAAAkN,UAAQA,EAAKlN,KAAK,SAAA4C,UAASA,EAAO,MAAM2C,KAAM,OAAOA,KAAM/J,MAEhFyR,EAAS,KACNE,EAAU,qBAkBT/E,EAAc6E,EAA2BtC,OAChDG,EAAY,WACXH,YAqDasC,EAA2BtC,GAC/CrN,EAAU2P,EAAQ1I,OAEZ6I,EAAO,WAERH,EAAQG,IACXC,aAAcJ,EAAQG,IAGxBH,EAAQG,GAASE,YAAY,WAC3BL,EAAOtP,UAAU4P,OAAQhJ,KACxBoG,GA/DC6C,CAAaP,EAAQtC,IAIpB8C,UAAUC,UACbD,UAAUC,UAAUC,UAAWvF,GAC5BwF,KAAM9C,GACN+C,OAAO,kBAAMhD,GAAUzC,EAAM0C,MAEhCD,GAAUzC,EAAM0C,GA9BY+B,CAAMzE,EAAM6E,EAAQH,EAAYnC,WACxDsC,EAAOa,iBAAkB,QAASX,GAElC3J,EAAMD,GAAI,WAAW,WACnB0J,EAAOc,oBAAqB,QAASZ,iCEJvB3J,IAAAA,MAAOT,IAAAA,MAAO6B,IAAAA,WAC7BA,EAAQoJ,MAIfpJ,EAAQqJ,QAAS,MAEXC,EAAc1P,EAAQ,GAAIiM,GAAiB7N,EAAUgI,EAAQoJ,MAASpJ,EAAQoJ,KAAO,MACrFpC,EAAc,GACdC,EAAc,GAEpB9I,EAAMtF,SAAS,SAAEuH,EAAQ7E,MAClB6E,EAAO/G,OAAS,KAGfkQ,EAFE5O,EAAOyF,EAAQ,GAAK,GAIrBzE,EAAYhB,EAAM2O,EAAYxC,cACjCE,EAAMtL,KAAMH,GACZgO,GAAY,GACF5N,EAAYhB,EAAM2O,EAAYvC,iBACxCE,EAAQvL,KAAMH,GACdgO,GAAY,GAGTA,YAyDcZ,EAAiBvI,SACbA,EAAQ,GAA3BtD,OAAUnC,UAEbgO,EACkB,IAAhBhO,EAAKtB,OACR+G,EAAOoJ,QAEPpJ,EAAQ,GAAM,CAAEtD,EAAUnC,EAAKsC,MAAO,QAEnC,KACCwM,EAAoB,CAAE3R,EAAgB,KAEvB,IAAhB6C,EAAKtB,OACR+G,EAAQ,GAAMqJ,GAEdrJ,EAAQ,GAAM,CAAEtD,EAAUnC,EAAKsC,MAAO,IACtCmD,EAAO6C,QAASwG,KAxEdC,CAAgBJ,EAAYK,cAAevJ,QAK1C4G,EAAM3N,QAAY4N,EAAQ5N,UAIjCuF,EAAMD,GAAI,aAAa,SAAE1F,EAAQL,EAASQ,GACxCV,GAAUsO,EAAOC,EAAS7N,EAAGR,MAG/BgG,EAAMD,GAAI,mBAAmB,SAAE1F,EAAQL,EAASQ,GAC9CV,GAAUsO,EAAOC,EAAS7N,EAAGR,MAG/BgG,EAAMD,GAAI,qBAAqB,SAAE1F,EAAQG,OACnCwQ,EAAUhT,EAEToQ,EAAM9I,QAAS9E,IAAO,EACzBwQ,EAAUN,EAAYxC,YACZG,EAAQ/I,QAAS9E,IAAO,IAClCwQ,EAAUN,EAAYvC,eAGxB9N,4BAA0C2Q,eACzC,IAEHhL,EAAMD,GAAI,mBAAmB,SAAE1F,EAAQL,EAASQ,EAAGgO,GACjDA,EAAKyC,KAAO5C,EAAQ/I,QAAS9E,IAAO,+BCtEd+E,IAAAA,MAAOS,IAAAA,MAAOmB,IAAAA,KAAMC,IAAAA,QAE5CpB,EAAMD,GAAI,WAAW,eEtBGE,EAAuBiL,EAC3CC,EFsBK/J,EAAQqJ,SAIfzK,EAAMD,GAAI,QAAQ,SAAE1F,EAAQL,GAC1BA,EAAQ8C,KAAM,iBAGhBkD,EAAMD,GAAI,eAAe,SAAA1F,GACvBA,qDAEM,IAAIG,EAAI,EAAGA,EAAI+E,EAAM9E,OAAQD,IAAM,KACjCR,EAAU,CAAEsO,IAClBtI,EAAMO,KAAM,kBAAmBlG,EAAQL,EAASQ,GAEhDH,iBAAwBL,EAAQ+H,KAAM,WACtC/B,EAAMO,KAAM,oBAAqBlG,EAAQG,GACzCH,YAGFA,eAGK8G,GAA0B,oBAAXiK,SAItBA,OAAOd,iBAAkB,UElDHrK,EFkDuBoL,EElDAH,EFFvB,IEKjB,WACEC,IACLA,EAAQrB,YAAY,WAClB7J,IACAkL,EAAQ,OACPD,OF2CLG,IAEArL,EAAMD,GAAI,WAAW,WACnBqL,OAAOb,oBAAqB,SAAUc,iBAM/BA,QACDC,EAAOnK,EAAKoK,uBAAwBjD,IACpC1D,EAAOnJ,MAAYqF,EAASK,MAE7BmK,EAAK7Q,QAAUmK,MACZ,IAAIpK,EAAI,EAAGA,EAAIoK,EAAKrK,SAASE,OAAQD,IAAM,KACzCgR,EAAOF,EAAM9Q,GACbkP,EAAO9E,EAAKrK,SAAUC,GAEvBd,EAAe8R,IAASA,EAAIC,eAAiB/B,EAAK+B,cACrD5P,EAAQ2P,EAAK,CAAEE,OAAYhC,EAAK+B,uDG1EZzL,IAAAA,MAAOkB,IAAAA,KAAME,IAAAA,QACnClH,EAASgH,EAAThH,QAEHkH,EAAQuK,cAAgBzR,EAAO,KAC5B4E,EAAoC,YAAzBsC,EAAQuK,aAA6B,UAAY,WAClEvK,EAAQwK,QAAUxK,EAAQwK,SAAW,GACrCxK,EAAQwK,QAAS9M,IAAa,EAE9BkB,EAAMD,cAAgBjB,GAAa,SAAAzE,GACjCA,4BAAwD6G,EAAKhH,iDCUpCiH,IAAAA,KAAMnB,IAAAA,MAAOoB,IAAAA,QACpCoH,EAASrH,EAAO/F,EAAM+F,0BAAiC,GACvD0K,EAAkB,KAATrD,GAAepH,EAAQ0K,aAAetD,KAEhDqD,GAAqB,IAAXA,EAAe,CAC5BzK,EAAQqJ,QAAS,MACbjL,EAASuM,KAAKC,MAAOH,GAAW,EAEpC7L,EAAMD,GAAI,qBAAqB,SAAE1F,EAAQG,OACjCR,EAAU,CAhBoB6G,mBAiB9B2H,EAAU,CAAEyC,MAAM,EAAOD,QAASxQ,EAAI,EAAIgF,GAEhDQ,EAAMO,KAAM,kBAAmBlG,EAAQL,EAASQ,EAAGgO,GAE9CA,EAAKyC,OACRzC,EAAKwC,QAAUhT,EACfwH,KAGFnF,kBAAyBL,EAAQ+H,KAAM,UAAYyG,EAAKwC,gDCrCnChL,IAAAA,MAAOoB,IAAAA,QAChCpB,EAAMD,GAAI,WAAW,iBACMqB,EAAjBwK,QAAAA,aAAU,KACVpC,EAAUpI,EAAVoI,MACFyC,EAAsBL,EAAtBK,SAAUC,EAAYN,EAAZM,SAEhBD,EAAWA,GAAsB,aAAVzC,EACvB0C,EAAWA,GAAqB,YAAV1C,GAEAvP,SAAS,SAAEkS,EAAQxP,GAClCwP,IACE3C,YA0CSxJ,EAAiB0H,OAC/B5I,EAAW4I,EAAO,OAAS,QAEjC1H,EAAMD,iBAAmBjB,GAAa,SAAAzE,GACpCA,8BACA2F,EAAMO,iBAAmBzB,EAAazE,GACtCA,gBA/CM+R,CAAapM,EAAiB,IAAVrD,YAuBNqD,EAAiB0H,OACjCV,EAAgBnG,cAEtBb,EAAMD,GAAI,SAAS,SAAA1F,GACjBA,iBAAwB2M,MAAeA,YAAoBU,EAAO,OAAS,eAC3E1H,EAAMO,oBAAqBmH,EAAO,OAAS,SAAYrN,GACvDA,eA1BIgS,CAAerM,EAAiB,IAAVrD,QAIrBsP,GAAYC,IACflM,EAAMD,GAAI,QAAQ,SAAE1F,EAAQL,GAC1BA,EAAQ8C,KAAM,mCC1BtBnC,EAAQiL,IAAW,SAAAtI,GACjBoI,GAAYC,SAAUrI,QAGxBoI,GAAYrE,QAASC"}